
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Painter;

import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class ParserF extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return TOK.class;
}

  /** Default constructor. */
  @Deprecated
  public ParserF() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public ParserF(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ParserF(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\217\000\002\002\004\000\002\002\010\000\002\002" +
    "\007\000\002\046\004\000\002\047\003\000\002\003\004" +
    "\000\002\003\003\000\002\005\004\000\002\005\004\000" +
    "\002\005\003\000\002\005\003\000\002\005\003\000\002" +
    "\005\003\000\002\005\003\000\002\005\003\000\002\073" +
    "\002\000\002\005\005\000\002\005\003\000\002\005\003" +
    "\000\002\014\006\000\002\014\004\000\002\052\003\000" +
    "\002\074\002\000\002\042\006\000\002\024\011\000\002" +
    "\024\011\000\002\024\007\000\002\050\003\000\002\051" +
    "\003\000\002\075\002\000\002\025\010\000\002\026\005" +
    "\000\002\026\004\000\002\027\004\000\002\027\003\000" +
    "\002\027\003\000\002\030\004\000\002\030\003\000\002" +
    "\076\002\000\002\031\007\000\002\031\005\000\002\071" +
    "\003\000\002\077\002\000\002\032\006\000\002\032\004" +
    "\000\002\072\003\000\002\100\002\000\002\033\010\000" +
    "\002\034\013\000\002\035\005\000\002\035\005\000\002" +
    "\055\003\000\002\036\005\000\002\036\005\000\002\036" +
    "\005\000\002\036\005\000\002\036\005\000\002\036\003" +
    "\000\002\036\003\000\002\036\003\000\002\101\002\000" +
    "\002\037\010\000\002\102\002\000\002\103\002\000\002" +
    "\040\013\000\002\041\007\000\002\041\006\000\002\054" +
    "\003\000\002\044\005\000\002\044\004\000\002\043\003" +
    "\000\002\043\003\000\002\043\003\000\002\043\003\000" +
    "\002\043\003\000\002\007\003\000\002\007\003\000\002" +
    "\007\003\000\002\007\003\000\002\007\003\000\002\007" +
    "\003\000\002\007\003\000\002\007\003\000\002\007\003" +
    "\000\002\007\003\000\002\007\005\000\002\011\005\000" +
    "\002\011\005\000\002\011\005\000\002\011\005\000\002" +
    "\011\004\000\002\012\005\000\002\012\005\000\002\012" +
    "\005\000\002\012\005\000\002\012\005\000\002\012\005" +
    "\000\002\013\005\000\002\013\005\000\002\013\004\000" +
    "\002\004\004\000\002\004\003\000\002\006\004\000\002" +
    "\006\004\000\002\006\003\000\002\015\007\000\002\053" +
    "\003\000\002\053\003\000\002\053\003\000\002\020\005" +
    "\000\002\020\006\000\002\020\004\000\002\064\004\000" +
    "\002\064\004\000\002\064\004\000\002\021\013\000\002" +
    "\021\013\000\002\067\003\000\002\070\003\000\002\066" +
    "\003\000\002\065\003\000\002\022\005\000\002\022\003" +
    "\000\002\104\002\000\002\105\002\000\002\106\002\000" +
    "\002\107\002\000\002\017\016\000\002\045\005\000\002" +
    "\045\004\000\002\016\003\000\002\016\003\000\002\010" +
    "\003\000\002\010\003\000\002\010\003\000\002\010\003" +
    "\000\002\010\005\000\002\056\003\000\002\057\003\000" +
    "\002\060\003\000\002\061\003\000\002\062\003\000\002" +
    "\063\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0106\000\004\005\006\001\002\000\004\004\u0108\001" +
    "\002\000\004\002\u0107\001\002\000\012\004\ufffd\006\ufffd" +
    "\007\ufffd\010\ufffd\001\002\000\004\066\010\001\002\000" +
    "\042\011\uff74\012\uff74\013\uff74\014\uff74\015\uff74\035\uff74" +
    "\036\uff74\040\uff74\041\uff74\042\uff74\043\uff74\044\uff74\047" +
    "\uff74\064\uff74\066\uff74\067\uff74\001\002\000\004\067\012" +
    "\001\002\000\046\046\uff73\047\uff73\050\uff73\051\uff73\053" +
    "\uff73\054\uff73\055\uff73\056\uff73\060\uff73\061\uff73\062\uff73" +
    "\063\uff73\067\uff73\070\uff73\071\uff73\074\uff73\075\uff73\076" +
    "\uff73\001\002\000\004\070\014\001\002\000\060\003\uff78" +
    "\005\uff78\011\uff78\012\uff78\013\uff78\014\uff78\015\uff78\016" +
    "\uff78\024\uff78\026\uff78\027\uff78\030\uff78\031\uff78\032\uff78" +
    "\033\uff78\034\uff78\037\uff78\040\uff78\043\uff78\044\uff78\065" +
    "\uff78\066\uff78\071\uff78\001\002\000\042\003\043\005\006" +
    "\011\051\012\042\013\045\014\024\015\046\024\037\026" +
    "\034\031\031\032\032\033\050\034\054\037\016\044\021" +
    "\071\020\001\002\000\004\066\uffbe\001\002\000\004\066" +
    "\010\001\002\000\056\002\uff77\003\uff77\005\uff77\011\uff77" +
    "\012\uff77\013\uff77\014\uff77\015\uff77\024\uff77\025\uff77\026" +
    "\uff77\027\uff77\030\uff77\031\uff77\032\uff77\033\uff77\034\uff77" +
    "\037\uff77\044\uff77\071\uff77\074\uff77\076\uff77\001\002\000" +
    "\004\057\uffeb\001\002\000\046\003\ufff5\005\ufff5\011\ufff5" +
    "\012\ufff5\013\ufff5\014\ufff5\015\ufff5\024\ufff5\026\ufff5\027" +
    "\ufff5\030\ufff5\031\ufff5\032\ufff5\033\ufff5\034\ufff5\037\ufff5" +
    "\044\ufff5\071\ufff5\001\002\000\010\006\262\007\265\010" +
    "\264\001\002\000\004\044\uffb9\001\002\000\046\003\ufff7" +
    "\005\ufff7\011\ufff7\012\ufff7\013\ufff7\014\ufff7\015\ufff7\024" +
    "\ufff7\026\ufff7\027\ufff7\030\ufff7\031\ufff7\032\ufff7\033\ufff7" +
    "\034\ufff7\037\ufff7\044\ufff7\071\ufff7\001\002\000\042\003" +
    "\043\005\006\011\051\012\042\013\045\014\024\015\046" +
    "\024\037\026\034\031\031\032\032\033\050\034\054\037" +
    "\016\044\021\071\020\001\002\000\004\044\220\001\002" +
    "\000\046\003\ufff4\005\ufff4\011\ufff4\012\ufff4\013\ufff4\014" +
    "\ufff4\015\ufff4\024\ufff4\026\ufff4\027\ufff4\030\ufff4\031\ufff4" +
    "\032\ufff4\033\ufff4\034\ufff4\037\ufff4\044\ufff4\071\ufff4\001" +
    "\002\000\004\066\uffd3\001\002\000\004\066\uffc5\001\002" +
    "\000\046\003\ufff8\005\ufff8\011\ufff8\012\ufff8\013\ufff8\014" +
    "\ufff8\015\ufff8\024\ufff8\026\ufff8\027\ufff8\030\ufff8\031\ufff8" +
    "\032\ufff8\033\ufff8\034\ufff8\037\ufff8\044\ufff8\071\ufff8\001" +
    "\002\000\004\066\uffe4\001\002\000\046\003\ufffb\005\ufffb" +
    "\011\ufffb\012\ufffb\013\ufffb\014\ufffb\015\ufffb\024\ufffb\026" +
    "\ufffb\027\ufffb\030\ufffb\031\ufffb\032\ufffb\033\ufffb\034\ufffb" +
    "\037\ufffb\044\ufffb\071\ufffb\001\002\000\004\002\uffff\001" +
    "\002\000\004\066\uffe6\001\002\000\004\076\154\001\002" +
    "\000\046\003\ufff6\005\ufff6\011\ufff6\012\ufff6\013\ufff6\014" +
    "\ufff6\015\ufff6\024\ufff6\026\ufff6\027\ufff6\030\ufff6\031\ufff6" +
    "\032\ufff6\033\ufff6\034\ufff6\037\ufff6\044\ufff6\071\ufff6\001" +
    "\002\000\004\044\uffb7\001\002\000\046\003\uffef\005\uffef" +
    "\011\uffef\012\uffef\013\uffef\014\uffef\015\uffef\024\uffef\026" +
    "\uffef\027\uffef\030\uffef\031\uffef\032\uffef\033\uffef\034\uffef" +
    "\037\uffef\044\uffef\071\uffef\001\002\000\046\003\ufff3\005" +
    "\ufff3\011\ufff3\012\ufff3\013\ufff3\014\ufff3\015\ufff3\024\ufff3" +
    "\026\ufff3\027\ufff3\030\ufff3\031\ufff3\032\ufff3\033\ufff3\034" +
    "\ufff3\037\ufff3\044\ufff3\071\ufff3\001\002\000\004\044\uffb8" +
    "\001\002\000\004\044\uffbb\001\002\000\046\003\ufff0\005" +
    "\ufff0\011\ufff0\012\ufff0\013\ufff0\014\ufff0\015\ufff0\024\ufff0" +
    "\026\ufff0\027\ufff0\030\ufff0\031\ufff0\032\ufff0\033\ufff0\034" +
    "\ufff0\037\ufff0\044\ufff0\071\ufff0\001\002\000\004\070\uffc3" +
    "\001\002\000\004\044\uffba\001\002\000\004\076\136\001" +
    "\002\000\004\066\010\001\002\000\004\076\ufff2\001\002" +
    "\000\004\076\056\001\002\000\046\003\ufff1\005\ufff1\011" +
    "\ufff1\012\ufff1\013\ufff1\014\ufff1\015\ufff1\024\ufff1\026\ufff1" +
    "\027\ufff1\030\ufff1\031\ufff1\032\ufff1\033\ufff1\034\ufff1\037" +
    "\ufff1\044\ufff1\071\ufff1\001\002\000\030\035\066\036\065" +
    "\040\061\041\064\042\060\043\063\044\073\047\062\064" +
    "\070\066\010\067\012\001\002\000\040\046\uffb0\047\uffb0" +
    "\050\uffb0\051\uffb0\053\uffb0\054\uffb0\055\uffb0\056\uffb0\060" +
    "\uffb0\061\uffb0\062\uffb0\063\uffb0\067\uffb0\075\uffb0\076\uffb0" +
    "\001\002\000\040\046\uffb2\047\uffb2\050\uffb2\051\uffb2\053" +
    "\uffb2\054\uffb2\055\uffb2\056\uffb2\060\uffb2\061\uffb2\062\uffb2" +
    "\063\uffb2\067\uffb2\075\uffb2\076\uffb2\001\002\000\026\035" +
    "\066\036\065\040\061\041\064\042\060\043\063\044\073" +
    "\047\062\064\070\066\010\001\002\000\040\046\uffaf\047" +
    "\uffaf\050\uffaf\051\uffaf\053\uffaf\054\uffaf\055\uffaf\056\uffaf" +
    "\060\uffaf\061\uffaf\062\uffaf\063\uffaf\067\uffaf\075\uffaf\076" +
    "\uffaf\001\002\000\040\046\uffb1\047\uffb1\050\uffb1\051\uffb1" +
    "\053\uffb1\054\uffb1\055\uffb1\056\uffb1\060\uffb1\061\uffb1\062" +
    "\uffb1\063\uffb1\067\uffb1\075\uffb1\076\uffb1\001\002\000\040" +
    "\046\uffad\047\uffad\050\uffad\051\uffad\053\uffad\054\uffad\055" +
    "\uffad\056\uffad\060\uffad\061\uffad\062\uffad\063\uffad\067\uffad" +
    "\075\uffad\076\uffad\001\002\000\040\046\uffae\047\uffae\050" +
    "\uffae\051\uffae\053\uffae\054\uffae\055\uffae\056\uffae\060\uffae" +
    "\061\uffae\062\uffae\063\uffae\067\uffae\075\uffae\076\uffae\001" +
    "\002\000\026\035\066\036\065\040\061\041\064\042\060" +
    "\043\063\044\073\047\062\064\070\066\010\001\002\000" +
    "\026\035\066\036\065\040\061\041\064\042\060\043\063" +
    "\044\073\047\062\064\070\066\010\001\002\000\040\046" +
    "\uffb6\047\uffb6\050\uffb6\051\uffb6\053\uffb6\054\uffb6\055\uffb6" +
    "\056\uffb6\060\uffb6\061\uffb6\062\uffb6\063\uffb6\067\uffb6\075" +
    "\uffb6\076\uffb6\001\002\000\040\046\uffb5\047\uffb5\050\uffb5" +
    "\051\uffb5\053\uffb5\054\uffb5\055\uffb5\056\uffb5\060\uffb5\061" +
    "\uffb5\062\uffb5\063\uffb5\067\uffb5\075\uffb5\076\uffb5\001\002" +
    "\000\040\046\uffb3\047\uffb3\050\uffb3\051\uffb3\053\uffb3\054" +
    "\uffb3\055\uffb3\056\uffb3\060\uffb3\061\uffb3\062\uffb3\063\uffb3" +
    "\067\uffb3\075\uffb3\076\uffb3\001\002\000\034\046\110\047" +
    "\100\050\106\051\105\053\104\054\107\055\101\056\103" +
    "\060\112\061\111\062\114\063\102\067\012\001\002\000" +
    "\040\046\uffb4\047\uffb4\050\uffb4\051\uffb4\053\uffb4\054\uffb4" +
    "\055\uffb4\056\uffb4\060\uffb4\061\uffb4\062\uffb4\063\uffb4\067" +
    "\uffb4\075\uffb4\076\uffb4\001\002\000\004\076\077\001\002" +
    "\000\046\003\uffbf\005\uffbf\011\uffbf\012\uffbf\013\uffbf\014" +
    "\uffbf\015\uffbf\024\uffbf\026\uffbf\027\uffbf\030\uffbf\031\uffbf" +
    "\032\uffbf\033\uffbf\034\uffbf\037\uffbf\044\uffbf\071\uffbf\001" +
    "\002\000\026\035\066\036\065\040\061\041\064\042\060" +
    "\043\063\044\073\047\062\064\070\066\010\001\002\000" +
    "\026\035\066\036\065\040\061\041\064\042\060\043\063" +
    "\044\073\047\062\064\070\066\010\001\002\000\026\035" +
    "\066\036\065\040\061\041\064\042\060\043\063\044\073" +
    "\047\062\064\070\066\010\001\002\000\026\035\066\036" +
    "\065\040\061\041\064\042\060\043\063\044\073\047\062" +
    "\064\070\066\010\001\002\000\026\035\066\036\065\040" +
    "\061\041\064\042\060\043\063\044\073\047\062\064\070" +
    "\066\010\001\002\000\026\035\066\036\065\040\061\041" +
    "\064\042\060\043\063\044\073\047\062\064\070\066\010" +
    "\001\002\000\026\035\066\036\065\040\061\041\064\042" +
    "\060\043\063\044\073\047\062\064\070\066\010\001\002" +
    "\000\026\035\066\036\065\040\061\041\064\042\060\043" +
    "\063\044\073\047\062\064\070\066\010\001\002\000\026" +
    "\035\066\036\065\040\061\041\064\042\060\043\063\044" +
    "\073\047\062\064\070\066\010\001\002\000\026\035\066" +
    "\036\065\040\061\041\064\042\060\043\063\044\073\047" +
    "\062\064\070\066\010\001\002\000\026\035\066\036\065" +
    "\040\061\041\064\042\060\043\063\044\073\047\062\064" +
    "\070\066\010\001\002\000\004\076\116\001\002\000\026" +
    "\035\066\036\065\040\061\041\064\042\060\043\063\044" +
    "\073\047\062\064\070\066\010\001\002\000\040\046\110" +
    "\047\100\050\106\051\105\053\104\054\107\055\101\056" +
    "\103\060\112\061\111\062\uffa0\063\uffa0\067\uffa0\075\uffa0" +
    "\076\uffa0\001\002\000\046\003\uffc0\005\uffc0\011\uffc0\012" +
    "\uffc0\013\uffc0\014\uffc0\015\uffc0\024\uffc0\026\uffc0\027\uffc0" +
    "\030\uffc0\031\uffc0\032\uffc0\033\uffc0\034\uffc0\037\uffc0\044" +
    "\uffc0\071\uffc0\001\002\000\040\046\110\047\100\050\106" +
    "\051\105\053\uffa2\054\uffa2\055\uffa2\056\uffa2\060\uffa2\061" +
    "\uffa2\062\uffa2\063\uffa2\067\uffa2\075\uffa2\076\uffa2\001\002" +
    "\000\040\046\110\047\100\050\106\051\105\053\uffa1\054" +
    "\uffa1\055\uffa1\056\uffa1\060\uffa1\061\uffa1\062\uffa1\063\uffa1" +
    "\067\uffa1\075\uffa1\076\uffa1\001\002\000\040\046\uffab\047" +
    "\uffab\050\106\051\105\053\uffab\054\uffab\055\uffab\056\uffab" +
    "\060\uffab\061\uffab\062\uffab\063\uffab\067\uffab\075\uffab\076" +
    "\uffab\001\002\000\040\046\110\047\100\050\106\051\105" +
    "\053\uffa5\054\uffa5\055\101\056\103\060\112\061\111\062" +
    "\uffa5\063\uffa5\067\uffa5\075\uffa5\076\uffa5\001\002\000\040" +
    "\046\uffa9\047\uffa9\050\uffa9\051\uffa9\053\uffa9\054\uffa9\055" +
    "\uffa9\056\uffa9\060\uffa9\061\uffa9\062\uffa9\063\uffa9\067\uffa9" +
    "\075\uffa9\076\uffa9\001\002\000\040\046\uffa8\047\uffa8\050" +
    "\uffa8\051\uffa8\053\uffa8\054\uffa8\055\uffa8\056\uffa8\060\uffa8" +
    "\061\uffa8\062\uffa8\063\uffa8\067\uffa8\075\uffa8\076\uffa8\001" +
    "\002\000\040\046\110\047\100\050\106\051\105\053\uffa6" +
    "\054\uffa6\055\101\056\103\060\112\061\111\062\uffa6\063" +
    "\uffa6\067\uffa6\075\uffa6\076\uffa6\001\002\000\040\046\110" +
    "\047\100\050\106\051\105\053\uffa3\054\uffa3\055\uffa3\056" +
    "\uffa3\060\uffa3\061\uffa3\062\uffa3\063\uffa3\067\uffa3\075\uffa3" +
    "\076\uffa3\001\002\000\040\046\110\047\100\050\106\051" +
    "\105\053\104\054\107\055\101\056\103\060\112\061\111" +
    "\062\114\063\uff9f\067\uff9f\075\uff9f\076\uff9f\001\002\000" +
    "\040\046\110\047\100\050\106\051\105\053\uffa4\054\uffa4" +
    "\055\uffa4\056\uffa4\060\uffa4\061\uffa4\062\uffa4\063\uffa4\067" +
    "\uffa4\075\uffa4\076\uffa4\001\002\000\040\046\uffaa\047\uffaa" +
    "\050\106\051\105\053\uffaa\054\uffaa\055\uffaa\056\uffaa\060" +
    "\uffaa\061\uffaa\062\uffaa\063\uffaa\067\uffaa\075\uffaa\076\uffaa" +
    "\001\002\000\040\046\110\047\100\050\106\051\105\053" +
    "\104\054\107\055\101\056\103\060\112\061\111\062\uff9e" +
    "\063\uff9e\067\uff9e\075\uff9e\076\uff9e\001\002\000\034\046" +
    "\110\047\100\050\106\051\105\053\104\054\107\055\101" +
    "\056\103\060\112\061\111\062\114\063\102\067\012\001" +
    "\002\000\040\046\uffac\047\uffac\050\uffac\051\uffac\053\uffac" +
    "\054\uffac\055\uffac\056\uffac\060\uffac\061\uffac\062\uffac\063" +
    "\uffac\067\uffac\075\uffac\076\uffac\001\002\000\040\046\uffa7" +
    "\047\uffa7\050\uffa7\051\uffa7\053\uffa7\054\uffa7\055\uffa7\056" +
    "\uffa7\060\uffa7\061\uffa7\062\uffa7\063\uffa7\067\uffa7\075\uffa7" +
    "\076\uffa7\001\002\000\046\003\ufff9\005\ufff9\011\ufff9\012" +
    "\ufff9\013\ufff9\014\ufff9\015\ufff9\024\ufff9\026\ufff9\027\ufff9" +
    "\030\ufff9\031\ufff9\032\ufff9\033\ufff9\034\ufff9\037\ufff9\044" +
    "\ufff9\071\ufff9\001\002\000\004\070\014\001\002\000\004" +
    "\032\146\001\002\000\042\003\043\005\006\011\051\012" +
    "\042\013\045\014\024\015\046\024\037\026\034\031\031" +
    "\032\032\033\050\034\054\037\016\044\021\071\020\001" +
    "\002\000\042\003\043\005\006\011\051\012\042\013\045" +
    "\014\024\015\046\024\037\026\034\031\031\032\032\033" +
    "\050\034\054\037\016\044\021\071\020\001\002\000\050" +
    "\003\uffbc\005\uffbc\011\uffbc\012\uffbc\013\uffbc\014\uffbc\015" +
    "\uffbc\024\uffbc\025\uffbc\026\uffbc\027\uffbc\030\uffbc\031\uffbc" +
    "\032\uffbc\033\uffbc\034\uffbc\037\uffbc\044\uffbc\071\uffbc\001" +
    "\002\000\046\003\ufffc\005\ufffc\011\ufffc\012\ufffc\013\ufffc" +
    "\014\ufffc\015\ufffc\024\ufffc\026\ufffc\027\ufffc\030\ufffc\031" +
    "\ufffc\032\ufffc\033\ufffc\034\ufffc\037\ufffc\044\ufffc\071\ufffc" +
    "\001\002\000\050\003\uffbd\005\uffbd\011\uffbd\012\uffbd\013" +
    "\uffbd\014\uffbd\015\uffbd\024\uffbd\025\uffbd\026\uffbd\027\uffbd" +
    "\030\uffbd\031\uffbd\032\uffbd\033\uffbd\034\uffbd\037\uffbd\044" +
    "\uffbd\071\uffbd\001\002\000\004\066\uffc2\001\002\000\004" +
    "\066\010\001\002\000\026\035\066\036\065\040\061\041" +
    "\064\042\060\043\063\044\073\047\062\064\070\066\010" +
    "\001\002\000\034\046\110\047\100\050\106\051\105\053" +
    "\104\054\107\055\101\056\103\060\112\061\111\062\114" +
    "\063\102\067\012\001\002\000\004\076\153\001\002\000" +
    "\046\003\uffc1\005\uffc1\011\uffc1\012\uffc1\013\uffc1\014\uffc1" +
    "\015\uffc1\024\uffc1\026\uffc1\027\uffc1\030\uffc1\031\uffc1\032" +
    "\uffc1\033\uffc1\034\uffc1\037\uffc1\044\uffc1\071\uffc1\001\002" +
    "\000\046\003\ufffa\005\ufffa\011\ufffa\012\ufffa\013\ufffa\014" +
    "\ufffa\015\ufffa\024\ufffa\026\ufffa\027\ufffa\030\ufffa\031\ufffa" +
    "\032\ufffa\033\ufffa\034\ufffa\037\ufffa\044\ufffa\071\ufffa\001" +
    "\002\000\004\066\010\001\002\000\026\035\066\036\065" +
    "\040\061\041\064\042\060\043\063\044\073\047\062\064" +
    "\070\066\010\001\002\000\034\046\110\047\100\050\106" +
    "\051\105\053\104\054\107\055\101\056\103\060\112\061" +
    "\111\062\114\063\102\067\012\001\002\000\004\070\014" +
    "\001\002\000\010\027\173\030\163\071\020\001\002\000" +
    "\046\003\uffe3\005\uffe3\011\uffe3\012\uffe3\013\uffe3\014\uffe3" +
    "\015\uffe3\024\uffe3\026\uffe3\027\uffe3\030\uffe3\031\uffe3\032" +
    "\uffe3\033\uffe3\034\uffe3\037\uffe3\044\uffe3\071\uffe3\001\002" +
    "\000\004\075\uffd4\001\002\000\004\071\uffde\001\002\000" +
    "\026\035\066\036\065\040\061\041\064\042\060\043\063" +
    "\044\073\047\062\064\070\066\010\001\002\000\010\027" +
    "\173\030\163\071\uffdf\001\002\000\004\075\175\001\002" +
    "\000\046\003\uffe1\005\uffe1\011\uffe1\012\uffe1\013\uffe1\014" +
    "\uffe1\015\uffe1\024\uffe1\026\uffe1\027\uffe1\030\uffe1\031\uffe1" +
    "\032\uffe1\033\uffe1\034\uffe1\037\uffe1\044\uffe1\071\uffe1\001" +
    "\002\000\004\071\020\001\002\000\010\027\uffdc\030\uffdc" +
    "\071\uffdc\001\002\000\026\035\uffd8\036\uffd8\040\uffd8\041" +
    "\uffd8\042\uffd8\043\uffd8\044\uffd8\047\uffd8\064\uffd8\066\uffd8" +
    "\001\002\000\046\003\uffe2\005\uffe2\011\uffe2\012\uffe2\013" +
    "\uffe2\014\uffe2\015\uffe2\024\uffe2\026\uffe2\027\uffe2\030\uffe2" +
    "\031\uffe2\032\uffe2\033\uffe2\034\uffe2\037\uffe2\044\uffe2\071" +
    "\uffe2\001\002\000\042\003\uffd7\005\uffd7\011\uffd7\012\uffd7" +
    "\013\uffd7\014\uffd7\015\uffd7\024\uffd7\026\uffd7\031\uffd7\032" +
    "\uffd7\033\uffd7\034\uffd7\037\uffd7\044\uffd7\071\uffd5\001\002" +
    "\000\040\003\043\005\006\011\051\012\042\013\045\014" +
    "\024\015\046\024\037\026\034\031\031\032\032\033\050" +
    "\034\054\037\016\044\021\001\002\000\042\003\043\005" +
    "\006\011\051\012\042\013\045\014\024\015\046\024\037" +
    "\026\034\031\031\032\032\033\050\034\054\037\016\044" +
    "\021\071\uffd6\001\002\000\004\071\uffe0\001\002\000\010" +
    "\027\uffdd\030\uffdd\071\uffdd\001\002\000\034\046\110\047" +
    "\100\050\106\051\105\053\104\054\107\055\101\056\103" +
    "\060\112\061\111\062\114\063\102\075\203\001\002\000" +
    "\046\003\uffdb\005\uffdb\011\uffdb\012\uffdb\013\uffdb\014\uffdb" +
    "\015\uffdb\024\uffdb\026\uffdb\027\uffd9\030\uffd9\031\uffdb\032" +
    "\uffdb\033\uffdb\034\uffdb\037\uffdb\044\uffdb\071\uffd9\001\002" +
    "\000\040\003\043\005\006\011\051\012\042\013\045\014" +
    "\024\015\046\024\037\026\034\031\031\032\032\033\050" +
    "\034\054\037\016\044\021\001\002\000\046\003\043\005" +
    "\006\011\051\012\042\013\045\014\024\015\046\024\037" +
    "\026\034\027\uffda\030\uffda\031\031\032\032\033\050\034" +
    "\054\037\016\044\021\071\uffda\001\002\000\004\066\010" +
    "\001\002\000\026\035\066\036\065\040\061\041\064\042" +
    "\060\043\063\044\073\047\062\064\070\066\010\001\002" +
    "\000\034\046\110\047\100\050\106\051\105\053\104\054" +
    "\107\055\101\056\103\060\112\061\111\062\114\063\102" +
    "\067\012\001\002\000\004\070\014\001\002\000\046\003" +
    "\uffc4\005\uffc4\011\uffc4\012\uffc4\013\uffc4\014\uffc4\015\uffc4" +
    "\024\uffc4\026\uffc4\027\uffc4\030\uffc4\031\uffc4\032\uffc4\033" +
    "\uffc4\034\uffc4\037\uffc4\044\uffc4\071\uffc4\001\002\000\004" +
    "\066\010\001\002\000\014\011\051\012\042\013\045\014" +
    "\024\015\046\001\002\000\004\067\012\001\002\000\004" +
    "\044\220\001\002\000\004\057\221\001\002\000\006\057" +
    "\uffec\076\uffec\001\002\000\026\035\066\036\065\040\061" +
    "\041\064\042\060\043\063\044\073\047\062\064\070\066" +
    "\010\001\002\000\034\046\110\047\100\050\106\051\105" +
    "\053\104\054\107\055\101\056\103\060\112\061\111\062" +
    "\114\063\102\076\223\001\002\000\004\044\226\001\002" +
    "\000\006\055\232\060\233\001\002\000\004\076\227\001" +
    "\002\000\010\045\uffce\055\uffce\060\uffce\001\002\000\004" +
    "\044\226\001\002\000\004\045\231\001\002\000\004\067" +
    "\uffd1\001\002\000\012\042\236\043\234\044\237\066\010" +
    "\001\002\000\012\042\236\043\234\044\237\066\010\001" +
    "\002\000\016\046\uffc6\047\uffc6\050\uffc6\051\uffc6\067\uffc6" +
    "\076\uffc6\001\002\000\014\046\246\047\245\050\243\051" +
    "\244\076\uffcf\001\002\000\016\046\uffc7\047\uffc7\050\uffc7" +
    "\051\uffc7\067\uffc7\076\uffc7\001\002\000\016\046\uffc8\047" +
    "\uffc8\050\uffc8\051\uffc8\067\uffc8\076\uffc8\001\002\000\012" +
    "\042\236\043\234\044\237\066\010\001\002\000\014\046" +
    "\246\047\245\050\243\051\244\067\012\001\002\000\016" +
    "\046\uffc9\047\uffc9\050\uffc9\051\uffc9\067\uffc9\076\uffc9\001" +
    "\002\000\012\042\236\043\234\044\237\066\010\001\002" +
    "\000\012\042\236\043\234\044\237\066\010\001\002\000" +
    "\012\042\236\043\234\044\237\066\010\001\002\000\012" +
    "\042\236\043\234\044\237\066\010\001\002\000\016\046" +
    "\uffcd\047\uffcd\050\243\051\244\067\uffcd\076\uffcd\001\002" +
    "\000\016\046\uffcc\047\uffcc\050\243\051\244\067\uffcc\076" +
    "\uffcc\001\002\000\016\046\uffca\047\uffca\050\uffca\051\uffca" +
    "\067\uffca\076\uffca\001\002\000\016\046\uffcb\047\uffcb\050" +
    "\uffcb\051\uffcb\067\uffcb\076\uffcb\001\002\000\014\046\246" +
    "\047\245\050\243\051\244\076\uffd0\001\002\000\004\070" +
    "\014\001\002\000\046\003\uffd2\005\uffd2\011\uffd2\012\uffd2" +
    "\013\uffd2\014\uffd2\015\uffd2\024\uffd2\026\uffd2\027\uffd2\030" +
    "\uffd2\031\uffd2\032\uffd2\033\uffd2\034\uffd2\037\uffd2\044\uffd2" +
    "\071\uffd2\001\002\000\006\057\257\076\uffed\001\002\000" +
    "\026\035\066\036\065\040\061\041\064\042\060\043\063" +
    "\044\073\047\062\064\070\066\010\001\002\000\034\046" +
    "\110\047\100\050\106\051\105\053\104\054\107\055\101" +
    "\056\103\060\112\061\111\062\114\063\102\076\uffee\001" +
    "\002\000\004\002\000\001\002\000\004\066\uff97\001\002" +
    "\000\004\066\010\001\002\000\004\066\uff95\001\002\000" +
    "\004\066\uff96\001\002\000\004\067\012\001\002\000\004" +
    "\070\014\001\002\000\046\003\uff98\005\uff98\011\uff98\012" +
    "\uff98\013\uff98\014\uff98\015\uff98\024\uff98\026\uff98\027\uff98" +
    "\030\uff98\031\uff98\032\uff98\033\uff98\034\uff98\037\uff98\044" +
    "\uff98\071\uff98\001\002\000\012\012\300\015\304\044\021" +
    "\071\020\001\002\000\004\076\373\001\002\000\012\012" +
    "\uff99\015\uff99\044\uff99\071\uff99\001\002\000\012\012\uff9c" +
    "\015\uff9c\044\uff9c\071\uff9c\001\002\000\004\057\371\001" +
    "\002\000\012\017\360\022\356\023\355\072\307\001\002" +
    "\000\004\044\220\001\002\000\006\044\uff7e\072\uff89\001" +
    "\002\000\046\003\uff80\005\uff80\011\uff80\012\uff80\013\uff80" +
    "\014\uff80\015\uff80\024\uff80\026\uff80\027\uff80\030\uff80\031" +
    "\uff80\032\uff80\033\uff80\034\uff80\037\uff80\044\uff80\071\uff80" +
    "\001\002\000\012\012\300\015\304\044\021\071\020\001" +
    "\002\000\004\072\307\001\002\000\014\017\uff8a\022\uff8a" +
    "\023\uff8a\044\uff7f\072\uff8a\001\002\000\004\076\306\001" +
    "\002\000\012\012\uff9a\015\uff9a\044\uff9a\071\uff9a\001\002" +
    "\000\004\073\uff76\001\002\000\004\073\312\001\002\000" +
    "\004\021\314\001\002\000\006\020\uff75\021\uff75\001\002" +
    "\000\004\057\315\001\002\000\004\057\uff8b\001\002\000" +
    "\004\070\014\001\002\000\014\040\317\043\320\044\324" +
    "\065\325\066\010\001\002\000\010\071\uff7b\074\uff7b\076" +
    "\uff7b\001\002\000\010\071\uff7a\074\uff7a\076\uff7a\001\002" +
    "\000\026\035\066\036\065\040\061\041\064\042\060\043" +
    "\063\044\073\047\062\064\070\066\010\001\002\000\010" +
    "\071\uff7d\074\uff7d\076\uff7d\001\002\000\006\071\020\074" +
    "\343\001\002\000\010\071\uff7c\074\uff7c\076\uff7c\001\002" +
    "\000\004\070\uff86\001\002\000\006\071\uff87\074\uff87\001" +
    "\002\000\004\070\014\001\002\000\004\016\331\001\002" +
    "\000\004\074\uff85\001\002\000\004\074\333\001\002\000" +
    "\004\040\334\001\002\000\004\074\uff84\001\002\000\004" +
    "\074\336\001\002\000\004\040\337\001\002\000\004\071" +
    "\uff83\001\002\000\004\071\020\001\002\000\010\071\uff82" +
    "\074\uff82\076\uff82\001\002\000\004\076\345\001\002\000" +
    "\014\040\317\043\320\044\324\065\325\066\010\001\002" +
    "\000\006\071\uff88\074\uff88\001\002\000\012\012\uff8d\015" +
    "\uff8d\044\uff8d\071\uff8d\001\002\000\034\046\110\047\100" +
    "\050\106\051\105\053\104\054\107\055\101\056\103\060" +
    "\112\061\111\062\114\063\102\067\012\001\002\000\010" +
    "\071\uff79\074\uff79\076\uff79\001\002\000\012\012\uff9d\015" +
    "\uff9d\044\uff9d\071\uff9d\001\002\000\046\003\uff81\005\uff81" +
    "\011\uff81\012\uff81\013\uff81\014\uff81\015\uff81\024\uff81\026" +
    "\uff81\027\uff81\030\uff81\031\uff81\032\uff81\033\uff81\034\uff81" +
    "\037\uff81\044\uff81\071\uff81\001\002\000\006\057\353\076" +
    "\uff92\001\002\000\014\040\317\043\320\044\324\065\325" +
    "\066\010\001\002\000\004\076\uff93\001\002\000\004\057" +
    "\uff8f\001\002\000\004\057\uff90\001\002\000\004\073\312" +
    "\001\002\000\004\057\uff91\001\002\000\004\020\362\001" +
    "\002\000\004\057\uff8c\001\002\000\004\057\364\001\002" +
    "\000\004\070\014\001\002\000\014\040\317\043\320\044" +
    "\324\065\325\066\010\001\002\000\006\071\020\074\343" +
    "\001\002\000\004\076\370\001\002\000\012\012\uff8e\015" +
    "\uff8e\044\uff8e\071\uff8e\001\002\000\014\040\317\043\320" +
    "\044\324\065\325\066\010\001\002\000\004\076\uff94\001" +
    "\002\000\012\012\uff9b\015\uff9b\044\uff9b\071\uff9b\001\002" +
    "\000\004\057\375\001\002\000\026\035\066\036\065\040" +
    "\061\041\064\042\060\043\063\044\073\047\062\064\070" +
    "\066\010\001\002\000\034\046\110\047\100\050\106\051" +
    "\105\053\104\054\107\055\101\056\103\060\112\061\111" +
    "\062\114\063\102\076\uffea\001\002\000\026\035\066\036" +
    "\065\040\061\041\064\042\060\043\063\044\073\047\062" +
    "\064\070\066\010\001\002\000\034\046\110\047\100\050" +
    "\106\051\105\053\104\054\107\055\101\056\103\060\112" +
    "\061\111\062\114\063\102\067\012\001\002\000\004\070" +
    "\014\001\002\000\050\003\uffe7\005\uffe7\011\uffe7\012\uffe7" +
    "\013\uffe7\014\uffe7\015\uffe7\024\uffe7\025\u0103\026\uffe7\027" +
    "\uffe7\030\uffe7\031\uffe7\032\uffe7\033\uffe7\034\uffe7\037\uffe7" +
    "\044\uffe7\071\uffe7\001\002\000\006\024\uffe5\070\uffe5\001" +
    "\002\000\006\024\037\070\014\001\002\000\046\003\uffe9" +
    "\005\uffe9\011\uffe9\012\uffe9\013\uffe9\014\uffe9\015\uffe9\024" +
    "\uffe9\026\uffe9\027\uffe9\030\uffe9\031\uffe9\032\uffe9\033\uffe9" +
    "\034\uffe9\037\uffe9\044\uffe9\071\uffe9\001\002\000\046\003" +
    "\uffe8\005\uffe8\011\uffe8\012\uffe8\013\uffe8\014\uffe8\015\uffe8" +
    "\024\uffe8\026\uffe8\027\uffe8\030\uffe8\031\uffe8\032\uffe8\033" +
    "\uffe8\034\uffe8\037\uffe8\044\uffe8\071\uffe8\001\002\000\004" +
    "\002\001\001\002\000\004\066\ufffe\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0106\000\010\002\004\046\006\047\003\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\062\010\001\001\000\002\001\001\000\004\063\012\001" +
    "\001\000\002\001\001\000\004\056\014\001\001\000\002" +
    "\001\001\000\042\003\025\005\034\014\037\015\046\024" +
    "\032\025\024\033\040\037\021\040\027\041\043\042\051" +
    "\043\026\047\022\050\016\054\052\057\035\001\001\000" +
    "\002\001\001\000\004\062\376\001\001\000\002\001\001" +
    "\000\004\074\373\001\001\000\002\001\001\000\004\053" +
    "\262\001\001\000\002\001\001\000\002\001\001\000\040" +
    "\005\143\014\037\015\046\024\032\025\024\033\040\037" +
    "\021\040\027\041\043\042\051\043\026\047\022\050\016" +
    "\054\052\057\260\001\001\000\004\052\255\001\001\000" +
    "\002\001\001\000\004\100\212\001\001\000\004\101\205" +
    "\001\001\000\002\001\001\000\004\075\154\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\102\136\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\062\056\001\001\000\004" +
    "\073\054\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\007\073\011\070\012\071\013\074\062\066\063\075" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\007" +
    "\134\011\070\012\071\013\074\062\066\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\007\132\011\070\012\071\013\074\062\066" +
    "\001\001\000\014\007\131\011\070\012\071\013\074\062" +
    "\066\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\063\112\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\007\130\011\070" +
    "\012\071\013\074\062\066\001\001\000\014\007\127\011" +
    "\070\012\071\013\074\062\066\001\001\000\014\007\126" +
    "\011\070\012\071\013\074\062\066\001\001\000\014\007" +
    "\125\011\070\012\071\013\074\062\066\001\001\000\014" +
    "\007\124\011\070\012\071\013\074\062\066\001\001\000" +
    "\014\007\123\011\070\012\071\013\074\062\066\001\001" +
    "\000\014\007\122\011\070\012\071\013\074\062\066\001" +
    "\001\000\014\007\121\011\070\012\071\013\074\062\066" +
    "\001\001\000\014\007\120\011\070\012\071\013\074\062" +
    "\066\001\001\000\014\007\117\011\070\012\071\013\074" +
    "\062\066\001\001\000\014\007\116\011\070\012\071\013" +
    "\074\062\066\001\001\000\002\001\001\000\014\007\114" +
    "\011\070\012\071\013\074\062\066\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\063\133\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\044\137\056\140\001" +
    "\001\000\002\001\001\000\042\003\141\005\034\014\037" +
    "\015\046\024\032\025\024\033\040\037\021\040\027\041" +
    "\043\042\051\043\026\047\022\050\016\054\052\057\142" +
    "\001\001\000\040\005\143\014\037\015\046\024\032\025" +
    "\024\033\040\037\021\040\027\041\043\042\051\043\026" +
    "\047\022\050\016\054\052\057\144\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\103\146" +
    "\001\001\000\004\062\147\001\001\000\014\007\150\011" +
    "\070\012\071\013\074\062\066\001\001\000\004\063\151" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\062\155\001\001\000\014\007\156\011\070" +
    "\012\071\013\074\062\066\001\001\000\004\063\157\001" +
    "\001\000\006\026\161\056\160\001\001\000\020\027\170" +
    "\030\165\031\171\032\163\057\167\071\164\072\166\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\007\201\011\070\012\071\013\074\062\066\001" +
    "\001\000\012\031\200\032\177\071\164\072\166\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\057\173\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\077\175\001\001\000\040\003\176\005\034\014" +
    "\037\015\046\024\032\025\024\033\040\037\021\040\027" +
    "\041\043\042\051\043\026\047\022\050\016\054\052\001" +
    "\001\000\036\005\143\014\037\015\046\024\032\025\024" +
    "\033\040\037\021\040\027\041\043\042\051\043\026\047" +
    "\022\050\016\054\052\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\076\203\001\001\000" +
    "\040\003\204\005\034\014\037\015\046\024\032\025\024" +
    "\033\040\037\021\040\027\041\043\042\051\043\026\047" +
    "\022\050\016\054\052\001\001\000\036\005\143\014\037" +
    "\015\046\024\032\025\024\033\040\037\021\040\027\041" +
    "\043\042\051\043\026\047\022\050\016\054\052\001\001" +
    "\000\004\062\206\001\001\000\014\007\207\011\070\012" +
    "\071\013\074\062\066\001\001\000\004\063\210\001\001" +
    "\000\006\044\211\056\140\001\001\000\002\001\001\000" +
    "\004\062\213\001\001\000\006\034\214\043\215\001\001" +
    "\000\004\063\253\001\001\000\004\052\216\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\007\221\011\070" +
    "\012\071\013\074\062\066\001\001\000\002\001\001\000" +
    "\006\035\224\055\223\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\055\227\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\036\252\062\237" +
    "\001\001\000\006\036\234\062\237\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\036\240\062\237\001\001\000\004\063\241\001" +
    "\001\000\002\001\001\000\006\036\251\062\237\001\001" +
    "\000\006\036\250\062\237\001\001\000\006\036\247\062" +
    "\237\001\001\000\006\036\246\062\237\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\044\254\056\140\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\007\257\011" +
    "\070\012\071\013\074\062\066\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\062\265\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\063\266" +
    "\001\001\000\006\045\267\056\270\001\001\000\002\001" +
    "\001\000\026\004\301\006\273\016\276\020\271\021\272" +
    "\042\304\057\300\064\274\065\302\066\275\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\060\356\001\001\000\004\052\351\001" +
    "\001\000\002\001\001\000\002\001\001\000\024\006\347" +
    "\016\276\020\271\021\272\042\304\057\350\064\274\065" +
    "\302\066\275\001\001\000\004\060\307\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\061\310\001\001\000\004\070\312\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\056\315\001\001\000\012\010\325\017\321\022\322" +
    "\062\320\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\007\345\011\070\012\071\013\074\062\066\001\001" +
    "\000\002\001\001\000\004\057\341\001\001\000\002\001" +
    "\001\000\004\104\326\001\001\000\002\001\001\000\004" +
    "\056\327\001\001\000\002\001\001\000\004\105\331\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\106\334" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\107" +
    "\337\001\001\000\004\057\340\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\010\343\017\321\062\320\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\063\346" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\010\353\017\321\062\320" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\061\360\001\001\000\002\001\001\000\004" +
    "\067\362\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\056\364\001\001\000\012\010\325\017\321\022\365" +
    "\062\320\001\001\000\004\057\366\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\010\371\017\321\062\320" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\007\375\011\070\012\071\013\074\062\066" +
    "\001\001\000\002\001\001\000\014\007\377\011\070\012" +
    "\071\013\074\062\066\001\001\000\004\063\u0100\001\001" +
    "\000\006\044\u0101\056\140\001\001\000\004\051\u0103\001" +
    "\001\000\002\001\001\000\012\024\u0104\044\u0105\050\016" +
    "\056\140\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ParserF$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ParserF$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ParserF$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public ScannerF s;
    int index;
    int nIB = 0;
    WordPainter painter;
    public ParserF(ScannerF s,WordPainter painter) {
        super(s);
        this.s = s;
        this.painter = painter;
    }
    public void syntax_error(Symbol sym) {
        painter.SERROR(sym.left,sym.right);
    }
    public void unrecovered_syntax_error(Symbol sym) throws java.lang.Exception {}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$ParserF$actions {
  private final ParserF parser;

  /** Constructor */
  CUP$ParserF$actions(ParserF parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$ParserF$do_action_part00000000(
    int                        CUP$ParserF$act_num,
    java_cup.runtime.lr_parser CUP$ParserF$parser,
    java.util.Stack            CUP$ParserF$stack,
    int                        CUP$ParserF$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ParserF$result;

      /* select the action based on the action number */
      switch (CUP$ParserF$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INIT EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)).right;
		String start_val = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)).value;
		RESULT = start_val;
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$ParserF$parser.done_parsing();
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INIT ::= COLORMAIN COLORLPAR COLORRPAR COLORLBRC INSTRUCTIONS COLORRBRC 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("INIT",0, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-5)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INIT ::= COLORMAIN COLORLPAR COLORRPAR COLORLBRC COLORRBRC 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("INIT",0, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-4)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // COLORMAIN ::= COLORVOID RW_main 
            {
              String RESULT =null;
		int mnleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int mnright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String mn = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
		painter.FNC(mnleft, mnright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("COLORMAIN",36, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // COLORVOID ::= RW_void 
            {
              String RESULT =null;
		int vdleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int vdright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String vd = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
		painter.RW1(vdleft, vdright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("COLORVOID",37, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // INSTRUCTIONS ::= INSTRUCTIONS INSTRUCTION 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("INSTRUCTIONS",1, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // INSTRUCTIONS ::= INSTRUCTION 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("INSTRUCTIONS",1, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // INSTRUCTION ::= DECLID TK_semicolon 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",3, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // INSTRUCTION ::= REASIGN TK_semicolon 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",3, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // INSTRUCTION ::= IFSTRUCT 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",3, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // INSTRUCTION ::= SWITCHSTRUCT 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",3, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // INSTRUCTION ::= LOOPFOR 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",3, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // INSTRUCTION ::= LOOPWHILE 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",3, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // INSTRUCTION ::= LOOPDOWHILE 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",3, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // INSTRUCTION ::= PRINT 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",3, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // NT$0 ::= 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
painter.RW2(tleft, tright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("NT$0",57, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // INSTRUCTION ::= RW_break NT$0 TK_semicolon 
            {
              String RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).value;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",3, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // INSTRUCTION ::= DECFUNC 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",3, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // INSTRUCTION ::= error 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",3, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // DECLID ::= TYPE COLORDECLID TK_equal EXP 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("DECLID",10, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-3)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // DECLID ::= TYPE COLORDECLID 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("DECLID",10, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // COLORDECLID ::= TK_id 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
		painter.VARIABLE(idleft, idright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("COLORDECLID",40, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // NT$1 ::= 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
painter.USEVARIABLE(idleft, idright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("NT$1",58, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // REASIGN ::= TK_id NT$1 TK_equal EXP 
            {
              String RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-3)).value;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("REASIGN",32, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-3)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // IFSTRUCT ::= COLORIF COLORLPAR EXP COLORRPAR ENV COLORELSE IFSTRUCT 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("IFSTRUCT",18, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-6)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // IFSTRUCT ::= COLORIF COLORLPAR EXP COLORRPAR ENV COLORELSE ENV 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("IFSTRUCT",18, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-6)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // IFSTRUCT ::= COLORIF COLORLPAR EXP COLORRPAR ENV 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("IFSTRUCT",18, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-4)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // COLORIF ::= RW_if 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
		painter.RW2(ileft, iright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("COLORIF",38, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // COLORELSE ::= RW_else 
            {
              String RESULT =null;
		int elleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int elright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String el = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
		painter.RW2(elleft, elright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("COLORELSE",39, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // NT$2 ::= 
            {
              String RESULT =null;
		int swleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int swright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String sw = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
painter.RW2(swleft, swright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("NT$2",59, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // SWITCHSTRUCT ::= RW_switch NT$2 COLORLPAR EXP COLORRPAR ENVS 
            {
              String RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-4)).value;
		int swleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-5)).left;
		int swright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-5)).right;
		String sw = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-5)).value;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("SWITCHSTRUCT",19, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-5)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // ENVS ::= COLORLBRC CASESDEFAULT COLORRBRC 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("ENVS",20, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // ENVS ::= COLORLBRC COLORRBRC 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("ENVS",20, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // CASESDEFAULT ::= CASES DEFAULT 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("CASESDEFAULT",21, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // CASESDEFAULT ::= CASES 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("CASESDEFAULT",21, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // CASESDEFAULT ::= DEFAULT 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("CASESDEFAULT",21, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // CASES ::= CASES CASE 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("CASES",22, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // CASES ::= CASE 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("CASES",22, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // NT$3 ::= 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
painter.SYMBS1(cleft, cright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("NT$3",60, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // CASE ::= CASECOLOR EXP TK_colon NT$3 INSTRUCTIONS 
            {
              String RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).value;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("CASE",23, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-4)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // CASE ::= CASECOLOR EXP TK_colon 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
		painter.SYMBS1(cleft, cright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("CASE",23, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // CASECOLOR ::= RW_case 
            {
              String RESULT =null;
		int csleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int csright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String cs = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
		painter.RW2(csleft, csright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("CASECOLOR",55, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // NT$4 ::= 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
painter.SYMBS1(cleft, cright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("NT$4",61, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // DEFAULT ::= DEFAULTCOLOR TK_colon NT$4 INSTRUCTIONS 
            {
              String RESULT =null;
              // propagate RESULT from NT$4
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).value;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("DEFAULT",24, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-3)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // DEFAULT ::= DEFAULTCOLOR TK_colon 
            {
              String RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
		painter.SYMBS1(cleft, cright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("DEFAULT",24, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // DEFAULTCOLOR ::= RW_default 
            {
              String RESULT =null;
		int dfleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int dfright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String df = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
		painter.RW2(dfleft, dfright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("DEFAULTCOLOR",56, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // NT$5 ::= 
            {
              String RESULT =null;
		int frleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int frright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String fr = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
painter.RW2(frleft, frright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("NT$5",62, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // LOOPFOR ::= RW_for NT$5 COLORLPAR ARGSFOR COLORRPAR ENV 
            {
              String RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-4)).value;
		int frleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-5)).left;
		int frright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-5)).right;
		String fr = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-5)).value;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("LOOPFOR",25, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-5)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // ARGSFOR ::= TYPE COLORDECLID TK_equal EXP TK_semicolon EXPF TK_semicolon COLORUSEID TK_inc 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("ARGSFOR",26, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-8)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // EXPF ::= COLORUSEID TK_lessequ EXPFOR 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("EXPF",27, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // EXPF ::= COLORUSEID TK_less EXPFOR 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("EXPF",27, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // COLORUSEID ::= TK_id 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
		painter.USEVARIABLE(idleft, idright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("COLORUSEID",43, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // EXPFOR ::= EXPFOR TK_plus EXPFOR 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("EXPFOR",28, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // EXPFOR ::= EXPFOR TK_minus EXPFOR 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("EXPFOR",28, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // EXPFOR ::= EXPFOR TK_mult EXPFOR 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("EXPFOR",28, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // EXPFOR ::= EXPFOR TK_div EXPFOR 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("EXPFOR",28, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // EXPFOR ::= COLORLPAR EXPFOR COLORRPAR 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("EXPFOR",28, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // EXPFOR ::= TK_id 
            {
              String RESULT =null;
		int trleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int trright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String tr = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
		painter.USEVARIABLE(trleft, trright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("EXPFOR",28, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // EXPFOR ::= TK_int 
            {
              String RESULT =null;
		int trleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int trright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String tr = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
		painter.NUMBER(trleft, trright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("EXPFOR",28, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // EXPFOR ::= TK_double 
            {
              String RESULT =null;
		int trleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int trright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String tr = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
		painter.NUMBER(trleft, trright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("EXPFOR",28, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // NT$6 ::= 
            {
              String RESULT =null;
		int whlleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int whlright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String whl = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
painter.RW2(whlleft, whlright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("NT$6",63, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // LOOPWHILE ::= RW_while NT$6 COLORLPAR EXP COLORRPAR ENV 
            {
              String RESULT =null;
              // propagate RESULT from NT$6
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-4)).value;
		int whlleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-5)).left;
		int whlright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-5)).right;
		String whl = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-5)).value;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("LOOPWHILE",29, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-5)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // NT$7 ::= 
            {
              String RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
painter.RW2(dleft, dright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("NT$7",64, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // NT$8 ::= 
            {
              String RESULT =(String) ((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-3)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-3)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-3)).value;
		int whlleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int whlright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String whl = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
painter.RW2(whlleft, whlright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("NT$8",65, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // LOOPDOWHILE ::= RW_do NT$7 ENV RW_while NT$8 COLORLPAR EXP COLORRPAR TK_semicolon 
            {
              String RESULT =null;
              // propagate RESULT from NT$8
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-8)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-8)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-8)).value;
		int whlleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-5)).left;
		int whlright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-5)).right;
		String whl = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-5)).value;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("LOOPDOWHILE",30, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-8)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // PRINT ::= COLORPRINT COLORLPAR EXP COLORRPAR TK_semicolon 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("PRINT",31, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-4)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // PRINT ::= COLORPRINT COLORLPAR COLORRPAR TK_semicolon 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("PRINT",31, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-3)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // COLORPRINT ::= RW_print 
            {
              String RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
		painter.RW1(pleft, 7);painter.USEFNC(pleft + 8, 5);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("COLORPRINT",42, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // ENV ::= COLORLBRC INSTRUCTIONS COLORRBRC 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("ENV",34, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // ENV ::= COLORLBRC COLORRBRC 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("ENV",34, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // TYPE ::= RW_string 
            {
              String RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String tp = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
		painter.RW5(tpleft, tpright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("TYPE",33, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // TYPE ::= RW_int 
            {
              String RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String tp = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
		painter.RW1(tpleft, tpright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("TYPE",33, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // TYPE ::= RW_bool 
            {
              String RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String tp = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
		painter.RW1(tpleft, tpright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("TYPE",33, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // TYPE ::= RW_char 
            {
              String RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String tp = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
		painter.RW1(tpleft, tpright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("TYPE",33, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // TYPE ::= RW_double 
            {
              String RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String tp = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
		painter.RW1(tpleft, tpright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("TYPE",33, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // EXP ::= ARITHMETICS 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("EXP",5, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // EXP ::= RELATIONALS 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("EXP",5, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // EXP ::= LOGICS 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("EXP",5, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // EXP ::= TK_id 
            {
              String RESULT =null;
		int trleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int trright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String tr = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
		painter.USEVARIABLE(trleft, trright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("EXP",5, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // EXP ::= TK_string 
            {
              String RESULT =null;
		int trleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int trright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String tr = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
		painter.STRING(trleft, trright);     
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("EXP",5, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // EXP ::= TK_char 
            {
              String RESULT =null;
		int trleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int trright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String tr = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
		painter.CHAR(trleft, trright);       
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("EXP",5, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // EXP ::= TK_int 
            {
              String RESULT =null;
		int trleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int trright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String tr = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
		painter.NUMBER(trleft, trright);     
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("EXP",5, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // EXP ::= TK_double 
            {
              String RESULT =null;
		int trleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int trright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String tr = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
		painter.NUMBER(trleft, trright);     
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("EXP",5, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // EXP ::= RW_true 
            {
              String RESULT =null;
		int trleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int trright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String tr = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
		painter.RW3(trleft, trright);        
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("EXP",5, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // EXP ::= RW_false 
            {
              String RESULT =null;
		int trleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int trright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String tr = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
		painter.RW3(trleft, trright);        
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("EXP",5, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // EXP ::= COLORLPAR EXP COLORRPAR 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("EXP",5, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // ARITHMETICS ::= EXP TK_plus EXP 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("ARITHMETICS",7, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // ARITHMETICS ::= EXP TK_minus EXP 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("ARITHMETICS",7, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // ARITHMETICS ::= EXP TK_mult EXP 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("ARITHMETICS",7, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // ARITHMETICS ::= EXP TK_div EXP 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("ARITHMETICS",7, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // ARITHMETICS ::= TK_minus EXP 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("ARITHMETICS",7, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // RELATIONALS ::= EXP TK_equequ EXP 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("RELATIONALS",8, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // RELATIONALS ::= EXP TK_notequ EXP 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("RELATIONALS",8, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // RELATIONALS ::= EXP TK_lessequ EXP 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("RELATIONALS",8, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // RELATIONALS ::= EXP TK_moreequ EXP 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("RELATIONALS",8, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // RELATIONALS ::= EXP TK_less EXP 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("RELATIONALS",8, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // RELATIONALS ::= EXP TK_more EXP 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("RELATIONALS",8, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // LOGICS ::= EXP TK_and EXP 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("LOGICS",9, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // LOGICS ::= EXP TK_or EXP 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("LOGICS",9, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // LOGICS ::= TK_not EXP 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("LOGICS",9, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // INSTRUCTIONSEST ::= INSTRUCTIONSEST INSTRUCTIONEST 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("INSTRUCTIONSEST",2, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // INSTRUCTIONSEST ::= INSTRUCTIONEST 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("INSTRUCTIONSEST",2, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // INSTRUCTIONEST ::= DECLIDEST TK_semicolon 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("INSTRUCTIONEST",4, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // INSTRUCTIONEST ::= REASIGN TK_semicolon 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("INSTRUCTIONEST",4, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // INSTRUCTIONEST ::= ARRAYSDEF 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("INSTRUCTIONEST",4, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // DECFUNC ::= COLORVOID COLORIDFUNC COLORLPAR COLORRPAR ENVEST 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("DECFUNC",11, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-4)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // COLORIDFUNC ::= RW_defG 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
		painter.FNC(idleft, idright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("COLORIDFUNC",41, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // COLORIDFUNC ::= RW_barG 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
		painter.FNC(idleft, idright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("COLORIDFUNC",41, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // COLORIDFUNC ::= RW_pieG 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
		painter.FNC(idleft, idright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("COLORIDFUNC",41, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // DECLIDEST ::= COLORESTID TK_equal EXPEST 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("DECLIDEST",14, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // DECLIDEST ::= TYPEEST COLORDECLID TK_equal EXPEST 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("DECLIDEST",14, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-3)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // DECLIDEST ::= TYPEEST COLORDECLID 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("DECLIDEST",14, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // COLORESTID ::= COLORSTREST RW_title 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
		painter.VARIABLE(idleft, idright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("COLORESTID",50, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // COLORESTID ::= COLORSTREST RW_titleX 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
		painter.VARIABLE(idleft, idright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("COLORESTID",50, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // COLORESTID ::= COLORSTREST RW_titleY 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
		painter.VARIABLE(idleft, idright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("COLORESTID",50, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // ARRAYSDEF ::= COLORSTREST COLORLBRK COLORRBRK COLORESTAXIS TK_equal COLORLBRC VALUES COLORRBRC TK_semicolon 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("ARRAYSDEF",15, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-8)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // ARRAYSDEF ::= COLORDBLEST COLORLBRK COLORRBRK COLORESTVALUES TK_equal COLORLBRC VALUES COLORRBRC TK_semicolon 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("ARRAYSDEF",15, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-8)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // COLORESTAXIS ::= RW_xAxis 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
		painter.VARIABLE(idleft, idright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("COLORESTAXIS",53, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // COLORESTVALUES ::= RW_values 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
		painter.VARIABLE(idleft, idright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("COLORESTVALUES",54, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // COLORSTREST ::= RW_string 
            {
              String RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String tp = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
		painter.RW5(tpleft, tpright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("COLORSTREST",52, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // COLORDBLEST ::= RW_double 
            {
              String RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String tp = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
		painter.RW1(tpleft, tpright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("COLORDBLEST",51, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // VALUES ::= VALUES TK_comma EXPEST 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("VALUES",16, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // VALUES ::= EXPEST 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("VALUES",16, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // NT$9 ::= 
            {
              String RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
painter.RW2(dleft, dright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("NT$9",66, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // NT$10 ::= 
            {
              String RESULT =(String) ((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-3)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-3)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-3)).value;
		int nvleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int nvright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String nv = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
painter.RW4(nvleft, nvright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("NT$10",67, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // NT$11 ::= 
            {
              String RESULT =(String) ((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-6)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-6)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-6)).value;
		int nvleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-3)).left;
		int nvright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-3)).right;
		String nv = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-3)).value;
		int tr1left = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int tr1right = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String tr1 = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
painter.STRING(tr1left, tr1right);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("NT$11",68, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // NT$12 ::= 
            {
              String RESULT =(String) ((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-9)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-9)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-9)).value;
		int nvleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-6)).left;
		int nvright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-6)).right;
		String nv = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-6)).value;
		int tr1left = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-3)).left;
		int tr1right = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-3)).right;
		String tr1 = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-3)).value;
		int tr2left = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int tr2right = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String tr2 = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
painter.STRING(tr2left, tr2right);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("NT$12",69, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // SYMBSTAT ::= TK_dollar NT$9 COLORLBRC RW_newVal NT$10 TK_comma TK_string NT$11 TK_comma TK_string NT$12 COLORRBRC 
            {
              String RESULT =null;
              // propagate RESULT from NT$12
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-11)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-11)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-11)).value;
		int nvleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-8)).left;
		int nvright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-8)).right;
		String nv = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-8)).value;
		int tr1left = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-5)).left;
		int tr1right = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-5)).right;
		String tr1 = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-5)).value;
		int tr2left = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).left;
		int tr2right = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).right;
		String tr2 = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).value;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("SYMBSTAT",13, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-11)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // ENVEST ::= COLORLBRC INSTRUCTIONSEST COLORRBRC 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("ENVEST",35, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // ENVEST ::= COLORLBRC COLORRBRC 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("ENVEST",35, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // TYPEEST ::= RW_string 
            {
              String RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String tp = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
		painter.RW5(tpleft, tpright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("TYPEEST",12, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // TYPEEST ::= RW_double 
            {
              String RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String tp = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
		painter.RW1(tpleft, tpright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("TYPEEST",12, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // EXPEST ::= SYMBSTAT 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("EXPEST",6, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // EXPEST ::= TK_id 
            {
              String RESULT =null;
		int trleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int trright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String tr = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
		painter.USEVARIABLE(trleft, trright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("EXPEST",6, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // EXPEST ::= TK_string 
            {
              String RESULT =null;
		int trleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int trright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String tr = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
		painter.STRING(trleft, trright);     
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("EXPEST",6, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // EXPEST ::= TK_double 
            {
              String RESULT =null;
		int trleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int trright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String tr = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
		painter.NUMBER(trleft, trright);     
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("EXPEST",6, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // EXPEST ::= COLORLPAR EXP COLORRPAR 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("EXPEST",6, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // COLORLBRC ::= TK_lbrc 
            {
              String RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
		painter.BRKT(nIB, lleft, lright); nIB ++;
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("COLORLBRC",44, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // COLORRBRC ::= TK_rbrc 
            {
              String RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
		nIB --; painter.BRKT(nIB, rleft, rright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("COLORRBRC",45, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // COLORLBRK ::= TK_lbrk 
            {
              String RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
		painter.BRKT(nIB, lleft, lright); nIB ++;
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("COLORLBRK",46, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // COLORRBRK ::= TK_rbrk 
            {
              String RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
		nIB --; painter.BRKT(nIB, rleft, rright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("COLORRBRK",47, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // COLORLPAR ::= TK_lpar 
            {
              String RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
		painter.BRKT(nIB, lleft, lright); nIB ++;
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("COLORLPAR",48, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // COLORRPAR ::= TK_rpar 
            {
              String RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
		nIB --; painter.BRKT(nIB, rleft, rright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("COLORRPAR",49, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$ParserF$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$ParserF$do_action(
    int                        CUP$ParserF$act_num,
    java_cup.runtime.lr_parser CUP$ParserF$parser,
    java.util.Stack            CUP$ParserF$stack,
    int                        CUP$ParserF$top)
    throws java.lang.Exception
    {
              return CUP$ParserF$do_action_part00000000(
                               CUP$ParserF$act_num,
                               CUP$ParserF$parser,
                               CUP$ParserF$stack,
                               CUP$ParserF$top);
    }
}

}
