
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Painter;

import java_cup.runtime.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class ParserF extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return TOK.class;
}

  /** Default constructor. */
  @Deprecated
  public ParserF() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public ParserF(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ParserF(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\204\000\002\002\004\000\002\002\010\000\002\002" +
    "\007\000\002\046\004\000\002\047\003\000\002\003\004" +
    "\000\002\003\003\000\002\005\004\000\002\005\004\000" +
    "\002\005\003\000\002\005\003\000\002\005\003\000\002" +
    "\005\003\000\002\005\003\000\002\005\003\000\002\062" +
    "\002\000\002\005\005\000\002\005\003\000\002\005\003" +
    "\000\002\014\006\000\002\014\004\000\002\052\003\000" +
    "\002\063\002\000\002\042\006\000\002\024\011\000\002" +
    "\024\011\000\002\024\007\000\002\050\003\000\002\051" +
    "\003\000\002\025\007\000\002\026\005\000\002\026\004" +
    "\000\002\027\004\000\002\027\003\000\002\027\003\000" +
    "\002\030\004\000\002\030\003\000\002\031\006\000\002" +
    "\031\006\000\002\031\005\000\002\032\005\000\002\032" +
    "\005\000\002\032\004\000\002\064\002\000\002\033\010" +
    "\000\002\034\013\000\002\035\005\000\002\035\005\000" +
    "\002\055\003\000\002\036\005\000\002\036\005\000\002" +
    "\036\005\000\002\036\005\000\002\036\005\000\002\036" +
    "\003\000\002\036\003\000\002\036\003\000\002\065\002" +
    "\000\002\037\010\000\002\066\002\000\002\067\002\000" +
    "\002\040\013\000\002\041\007\000\002\041\006\000\002" +
    "\054\003\000\002\044\005\000\002\044\004\000\002\043" +
    "\003\000\002\043\003\000\002\043\003\000\002\043\003" +
    "\000\002\043\003\000\002\007\003\000\002\007\003\000" +
    "\002\007\003\000\002\007\003\000\002\007\003\000\002" +
    "\007\003\000\002\007\003\000\002\007\003\000\002\007" +
    "\003\000\002\007\003\000\002\007\005\000\002\011\005" +
    "\000\002\011\005\000\002\011\005\000\002\011\005\000" +
    "\002\011\004\000\002\012\005\000\002\012\005\000\002" +
    "\012\005\000\002\012\005\000\002\012\005\000\002\012" +
    "\005\000\002\013\005\000\002\013\005\000\002\013\004" +
    "\000\002\004\004\000\002\004\003\000\002\006\004\000" +
    "\002\006\004\000\002\006\003\000\002\015\007\000\002" +
    "\053\003\000\002\053\003\000\002\053\003\000\002\020" +
    "\006\000\002\020\006\000\002\020\006\000\002\020\006" +
    "\000\002\020\004\000\002\017\012\000\002\021\013\000" +
    "\002\021\013\000\002\022\005\000\002\022\003\000\002" +
    "\023\003\000\002\023\003\000\002\023\003\000\002\045" +
    "\005\000\002\045\004\000\002\016\003\000\002\016\003" +
    "\000\002\010\003\000\002\010\003\000\002\010\003\000" +
    "\002\010\003\000\002\010\005\000\002\056\003\000\002" +
    "\057\003\000\002\060\003\000\002\061\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\377\000\004\005\006\001\002\000\004\004\u0101\001" +
    "\002\000\004\002\u0100\001\002\000\012\004\ufffd\006\ufffd" +
    "\007\ufffd\010\ufffd\001\002\000\004\066\010\001\002\000" +
    "\042\011\uff7f\012\uff7f\013\uff7f\014\uff7f\015\uff7f\035\uff7f" +
    "\036\uff7f\040\uff7f\041\uff7f\042\uff7f\043\uff7f\044\uff7f\047" +
    "\uff7f\064\uff7f\066\uff7f\067\uff7f\001\002\000\004\067\012" +
    "\001\002\000\042\046\uff7e\047\uff7e\050\uff7e\051\uff7e\053" +
    "\uff7e\054\uff7e\055\uff7e\056\uff7e\060\uff7e\061\uff7e\062\uff7e" +
    "\063\uff7e\067\uff7e\070\uff7e\075\uff7e\076\uff7e\001\002\000" +
    "\004\070\014\001\002\000\046\003\uff81\005\uff81\011\uff81" +
    "\012\uff81\013\uff81\014\uff81\015\uff81\024\uff81\026\uff81\027" +
    "\uff81\030\uff81\031\uff81\032\uff81\033\uff81\034\uff81\037\uff81" +
    "\044\uff81\071\uff81\001\002\000\042\003\043\005\006\011" +
    "\051\012\042\013\045\014\024\015\046\024\037\026\035" +
    "\031\031\032\032\033\050\034\054\037\016\044\021\071" +
    "\020\001\002\000\004\066\uffc1\001\002\000\004\066\010" +
    "\001\002\000\052\002\uff80\003\uff80\005\uff80\011\uff80\012" +
    "\uff80\013\uff80\014\uff80\015\uff80\024\uff80\025\uff80\026\uff80" +
    "\027\uff80\030\uff80\031\uff80\032\uff80\033\uff80\034\uff80\037" +
    "\uff80\044\uff80\071\uff80\001\002\000\004\057\uffeb\001\002" +
    "\000\046\003\ufff5\005\ufff5\011\ufff5\012\ufff5\013\ufff5\014" +
    "\ufff5\015\ufff5\024\ufff5\026\ufff5\027\ufff5\030\ufff5\031\ufff5" +
    "\032\ufff5\033\ufff5\034\ufff5\037\ufff5\044\ufff5\071\ufff5\001" +
    "\002\000\010\006\257\007\262\010\261\001\002\000\004" +
    "\044\uffbc\001\002\000\046\003\ufff7\005\ufff7\011\ufff7\012" +
    "\ufff7\013\ufff7\014\ufff7\015\ufff7\024\ufff7\026\ufff7\027\ufff7" +
    "\030\ufff7\031\ufff7\032\ufff7\033\ufff7\034\ufff7\037\ufff7\044" +
    "\ufff7\071\ufff7\001\002\000\042\003\043\005\006\011\051" +
    "\012\042\013\045\014\024\015\046\024\037\026\035\031" +
    "\031\032\032\033\050\034\054\037\016\044\021\071\020" +
    "\001\002\000\004\044\215\001\002\000\046\003\ufff4\005" +
    "\ufff4\011\ufff4\012\ufff4\013\ufff4\014\ufff4\015\ufff4\024\ufff4" +
    "\026\ufff4\027\ufff4\030\ufff4\031\ufff4\032\ufff4\033\ufff4\034" +
    "\ufff4\037\ufff4\044\ufff4\071\ufff4\001\002\000\004\066\uffd6" +
    "\001\002\000\004\066\uffc8\001\002\000\046\003\ufff8\005" +
    "\ufff8\011\ufff8\012\ufff8\013\ufff8\014\ufff8\015\ufff8\024\ufff8" +
    "\026\ufff8\027\ufff8\030\ufff8\031\ufff8\032\ufff8\033\ufff8\034" +
    "\ufff8\037\ufff8\044\ufff8\071\ufff8\001\002\000\046\003\ufffb" +
    "\005\ufffb\011\ufffb\012\ufffb\013\ufffb\014\ufffb\015\ufffb\024" +
    "\ufffb\026\ufffb\027\ufffb\030\ufffb\031\ufffb\032\ufffb\033\ufffb" +
    "\034\ufffb\037\ufffb\044\ufffb\071\ufffb\001\002\000\004\066" +
    "\010\001\002\000\004\002\uffff\001\002\000\004\066\uffe6" +
    "\001\002\000\004\076\154\001\002\000\046\003\ufff6\005" +
    "\ufff6\011\ufff6\012\ufff6\013\ufff6\014\ufff6\015\ufff6\024\ufff6" +
    "\026\ufff6\027\ufff6\030\ufff6\031\ufff6\032\ufff6\033\ufff6\034" +
    "\ufff6\037\ufff6\044\ufff6\071\ufff6\001\002\000\004\044\uffba" +
    "\001\002\000\046\003\uffef\005\uffef\011\uffef\012\uffef\013" +
    "\uffef\014\uffef\015\uffef\024\uffef\026\uffef\027\uffef\030\uffef" +
    "\031\uffef\032\uffef\033\uffef\034\uffef\037\uffef\044\uffef\071" +
    "\uffef\001\002\000\046\003\ufff3\005\ufff3\011\ufff3\012\ufff3" +
    "\013\ufff3\014\ufff3\015\ufff3\024\ufff3\026\ufff3\027\ufff3\030" +
    "\ufff3\031\ufff3\032\ufff3\033\ufff3\034\ufff3\037\ufff3\044\ufff3" +
    "\071\ufff3\001\002\000\004\044\uffbb\001\002\000\004\044" +
    "\uffbe\001\002\000\046\003\ufff0\005\ufff0\011\ufff0\012\ufff0" +
    "\013\ufff0\014\ufff0\015\ufff0\024\ufff0\026\ufff0\027\ufff0\030" +
    "\ufff0\031\ufff0\032\ufff0\033\ufff0\034\ufff0\037\ufff0\044\ufff0" +
    "\071\ufff0\001\002\000\004\070\uffc6\001\002\000\004\044" +
    "\uffbd\001\002\000\004\076\136\001\002\000\004\066\010" +
    "\001\002\000\004\076\ufff2\001\002\000\004\076\056\001" +
    "\002\000\046\003\ufff1\005\ufff1\011\ufff1\012\ufff1\013\ufff1" +
    "\014\ufff1\015\ufff1\024\ufff1\026\ufff1\027\ufff1\030\ufff1\031" +
    "\ufff1\032\ufff1\033\ufff1\034\ufff1\037\ufff1\044\ufff1\071\ufff1" +
    "\001\002\000\030\035\066\036\065\040\061\041\064\042" +
    "\060\043\063\044\073\047\062\064\070\066\010\067\012" +
    "\001\002\000\040\046\uffb3\047\uffb3\050\uffb3\051\uffb3\053" +
    "\uffb3\054\uffb3\055\uffb3\056\uffb3\060\uffb3\061\uffb3\062\uffb3" +
    "\063\uffb3\067\uffb3\075\uffb3\076\uffb3\001\002\000\040\046" +
    "\uffb5\047\uffb5\050\uffb5\051\uffb5\053\uffb5\054\uffb5\055\uffb5" +
    "\056\uffb5\060\uffb5\061\uffb5\062\uffb5\063\uffb5\067\uffb5\075" +
    "\uffb5\076\uffb5\001\002\000\026\035\066\036\065\040\061" +
    "\041\064\042\060\043\063\044\073\047\062\064\070\066" +
    "\010\001\002\000\040\046\uffb2\047\uffb2\050\uffb2\051\uffb2" +
    "\053\uffb2\054\uffb2\055\uffb2\056\uffb2\060\uffb2\061\uffb2\062" +
    "\uffb2\063\uffb2\067\uffb2\075\uffb2\076\uffb2\001\002\000\040" +
    "\046\uffb4\047\uffb4\050\uffb4\051\uffb4\053\uffb4\054\uffb4\055" +
    "\uffb4\056\uffb4\060\uffb4\061\uffb4\062\uffb4\063\uffb4\067\uffb4" +
    "\075\uffb4\076\uffb4\001\002\000\040\046\uffb0\047\uffb0\050" +
    "\uffb0\051\uffb0\053\uffb0\054\uffb0\055\uffb0\056\uffb0\060\uffb0" +
    "\061\uffb0\062\uffb0\063\uffb0\067\uffb0\075\uffb0\076\uffb0\001" +
    "\002\000\040\046\uffb1\047\uffb1\050\uffb1\051\uffb1\053\uffb1" +
    "\054\uffb1\055\uffb1\056\uffb1\060\uffb1\061\uffb1\062\uffb1\063" +
    "\uffb1\067\uffb1\075\uffb1\076\uffb1\001\002\000\026\035\066" +
    "\036\065\040\061\041\064\042\060\043\063\044\073\047" +
    "\062\064\070\066\010\001\002\000\026\035\066\036\065" +
    "\040\061\041\064\042\060\043\063\044\073\047\062\064" +
    "\070\066\010\001\002\000\040\046\uffb9\047\uffb9\050\uffb9" +
    "\051\uffb9\053\uffb9\054\uffb9\055\uffb9\056\uffb9\060\uffb9\061" +
    "\uffb9\062\uffb9\063\uffb9\067\uffb9\075\uffb9\076\uffb9\001\002" +
    "\000\040\046\uffb8\047\uffb8\050\uffb8\051\uffb8\053\uffb8\054" +
    "\uffb8\055\uffb8\056\uffb8\060\uffb8\061\uffb8\062\uffb8\063\uffb8" +
    "\067\uffb8\075\uffb8\076\uffb8\001\002\000\040\046\uffb6\047" +
    "\uffb6\050\uffb6\051\uffb6\053\uffb6\054\uffb6\055\uffb6\056\uffb6" +
    "\060\uffb6\061\uffb6\062\uffb6\063\uffb6\067\uffb6\075\uffb6\076" +
    "\uffb6\001\002\000\034\046\110\047\100\050\106\051\105" +
    "\053\104\054\107\055\101\056\103\060\112\061\111\062" +
    "\114\063\102\067\012\001\002\000\040\046\uffb7\047\uffb7" +
    "\050\uffb7\051\uffb7\053\uffb7\054\uffb7\055\uffb7\056\uffb7\060" +
    "\uffb7\061\uffb7\062\uffb7\063\uffb7\067\uffb7\075\uffb7\076\uffb7" +
    "\001\002\000\004\076\077\001\002\000\046\003\uffc2\005" +
    "\uffc2\011\uffc2\012\uffc2\013\uffc2\014\uffc2\015\uffc2\024\uffc2" +
    "\026\uffc2\027\uffc2\030\uffc2\031\uffc2\032\uffc2\033\uffc2\034" +
    "\uffc2\037\uffc2\044\uffc2\071\uffc2\001\002\000\026\035\066" +
    "\036\065\040\061\041\064\042\060\043\063\044\073\047" +
    "\062\064\070\066\010\001\002\000\026\035\066\036\065" +
    "\040\061\041\064\042\060\043\063\044\073\047\062\064" +
    "\070\066\010\001\002\000\026\035\066\036\065\040\061" +
    "\041\064\042\060\043\063\044\073\047\062\064\070\066" +
    "\010\001\002\000\026\035\066\036\065\040\061\041\064" +
    "\042\060\043\063\044\073\047\062\064\070\066\010\001" +
    "\002\000\026\035\066\036\065\040\061\041\064\042\060" +
    "\043\063\044\073\047\062\064\070\066\010\001\002\000" +
    "\026\035\066\036\065\040\061\041\064\042\060\043\063" +
    "\044\073\047\062\064\070\066\010\001\002\000\026\035" +
    "\066\036\065\040\061\041\064\042\060\043\063\044\073" +
    "\047\062\064\070\066\010\001\002\000\026\035\066\036" +
    "\065\040\061\041\064\042\060\043\063\044\073\047\062" +
    "\064\070\066\010\001\002\000\026\035\066\036\065\040" +
    "\061\041\064\042\060\043\063\044\073\047\062\064\070" +
    "\066\010\001\002\000\026\035\066\036\065\040\061\041" +
    "\064\042\060\043\063\044\073\047\062\064\070\066\010" +
    "\001\002\000\026\035\066\036\065\040\061\041\064\042" +
    "\060\043\063\044\073\047\062\064\070\066\010\001\002" +
    "\000\004\076\116\001\002\000\026\035\066\036\065\040" +
    "\061\041\064\042\060\043\063\044\073\047\062\064\070" +
    "\066\010\001\002\000\040\046\110\047\100\050\106\051" +
    "\105\053\104\054\107\055\101\056\103\060\112\061\111" +
    "\062\uffa3\063\uffa3\067\uffa3\075\uffa3\076\uffa3\001\002\000" +
    "\046\003\uffc3\005\uffc3\011\uffc3\012\uffc3\013\uffc3\014\uffc3" +
    "\015\uffc3\024\uffc3\026\uffc3\027\uffc3\030\uffc3\031\uffc3\032" +
    "\uffc3\033\uffc3\034\uffc3\037\uffc3\044\uffc3\071\uffc3\001\002" +
    "\000\040\046\110\047\100\050\106\051\105\053\uffa5\054" +
    "\uffa5\055\uffa5\056\uffa5\060\uffa5\061\uffa5\062\uffa5\063\uffa5" +
    "\067\uffa5\075\uffa5\076\uffa5\001\002\000\040\046\110\047" +
    "\100\050\106\051\105\053\uffa4\054\uffa4\055\uffa4\056\uffa4" +
    "\060\uffa4\061\uffa4\062\uffa4\063\uffa4\067\uffa4\075\uffa4\076" +
    "\uffa4\001\002\000\040\046\uffae\047\uffae\050\106\051\105" +
    "\053\uffae\054\uffae\055\uffae\056\uffae\060\uffae\061\uffae\062" +
    "\uffae\063\uffae\067\uffae\075\uffae\076\uffae\001\002\000\040" +
    "\046\110\047\100\050\106\051\105\053\uffa8\054\uffa8\055" +
    "\101\056\103\060\112\061\111\062\uffa8\063\uffa8\067\uffa8" +
    "\075\uffa8\076\uffa8\001\002\000\040\046\uffac\047\uffac\050" +
    "\uffac\051\uffac\053\uffac\054\uffac\055\uffac\056\uffac\060\uffac" +
    "\061\uffac\062\uffac\063\uffac\067\uffac\075\uffac\076\uffac\001" +
    "\002\000\040\046\uffab\047\uffab\050\uffab\051\uffab\053\uffab" +
    "\054\uffab\055\uffab\056\uffab\060\uffab\061\uffab\062\uffab\063" +
    "\uffab\067\uffab\075\uffab\076\uffab\001\002\000\040\046\110" +
    "\047\100\050\106\051\105\053\uffa9\054\uffa9\055\101\056" +
    "\103\060\112\061\111\062\uffa9\063\uffa9\067\uffa9\075\uffa9" +
    "\076\uffa9\001\002\000\040\046\110\047\100\050\106\051" +
    "\105\053\uffa6\054\uffa6\055\uffa6\056\uffa6\060\uffa6\061\uffa6" +
    "\062\uffa6\063\uffa6\067\uffa6\075\uffa6\076\uffa6\001\002\000" +
    "\040\046\110\047\100\050\106\051\105\053\104\054\107" +
    "\055\101\056\103\060\112\061\111\062\114\063\uffa2\067" +
    "\uffa2\075\uffa2\076\uffa2\001\002\000\040\046\110\047\100" +
    "\050\106\051\105\053\uffa7\054\uffa7\055\uffa7\056\uffa7\060" +
    "\uffa7\061\uffa7\062\uffa7\063\uffa7\067\uffa7\075\uffa7\076\uffa7" +
    "\001\002\000\040\046\uffad\047\uffad\050\106\051\105\053" +
    "\uffad\054\uffad\055\uffad\056\uffad\060\uffad\061\uffad\062\uffad" +
    "\063\uffad\067\uffad\075\uffad\076\uffad\001\002\000\040\046" +
    "\110\047\100\050\106\051\105\053\104\054\107\055\101" +
    "\056\103\060\112\061\111\062\uffa1\063\uffa1\067\uffa1\075" +
    "\uffa1\076\uffa1\001\002\000\034\046\110\047\100\050\106" +
    "\051\105\053\104\054\107\055\101\056\103\060\112\061" +
    "\111\062\114\063\102\067\012\001\002\000\040\046\uffaf" +
    "\047\uffaf\050\uffaf\051\uffaf\053\uffaf\054\uffaf\055\uffaf\056" +
    "\uffaf\060\uffaf\061\uffaf\062\uffaf\063\uffaf\067\uffaf\075\uffaf" +
    "\076\uffaf\001\002\000\040\046\uffaa\047\uffaa\050\uffaa\051" +
    "\uffaa\053\uffaa\054\uffaa\055\uffaa\056\uffaa\060\uffaa\061\uffaa" +
    "\062\uffaa\063\uffaa\067\uffaa\075\uffaa\076\uffaa\001\002\000" +
    "\046\003\ufff9\005\ufff9\011\ufff9\012\ufff9\013\ufff9\014\ufff9" +
    "\015\ufff9\024\ufff9\026\ufff9\027\ufff9\030\ufff9\031\ufff9\032" +
    "\ufff9\033\ufff9\034\ufff9\037\ufff9\044\ufff9\071\ufff9\001\002" +
    "\000\004\070\014\001\002\000\004\032\146\001\002\000" +
    "\042\003\043\005\006\011\051\012\042\013\045\014\024" +
    "\015\046\024\037\026\035\031\031\032\032\033\050\034" +
    "\054\037\016\044\021\071\020\001\002\000\042\003\043" +
    "\005\006\011\051\012\042\013\045\014\024\015\046\024" +
    "\037\026\035\031\031\032\032\033\050\034\054\037\016" +
    "\044\021\071\020\001\002\000\050\003\uffbf\005\uffbf\011" +
    "\uffbf\012\uffbf\013\uffbf\014\uffbf\015\uffbf\024\uffbf\025\uffbf" +
    "\026\uffbf\027\uffbf\030\uffbf\031\uffbf\032\uffbf\033\uffbf\034" +
    "\uffbf\037\uffbf\044\uffbf\071\uffbf\001\002\000\046\003\ufffc" +
    "\005\ufffc\011\ufffc\012\ufffc\013\ufffc\014\ufffc\015\ufffc\024" +
    "\ufffc\026\ufffc\027\ufffc\030\ufffc\031\ufffc\032\ufffc\033\ufffc" +
    "\034\ufffc\037\ufffc\044\ufffc\071\ufffc\001\002\000\050\003" +
    "\uffc0\005\uffc0\011\uffc0\012\uffc0\013\uffc0\014\uffc0\015\uffc0" +
    "\024\uffc0\025\uffc0\026\uffc0\027\uffc0\030\uffc0\031\uffc0\032" +
    "\uffc0\033\uffc0\034\uffc0\037\uffc0\044\uffc0\071\uffc0\001\002" +
    "\000\004\066\uffc5\001\002\000\004\066\010\001\002\000" +
    "\026\035\066\036\065\040\061\041\064\042\060\043\063" +
    "\044\073\047\062\064\070\066\010\001\002\000\034\046" +
    "\110\047\100\050\106\051\105\053\104\054\107\055\101" +
    "\056\103\060\112\061\111\062\114\063\102\067\012\001" +
    "\002\000\004\076\153\001\002\000\046\003\uffc4\005\uffc4" +
    "\011\uffc4\012\uffc4\013\uffc4\014\uffc4\015\uffc4\024\uffc4\026" +
    "\uffc4\027\uffc4\030\uffc4\031\uffc4\032\uffc4\033\uffc4\034\uffc4" +
    "\037\uffc4\044\uffc4\071\uffc4\001\002\000\046\003\ufffa\005" +
    "\ufffa\011\ufffa\012\ufffa\013\ufffa\014\ufffa\015\ufffa\024\ufffa" +
    "\026\ufffa\027\ufffa\030\ufffa\031\ufffa\032\ufffa\033\ufffa\034" +
    "\ufffa\037\ufffa\044\ufffa\071\ufffa\001\002\000\026\035\066" +
    "\036\065\040\061\041\064\042\060\043\063\044\073\047" +
    "\062\064\070\066\010\001\002\000\034\046\110\047\100" +
    "\050\106\051\105\053\104\054\107\055\101\056\103\060" +
    "\112\061\111\062\114\063\102\067\012\001\002\000\004" +
    "\070\014\001\002\000\010\027\164\030\170\071\020\001" +
    "\002\000\046\003\uffe4\005\uffe4\011\uffe4\012\uffe4\013\uffe4" +
    "\014\uffe4\015\uffe4\024\uffe4\026\uffe4\027\uffe4\030\uffe4\031" +
    "\uffe4\032\uffe4\033\uffe4\034\uffe4\037\uffe4\044\uffe4\071\uffe4" +
    "\001\002\000\004\071\uffdf\001\002\000\010\027\164\030" +
    "\170\071\uffe0\001\002\000\026\035\066\036\065\040\061" +
    "\041\064\042\060\043\063\044\073\047\062\064\070\066" +
    "\010\001\002\000\004\071\020\001\002\000\046\003\uffe2" +
    "\005\uffe2\011\uffe2\012\uffe2\013\uffe2\014\uffe2\015\uffe2\024" +
    "\uffe2\026\uffe2\027\uffe2\030\uffe2\031\uffe2\032\uffe2\033\uffe2" +
    "\034\uffe2\037\uffe2\044\uffe2\071\uffe2\001\002\000\010\027" +
    "\uffdd\030\uffdd\071\uffdd\001\002\000\004\075\171\001\002" +
    "\000\044\003\043\005\006\011\051\012\042\013\045\014" +
    "\024\015\046\024\037\026\035\031\031\032\032\033\050" +
    "\034\054\037\016\044\021\070\014\071\uffd7\001\002\000" +
    "\042\003\043\005\006\011\051\012\042\013\045\014\024" +
    "\015\046\024\037\026\035\031\031\032\032\033\050\034" +
    "\054\037\016\044\021\071\uffd9\001\002\000\004\071\uffd8" +
    "\001\002\000\046\003\uffe3\005\uffe3\011\uffe3\012\uffe3\013" +
    "\uffe3\014\uffe3\015\uffe3\024\uffe3\026\uffe3\027\uffe3\030\uffe3" +
    "\031\uffe3\032\uffe3\033\uffe3\034\uffe3\037\uffe3\044\uffe3\071" +
    "\uffe3\001\002\000\034\046\110\047\100\050\106\051\105" +
    "\053\104\054\107\055\101\056\103\060\112\061\111\062" +
    "\114\063\102\075\176\001\002\000\050\003\043\005\006" +
    "\011\051\012\042\013\045\014\024\015\046\024\037\026" +
    "\035\027\uffda\030\uffda\031\031\032\032\033\050\034\054" +
    "\037\016\044\021\070\014\071\uffda\001\002\000\046\003" +
    "\043\005\006\011\051\012\042\013\045\014\024\015\046" +
    "\024\037\026\035\027\uffdc\030\uffdc\031\031\032\032\033" +
    "\050\034\054\037\016\044\021\071\uffdc\001\002\000\010" +
    "\027\uffdb\030\uffdb\071\uffdb\001\002\000\004\071\uffe1\001" +
    "\002\000\010\027\uffde\030\uffde\071\uffde\001\002\000\004" +
    "\066\010\001\002\000\026\035\066\036\065\040\061\041" +
    "\064\042\060\043\063\044\073\047\062\064\070\066\010" +
    "\001\002\000\034\046\110\047\100\050\106\051\105\053" +
    "\104\054\107\055\101\056\103\060\112\061\111\062\114" +
    "\063\102\067\012\001\002\000\004\070\014\001\002\000" +
    "\046\003\uffc7\005\uffc7\011\uffc7\012\uffc7\013\uffc7\014\uffc7" +
    "\015\uffc7\024\uffc7\026\uffc7\027\uffc7\030\uffc7\031\uffc7\032" +
    "\uffc7\033\uffc7\034\uffc7\037\uffc7\044\uffc7\071\uffc7\001\002" +
    "\000\004\066\010\001\002\000\014\011\051\012\042\013" +
    "\045\014\024\015\046\001\002\000\004\067\012\001\002" +
    "\000\004\044\215\001\002\000\004\057\216\001\002\000" +
    "\006\057\uffec\076\uffec\001\002\000\026\035\066\036\065" +
    "\040\061\041\064\042\060\043\063\044\073\047\062\064" +
    "\070\066\010\001\002\000\034\046\110\047\100\050\106" +
    "\051\105\053\104\054\107\055\101\056\103\060\112\061" +
    "\111\062\114\063\102\076\220\001\002\000\004\044\223" +
    "\001\002\000\006\055\227\060\230\001\002\000\004\076" +
    "\224\001\002\000\010\045\uffd1\055\uffd1\060\uffd1\001\002" +
    "\000\004\044\223\001\002\000\004\045\226\001\002\000" +
    "\004\067\uffd4\001\002\000\012\042\233\043\231\044\234" +
    "\066\010\001\002\000\012\042\233\043\231\044\234\066" +
    "\010\001\002\000\016\046\uffc9\047\uffc9\050\uffc9\051\uffc9" +
    "\067\uffc9\076\uffc9\001\002\000\014\046\243\047\242\050" +
    "\240\051\241\076\uffd2\001\002\000\016\046\uffca\047\uffca" +
    "\050\uffca\051\uffca\067\uffca\076\uffca\001\002\000\016\046" +
    "\uffcb\047\uffcb\050\uffcb\051\uffcb\067\uffcb\076\uffcb\001\002" +
    "\000\012\042\233\043\231\044\234\066\010\001\002\000" +
    "\014\046\243\047\242\050\240\051\241\067\012\001\002" +
    "\000\016\046\uffcc\047\uffcc\050\uffcc\051\uffcc\067\uffcc\076" +
    "\uffcc\001\002\000\012\042\233\043\231\044\234\066\010" +
    "\001\002\000\012\042\233\043\231\044\234\066\010\001" +
    "\002\000\012\042\233\043\231\044\234\066\010\001\002" +
    "\000\012\042\233\043\231\044\234\066\010\001\002\000" +
    "\016\046\uffd0\047\uffd0\050\240\051\241\067\uffd0\076\uffd0" +
    "\001\002\000\016\046\uffcf\047\uffcf\050\240\051\241\067" +
    "\uffcf\076\uffcf\001\002\000\016\046\uffcd\047\uffcd\050\uffcd" +
    "\051\uffcd\067\uffcd\076\uffcd\001\002\000\016\046\uffce\047" +
    "\uffce\050\uffce\051\uffce\067\uffce\076\uffce\001\002\000\014" +
    "\046\243\047\242\050\240\051\241\076\uffd3\001\002\000" +
    "\004\070\014\001\002\000\046\003\uffd5\005\uffd5\011\uffd5" +
    "\012\uffd5\013\uffd5\014\uffd5\015\uffd5\024\uffd5\026\uffd5\027" +
    "\uffd5\030\uffd5\031\uffd5\032\uffd5\033\uffd5\034\uffd5\037\uffd5" +
    "\044\uffd5\071\uffd5\001\002\000\006\057\254\076\uffed\001" +
    "\002\000\026\035\066\036\065\040\061\041\064\042\060" +
    "\043\063\044\073\047\062\064\070\066\010\001\002\000" +
    "\034\046\110\047\100\050\106\051\105\053\104\054\107" +
    "\055\101\056\103\060\112\061\111\062\114\063\102\076" +
    "\uffee\001\002\000\004\002\000\001\002\000\004\066\uff9a" +
    "\001\002\000\004\066\010\001\002\000\004\066\uff98\001" +
    "\002\000\004\066\uff99\001\002\000\004\067\012\001\002" +
    "\000\004\070\266\001\002\000\046\003\uff9b\005\uff9b\011" +
    "\uff9b\012\uff9b\013\uff9b\014\uff9b\015\uff9b\024\uff9b\026\uff9b" +
    "\027\uff9b\030\uff9b\031\uff9b\032\uff9b\033\uff9b\034\uff9b\037" +
    "\uff9b\044\uff9b\071\uff9b\001\002\000\012\012\273\015\276" +
    "\044\021\071\275\001\002\000\004\076\364\001\002\000" +
    "\012\012\uff9c\015\uff9c\044\uff9c\071\uff9c\001\002\000\012" +
    "\012\uff9f\015\uff9f\044\uff9f\071\uff9f\001\002\000\004\044" +
    "\361\001\002\000\006\044\uff87\072\351\001\002\000\012" +
    "\012\273\015\276\044\021\071\350\001\002\000\046\003" +
    "\uff89\005\uff89\011\uff89\012\uff89\013\uff89\014\uff89\015\uff89" +
    "\024\uff89\026\uff89\027\uff89\030\uff89\031\uff89\032\uff89\033" +
    "\uff89\034\uff89\037\uff89\044\uff89\071\uff89\001\002\000\014" +
    "\017\304\022\303\023\302\044\uff88\072\301\001\002\000" +
    "\004\076\300\001\002\000\012\012\uff9d\015\uff9d\044\uff9d" +
    "\071\uff9d\001\002\000\004\073\332\001\002\000\004\057" +
    "\330\001\002\000\004\057\326\001\002\000\004\057\305" +
    "\001\002\000\014\040\306\043\307\044\314\065\313\066" +
    "\312\001\002\000\004\076\uff84\001\002\000\004\076\uff83" +
    "\001\002\000\004\076\uff86\001\002\000\004\076\uff97\001" +
    "\002\000\026\035\066\036\065\040\061\041\064\042\060" +
    "\043\063\044\073\047\062\064\070\066\010\001\002\000" +
    "\004\070\315\001\002\000\004\076\uff85\001\002\000\004" +
    "\016\316\001\002\000\004\074\317\001\002\000\004\040" +
    "\320\001\002\000\004\074\321\001\002\000\004\040\322" +
    "\001\002\000\004\071\323\001\002\000\010\071\uff92\074" +
    "\uff92\076\uff92\001\002\000\034\046\110\047\100\050\106" +
    "\051\105\053\104\054\107\055\101\056\103\060\112\061" +
    "\111\062\114\063\102\067\325\001\002\000\004\076\uff82" +
    "\001\002\000\014\040\306\043\307\044\314\065\313\066" +
    "\312\001\002\000\004\076\uff96\001\002\000\014\040\306" +
    "\043\307\044\314\065\313\066\312\001\002\000\004\076" +
    "\uff95\001\002\000\004\020\333\001\002\000\004\057\334" +
    "\001\002\000\004\070\335\001\002\000\010\040\336\044" +
    "\342\065\313\001\002\000\006\071\uff8c\074\uff8c\001\002" +
    "\000\006\071\uff8d\074\uff8d\001\002\000\006\071\343\074" +
    "\344\001\002\000\006\071\uff8e\074\uff8e\001\002\000\006" +
    "\071\uff8b\074\uff8b\001\002\000\004\076\346\001\002\000" +
    "\010\040\336\044\342\065\313\001\002\000\006\071\uff8f" +
    "\074\uff8f\001\002\000\012\012\uff91\015\uff91\044\uff91\071" +
    "\uff91\001\002\000\012\012\uffa0\015\uffa0\044\uffa0\071\uffa0" +
    "\001\002\000\046\003\uff8a\005\uff8a\011\uff8a\012\uff8a\013" +
    "\uff8a\014\uff8a\015\uff8a\024\uff8a\026\uff8a\027\uff8a\030\uff8a" +
    "\031\uff8a\032\uff8a\033\uff8a\034\uff8a\037\uff8a\044\uff8a\071" +
    "\uff8a\001\002\000\004\073\352\001\002\000\004\021\353" +
    "\001\002\000\004\057\354\001\002\000\004\070\355\001" +
    "\002\000\010\040\336\044\342\065\313\001\002\000\006" +
    "\071\357\074\344\001\002\000\004\076\360\001\002\000" +
    "\012\012\uff90\015\uff90\044\uff90\071\uff90\001\002\000\006" +
    "\057\362\076\uff93\001\002\000\014\040\306\043\307\044" +
    "\314\065\313\066\312\001\002\000\004\076\uff94\001\002" +
    "\000\012\012\uff9e\015\uff9e\044\uff9e\071\uff9e\001\002\000" +
    "\004\057\366\001\002\000\026\035\066\036\065\040\061" +
    "\041\064\042\060\043\063\044\073\047\062\064\070\066" +
    "\010\001\002\000\034\046\110\047\100\050\106\051\105" +
    "\053\104\054\107\055\101\056\103\060\112\061\111\062" +
    "\114\063\102\076\uffea\001\002\000\026\035\066\036\065" +
    "\040\061\041\064\042\060\043\063\044\073\047\062\064" +
    "\070\066\010\001\002\000\034\046\110\047\100\050\106" +
    "\051\105\053\104\054\107\055\101\056\103\060\112\061" +
    "\111\062\114\063\102\067\012\001\002\000\004\070\014" +
    "\001\002\000\050\003\uffe7\005\uffe7\011\uffe7\012\uffe7\013" +
    "\uffe7\014\uffe7\015\uffe7\024\uffe7\025\374\026\uffe7\027\uffe7" +
    "\030\uffe7\031\uffe7\032\uffe7\033\uffe7\034\uffe7\037\uffe7\044" +
    "\uffe7\071\uffe7\001\002\000\006\024\uffe5\070\uffe5\001\002" +
    "\000\006\024\037\070\014\001\002\000\046\003\uffe9\005" +
    "\uffe9\011\uffe9\012\uffe9\013\uffe9\014\uffe9\015\uffe9\024\uffe9" +
    "\026\uffe9\027\uffe9\030\uffe9\031\uffe9\032\uffe9\033\uffe9\034" +
    "\uffe9\037\uffe9\044\uffe9\071\uffe9\001\002\000\046\003\uffe8" +
    "\005\uffe8\011\uffe8\012\uffe8\013\uffe8\014\uffe8\015\uffe8\024" +
    "\uffe8\026\uffe8\027\uffe8\030\uffe8\031\uffe8\032\uffe8\033\uffe8" +
    "\034\uffe8\037\uffe8\044\uffe8\071\uffe8\001\002\000\004\002" +
    "\001\001\002\000\004\066\ufffe\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\377\000\010\002\004\046\006\047\003\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\060\010\001\001\000\002\001\001\000\004\061\012\001" +
    "\001\000\002\001\001\000\004\056\014\001\001\000\002" +
    "\001\001\000\042\003\025\005\033\014\037\015\046\024" +
    "\032\025\024\033\040\037\021\040\027\041\043\042\051" +
    "\043\026\047\022\050\016\054\052\057\035\001\001\000" +
    "\002\001\001\000\004\060\367\001\001\000\002\001\001" +
    "\000\004\063\364\001\001\000\002\001\001\000\004\053" +
    "\257\001\001\000\002\001\001\000\002\001\001\000\040" +
    "\005\143\014\037\015\046\024\032\025\024\033\040\037" +
    "\021\040\027\041\043\042\051\043\026\047\022\050\016" +
    "\054\052\057\255\001\001\000\004\052\252\001\001\000" +
    "\002\001\001\000\004\064\207\001\001\000\004\065\202" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\060" +
    "\154\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\066\136\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\060\056\001\001\000\004" +
    "\062\054\001\001\000\002\001\001\000\002\001\001\000" +
    "\016\007\073\011\070\012\071\013\074\060\066\061\075" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\007" +
    "\134\011\070\012\071\013\074\060\066\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\007\132\011\070\012\071\013\074\060\066" +
    "\001\001\000\014\007\131\011\070\012\071\013\074\060" +
    "\066\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\061\112\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\007\130\011\070" +
    "\012\071\013\074\060\066\001\001\000\014\007\127\011" +
    "\070\012\071\013\074\060\066\001\001\000\014\007\126" +
    "\011\070\012\071\013\074\060\066\001\001\000\014\007" +
    "\125\011\070\012\071\013\074\060\066\001\001\000\014" +
    "\007\124\011\070\012\071\013\074\060\066\001\001\000" +
    "\014\007\123\011\070\012\071\013\074\060\066\001\001" +
    "\000\014\007\122\011\070\012\071\013\074\060\066\001" +
    "\001\000\014\007\121\011\070\012\071\013\074\060\066" +
    "\001\001\000\014\007\120\011\070\012\071\013\074\060" +
    "\066\001\001\000\014\007\117\011\070\012\071\013\074" +
    "\060\066\001\001\000\014\007\116\011\070\012\071\013" +
    "\074\060\066\001\001\000\002\001\001\000\014\007\114" +
    "\011\070\012\071\013\074\060\066\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\061\133\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\044\137\056\140\001" +
    "\001\000\002\001\001\000\042\003\141\005\033\014\037" +
    "\015\046\024\032\025\024\033\040\037\021\040\027\041" +
    "\043\042\051\043\026\047\022\050\016\054\052\057\142" +
    "\001\001\000\040\005\143\014\037\015\046\024\032\025" +
    "\024\033\040\037\021\040\027\041\043\042\051\043\026" +
    "\047\022\050\016\054\052\057\144\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\067\146" +
    "\001\001\000\004\060\147\001\001\000\014\007\150\011" +
    "\070\012\071\013\074\060\066\001\001\000\004\061\151" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\007\155\011\070\012\071\013\074\060\066" +
    "\001\001\000\004\061\156\001\001\000\006\026\160\056" +
    "\157\001\001\000\014\027\164\030\162\031\166\032\161" +
    "\057\165\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\031\201\032\200\001\001\000\014\007\174\011\070" +
    "\012\071\013\074\060\066\001\001\000\004\057\173\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\044\003\171\005\033\014\037\015\046\024\032\025" +
    "\024\033\040\037\021\040\027\041\043\042\051\043\026" +
    "\044\172\047\022\050\016\054\052\056\140\001\001\000" +
    "\036\005\143\014\037\015\046\024\032\025\024\033\040" +
    "\037\021\040\027\041\043\042\051\043\026\047\022\050" +
    "\016\054\052\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\044\003\176\005\033\014\037\015" +
    "\046\024\032\025\024\033\040\037\021\040\027\041\043" +
    "\042\051\043\026\044\177\047\022\050\016\054\052\056" +
    "\140\001\001\000\036\005\143\014\037\015\046\024\032" +
    "\025\024\033\040\037\021\040\027\041\043\042\051\043" +
    "\026\047\022\050\016\054\052\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\060\203\001" +
    "\001\000\014\007\204\011\070\012\071\013\074\060\066" +
    "\001\001\000\004\061\205\001\001\000\006\044\206\056" +
    "\140\001\001\000\002\001\001\000\004\060\210\001\001" +
    "\000\006\034\211\043\212\001\001\000\004\061\250\001" +
    "\001\000\004\052\213\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\007\216\011\070\012\071\013\074\060" +
    "\066\001\001\000\002\001\001\000\006\035\221\055\220" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\055\224\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\036\247\060\234\001\001\000\006\036" +
    "\231\060\234\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\036\235\060" +
    "\234\001\001\000\004\061\236\001\001\000\002\001\001" +
    "\000\006\036\246\060\234\001\001\000\006\036\245\060" +
    "\234\001\001\000\006\036\244\060\234\001\001\000\006" +
    "\036\243\060\234\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\044\251\056\140\001\001\000\002\001\001\000" +
    "\002\001\001\000\014\007\254\011\070\012\071\013\074" +
    "\060\066\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\060\262\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\061\263\001\001\000\004\045" +
    "\264\001\001\000\002\001\001\000\016\004\273\006\270" +
    "\016\271\020\266\021\267\042\276\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\006\346\016\271\020\266\021" +
    "\267\042\276\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\010\310\017\307\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\007\323" +
    "\011\070\012\071\013\074\060\066\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\010\326\017\307\001\001\000\002\001" +
    "\001\000\006\010\330\017\307\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\017\336\022\337\023\340\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\017\336\023\344" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\017\336\022" +
    "\355\023\340\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\010\362\017" +
    "\307\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\014\007\366\011\070\012\071\013\074\060" +
    "\066\001\001\000\002\001\001\000\014\007\370\011\070" +
    "\012\071\013\074\060\066\001\001\000\004\061\371\001" +
    "\001\000\006\044\372\056\140\001\001\000\004\051\374" +
    "\001\001\000\002\001\001\000\012\024\375\044\376\050" +
    "\016\056\140\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ParserF$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ParserF$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ParserF$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public ScannerF s;
    int index;
    int nIB = 0;
    WordPainter painter;
    public ParserF(ScannerF s,WordPainter painter) {
        super(s);
        this.s = s;
        this.painter = painter;
    }
    public void syntax_error(Symbol sym) {
        painter.SERROR(sym.left,sym.right);
    }
    public void unrecovered_syntax_error(Symbol sym) throws java.lang.Exception {}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$ParserF$actions {
  private final ParserF parser;

  /** Constructor */
  CUP$ParserF$actions(ParserF parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$ParserF$do_action_part00000000(
    int                        CUP$ParserF$act_num,
    java_cup.runtime.lr_parser CUP$ParserF$parser,
    java.util.Stack            CUP$ParserF$stack,
    int                        CUP$ParserF$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ParserF$result;

      /* select the action based on the action number */
      switch (CUP$ParserF$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INIT EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)).right;
		String start_val = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)).value;
		RESULT = start_val;
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$ParserF$parser.done_parsing();
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INIT ::= COLORMAIN COLORLPAR COLORRPAR COLORLBRC INSTRUCTIONS COLORRBRC 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("INIT",0, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-5)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INIT ::= COLORMAIN COLORLPAR COLORRPAR COLORLBRC COLORRBRC 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("INIT",0, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-4)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // COLORMAIN ::= COLORVOID RW_main 
            {
              String RESULT =null;
		int mnleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int mnright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String mn = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
		painter.FNC(mnleft, mnright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("COLORMAIN",36, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // COLORVOID ::= RW_void 
            {
              String RESULT =null;
		int vdleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int vdright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String vd = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
		painter.RW1(vdleft, vdright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("COLORVOID",37, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // INSTRUCTIONS ::= INSTRUCTIONS INSTRUCTION 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("INSTRUCTIONS",1, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // INSTRUCTIONS ::= INSTRUCTION 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("INSTRUCTIONS",1, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // INSTRUCTION ::= DECLID TK_semicolon 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",3, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // INSTRUCTION ::= REASIGN TK_semicolon 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",3, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // INSTRUCTION ::= IFSTRUCT 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",3, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // INSTRUCTION ::= SWITCHSTRUCT 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",3, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // INSTRUCTION ::= LOOPFOR 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",3, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // INSTRUCTION ::= LOOPWHILE 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",3, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // INSTRUCTION ::= LOOPDOWHILE 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",3, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // INSTRUCTION ::= PRINT 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",3, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // NT$0 ::= 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
painter.RW2(tleft, tright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("NT$0",48, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // INSTRUCTION ::= RW_break NT$0 TK_semicolon 
            {
              String RESULT =null;
              // propagate RESULT from NT$0
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).value;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",3, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // INSTRUCTION ::= DECFUNC 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",3, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // INSTRUCTION ::= error 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",3, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // DECLID ::= TYPE COLORDECLID TK_equal EXP 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("DECLID",10, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-3)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // DECLID ::= TYPE COLORDECLID 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("DECLID",10, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // COLORDECLID ::= TK_id 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
		painter.VARIABLE(idleft, idright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("COLORDECLID",40, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // NT$1 ::= 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
painter.USEVARIABLE(idleft, idright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("NT$1",49, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // REASIGN ::= TK_id NT$1 TK_equal EXP 
            {
              String RESULT =null;
              // propagate RESULT from NT$1
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-3)).value;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("REASIGN",32, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-3)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // IFSTRUCT ::= COLORIF COLORLPAR EXP COLORRPAR ENV COLORELSE IFSTRUCT 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("IFSTRUCT",18, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-6)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // IFSTRUCT ::= COLORIF COLORLPAR EXP COLORRPAR ENV COLORELSE ENV 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("IFSTRUCT",18, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-6)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // IFSTRUCT ::= COLORIF COLORLPAR EXP COLORRPAR ENV 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("IFSTRUCT",18, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-4)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // COLORIF ::= RW_if 
            {
              String RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
		painter.RW2(ileft, iright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("COLORIF",38, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // COLORELSE ::= RW_else 
            {
              String RESULT =null;
		int elleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int elright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String el = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
		painter.RW2(elleft, elright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("COLORELSE",39, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // SWITCHSTRUCT ::= RW_switch COLORLPAR EXP COLORRPAR ENVS 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-4)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-4)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).right;
		String exp = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).value;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("SWITCHSTRUCT",19, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-4)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // ENVS ::= COLORLBRC CASESDEFAULT COLORRBRC 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("ENVS",20, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // ENVS ::= COLORLBRC COLORRBRC 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("ENVS",20, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // CASESDEFAULT ::= CASES DEFAULT 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("CASESDEFAULT",21, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // CASESDEFAULT ::= CASES 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("CASESDEFAULT",21, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // CASESDEFAULT ::= DEFAULT 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("CASESDEFAULT",21, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // CASES ::= CASES CASE 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("CASES",22, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // CASES ::= CASE 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("CASES",22, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // CASE ::= RW_case EXP TK_colon INSTRUCTIONS 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("CASE",23, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-3)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // CASE ::= RW_case EXP TK_colon ENV 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("CASE",23, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-3)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // CASE ::= RW_case EXP TK_colon 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("CASE",23, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // DEFAULT ::= RW_default TK_colon INSTRUCTIONS 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("DEFAULT",24, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // DEFAULT ::= RW_default TK_colon ENV 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("DEFAULT",24, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // DEFAULT ::= RW_default TK_colon 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("DEFAULT",24, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // NT$2 ::= 
            {
              String RESULT =null;
		int frleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int frright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String fr = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
painter.RW2(frleft, frright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("NT$2",50, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // LOOPFOR ::= RW_for NT$2 COLORLPAR ARGSFOR COLORRPAR ENV 
            {
              String RESULT =null;
              // propagate RESULT from NT$2
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-4)).value;
		int frleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-5)).left;
		int frright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-5)).right;
		String fr = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-5)).value;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("LOOPFOR",25, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-5)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // ARGSFOR ::= TYPE COLORDECLID TK_equal EXP TK_semicolon EXPF TK_semicolon COLORUSEID TK_inc 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("ARGSFOR",26, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-8)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // EXPF ::= COLORUSEID TK_lessequ EXPFOR 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("EXPF",27, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // EXPF ::= COLORUSEID TK_less EXPFOR 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("EXPF",27, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // COLORUSEID ::= TK_id 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
		painter.USEVARIABLE(idleft, idright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("COLORUSEID",43, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // EXPFOR ::= EXPFOR TK_plus EXPFOR 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("EXPFOR",28, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // EXPFOR ::= EXPFOR TK_minus EXPFOR 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("EXPFOR",28, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // EXPFOR ::= EXPFOR TK_mult EXPFOR 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("EXPFOR",28, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // EXPFOR ::= EXPFOR TK_div EXPFOR 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("EXPFOR",28, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // EXPFOR ::= COLORLPAR EXPFOR COLORRPAR 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("EXPFOR",28, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // EXPFOR ::= TK_id 
            {
              String RESULT =null;
		int trleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int trright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String tr = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
		painter.USEVARIABLE(trleft, trright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("EXPFOR",28, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // EXPFOR ::= TK_int 
            {
              String RESULT =null;
		int trleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int trright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String tr = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
		painter.NUMBER(trleft, trright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("EXPFOR",28, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // EXPFOR ::= TK_double 
            {
              String RESULT =null;
		int trleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int trright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String tr = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
		painter.NUMBER(trleft, trright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("EXPFOR",28, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // NT$3 ::= 
            {
              String RESULT =null;
		int whlleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int whlright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String whl = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
painter.RW2(whlleft, whlright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("NT$3",51, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // LOOPWHILE ::= RW_while NT$3 COLORLPAR EXP COLORRPAR ENV 
            {
              String RESULT =null;
              // propagate RESULT from NT$3
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-4)).value;
		int whlleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-5)).left;
		int whlright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-5)).right;
		String whl = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-5)).value;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("LOOPWHILE",29, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-5)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // NT$4 ::= 
            {
              String RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
painter.RW2(dleft, dright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("NT$4",52, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // NT$5 ::= 
            {
              String RESULT =(String) ((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-3)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-3)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-3)).value;
		int whlleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int whlright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String whl = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
painter.RW2(whlleft, whlright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("NT$5",53, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // LOOPDOWHILE ::= RW_do NT$4 ENV RW_while NT$5 COLORLPAR EXP COLORRPAR TK_semicolon 
            {
              String RESULT =null;
              // propagate RESULT from NT$5
                RESULT = (String) ((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-8)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-8)).right;
		String d = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-8)).value;
		int whlleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-5)).left;
		int whlright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-5)).right;
		String whl = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.elementAt(CUP$ParserF$top-5)).value;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("LOOPDOWHILE",30, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-8)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // PRINT ::= COLORPRINT COLORLPAR EXP COLORRPAR TK_semicolon 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("PRINT",31, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-4)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // PRINT ::= COLORPRINT COLORLPAR COLORRPAR TK_semicolon 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("PRINT",31, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-3)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // COLORPRINT ::= RW_print 
            {
              String RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
		painter.RW1(pleft, 7);painter.USEFNC(pleft + 8, 5);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("COLORPRINT",42, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // ENV ::= COLORLBRC INSTRUCTIONS COLORRBRC 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("ENV",34, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // ENV ::= COLORLBRC COLORRBRC 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("ENV",34, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // TYPE ::= RW_string 
            {
              String RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String tp = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
		painter.RW5(tpleft, tpright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("TYPE",33, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // TYPE ::= RW_int 
            {
              String RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String tp = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
		painter.RW1(tpleft, tpright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("TYPE",33, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // TYPE ::= RW_bool 
            {
              String RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String tp = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
		painter.RW1(tpleft, tpright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("TYPE",33, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // TYPE ::= RW_char 
            {
              String RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String tp = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
		painter.RW1(tpleft, tpright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("TYPE",33, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // TYPE ::= RW_double 
            {
              String RESULT =null;
		int tpleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int tpright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String tp = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
		painter.RW1(tpleft, tpright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("TYPE",33, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // EXP ::= ARITHMETICS 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("EXP",5, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // EXP ::= RELATIONALS 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("EXP",5, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // EXP ::= LOGICS 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("EXP",5, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // EXP ::= TK_id 
            {
              String RESULT =null;
		int trleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int trright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String tr = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
		painter.USEVARIABLE(trleft, trright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("EXP",5, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // EXP ::= TK_string 
            {
              String RESULT =null;
		int trleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int trright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String tr = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
		painter.STRING(trleft, trright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("EXP",5, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // EXP ::= TK_char 
            {
              String RESULT =null;
		int trleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int trright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String tr = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
		painter.CHAR(trleft, trright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("EXP",5, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // EXP ::= TK_int 
            {
              String RESULT =null;
		int trleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int trright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String tr = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
		painter.NUMBER(trleft, trright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("EXP",5, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // EXP ::= TK_double 
            {
              String RESULT =null;
		int trleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int trright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String tr = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
		painter.NUMBER(trleft, trright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("EXP",5, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // EXP ::= RW_true 
            {
              String RESULT =null;
		int trleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int trright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String tr = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
		painter.RW3(trleft, trright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("EXP",5, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // EXP ::= RW_false 
            {
              String RESULT =null;
		int trleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int trright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String tr = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
		painter.RW3(trleft, trright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("EXP",5, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // EXP ::= COLORLPAR EXP COLORRPAR 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("EXP",5, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // ARITHMETICS ::= EXP TK_plus EXP 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("ARITHMETICS",7, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // ARITHMETICS ::= EXP TK_minus EXP 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("ARITHMETICS",7, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // ARITHMETICS ::= EXP TK_mult EXP 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("ARITHMETICS",7, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // ARITHMETICS ::= EXP TK_div EXP 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("ARITHMETICS",7, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // ARITHMETICS ::= TK_minus EXP 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("ARITHMETICS",7, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // RELATIONALS ::= EXP TK_equequ EXP 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("RELATIONALS",8, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // RELATIONALS ::= EXP TK_notequ EXP 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("RELATIONALS",8, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // RELATIONALS ::= EXP TK_lessequ EXP 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("RELATIONALS",8, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // RELATIONALS ::= EXP TK_moreequ EXP 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("RELATIONALS",8, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // RELATIONALS ::= EXP TK_less EXP 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("RELATIONALS",8, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // RELATIONALS ::= EXP TK_more EXP 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("RELATIONALS",8, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // LOGICS ::= EXP TK_and EXP 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("LOGICS",9, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // LOGICS ::= EXP TK_or EXP 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("LOGICS",9, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // LOGICS ::= TK_not EXP 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("LOGICS",9, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // INSTRUCTIONSEST ::= INSTRUCTIONSEST INSTRUCTIONEST 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("INSTRUCTIONSEST",2, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // INSTRUCTIONSEST ::= INSTRUCTIONEST 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("INSTRUCTIONSEST",2, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // INSTRUCTIONEST ::= DECLIDEST TK_semicolon 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("INSTRUCTIONEST",4, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // INSTRUCTIONEST ::= REASIGN TK_semicolon 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("INSTRUCTIONEST",4, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // INSTRUCTIONEST ::= ARRAYSDEF 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("INSTRUCTIONEST",4, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // DECFUNC ::= COLORVOID COLORIDFUNC COLORLPAR COLORRPAR ENVEST 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("DECFUNC",11, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-4)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // COLORIDFUNC ::= RW_defG 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
		painter.FNC(idleft, idright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("COLORIDFUNC",41, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // COLORIDFUNC ::= RW_barG 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
		painter.FNC(idleft, idright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("COLORIDFUNC",41, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // COLORIDFUNC ::= RW_pieG 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
		painter.FNC(idleft, idright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("COLORIDFUNC",41, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // DECLIDEST ::= RW_string RW_title TK_equal EXPEST 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("DECLIDEST",14, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-3)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // DECLIDEST ::= RW_string RW_titleX TK_equal EXPEST 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("DECLIDEST",14, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-3)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // DECLIDEST ::= RW_string RW_titleY TK_equal EXPEST 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("DECLIDEST",14, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-3)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // DECLIDEST ::= TYPEEST TK_id TK_equal EXPEST 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("DECLIDEST",14, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-3)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // DECLIDEST ::= TYPEEST TK_id 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("DECLIDEST",14, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // SYMBSTAT ::= TK_dollar TK_lbrc RW_newVal TK_comma TK_string TK_comma TK_string TK_rbrc 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("SYMBSTAT",13, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-7)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // ARRAYSDEF ::= RW_string TK_lbrk TK_rbrk RW_xAxis TK_equal TK_lbrc VALUES TK_rbrc TK_semicolon 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("ARRAYSDEF",15, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-8)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // ARRAYSDEF ::= RW_double TK_lbrk TK_rbrk RW_values TK_equal TK_lbrc VALUES TK_rbrc TK_semicolon 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("ARRAYSDEF",15, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-8)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // VALUES ::= VALUES TK_comma VALUE 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("VALUES",16, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // VALUES ::= VALUE 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("VALUES",16, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // VALUE ::= SYMBSTAT 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("VALUE",17, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // VALUE ::= TK_string 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("VALUE",17, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // VALUE ::= TK_id 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("VALUE",17, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // ENVEST ::= TK_lbrc INSTRUCTIONSEST TK_rbrc 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("ENVEST",35, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // ENVEST ::= TK_lbrc TK_rbrc 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("ENVEST",35, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-1)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // TYPEEST ::= RW_string 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("TYPEEST",12, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // TYPEEST ::= RW_double 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("TYPEEST",12, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // EXPEST ::= SYMBSTAT 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("EXPEST",6, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // EXPEST ::= TK_id 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("EXPEST",6, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // EXPEST ::= TK_string 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("EXPEST",6, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // EXPEST ::= TK_double 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("EXPEST",6, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // EXPEST ::= TK_lpar EXP TK_rpar 
            {
              String RESULT =null;

              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("EXPEST",6, ((java_cup.runtime.Symbol)CUP$ParserF$stack.elementAt(CUP$ParserF$top-2)), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // COLORLBRC ::= TK_lbrc 
            {
              String RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
		painter.BRKT(nIB, lleft, lright); nIB ++;
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("COLORLBRC",44, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // COLORRBRC ::= TK_rbrc 
            {
              String RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
		nIB --; painter.BRKT(nIB, rleft, rright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("COLORRBRC",45, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // COLORLPAR ::= TK_lpar 
            {
              String RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
		painter.BRKT(nIB, lleft, lright); nIB ++;
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("COLORLPAR",46, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // COLORRPAR ::= TK_rpar 
            {
              String RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$ParserF$stack.peek()).value;
		nIB --; painter.BRKT(nIB, rleft, rright);
              CUP$ParserF$result = parser.getSymbolFactory().newSymbol("COLORRPAR",47, ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserF$stack.peek()), RESULT);
            }
          return CUP$ParserF$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$ParserF$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$ParserF$do_action(
    int                        CUP$ParserF$act_num,
    java_cup.runtime.lr_parser CUP$ParserF$parser,
    java.util.Stack            CUP$ParserF$stack,
    int                        CUP$ParserF$top)
    throws java.lang.Exception
    {
              return CUP$ParserF$do_action_part00000000(
                               CUP$ParserF$act_num,
                               CUP$ParserF$parser,
                               CUP$ParserF$stack,
                               CUP$ParserF$top);
    }
}

}
