/* The following code was generated by JFlex 1.7.0 */

/* 1. Package e importaciones */
package Painter;
import java_cup.runtime.Symbol;
import java.util.ArrayList;
import Components.ErrorL;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>src/Painter/ScannerF.jflex</tt>
 */
public class ScannerF implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
     0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  4,  6,  6,  5,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     1, 44,  2,  0, 49,  0, 47, 10, 50, 51, 13, 41, 56, 42, 11, 12, 
     9,  9,  9,  9,  9,  9,  9,  9,  9,  9, 57, 58, 45, 43, 46,  0, 
     0, 15, 24, 27, 21, 26, 33, 32, 28, 17, 37, 36, 25, 14, 18, 20, 
    40,  8, 29, 31, 22, 23, 19, 34, 38, 39,  8, 54,  3, 55,  0,  7, 
     0, 15, 24, 27, 21, 26, 33, 32, 28, 17, 37, 36, 25, 14, 18, 20, 
    40,  8, 29, 31, 22, 23, 19, 34, 38, 39,  8, 52, 48, 53,  0,  0, 
     0,  0,  0,  0,  0,  6,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
  };

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\1\1\2\1\1\1\3\1\4"+
    "\1\1\1\5\1\6\1\3\1\1\10\3\1\1\4\3"+
    "\1\7\1\10\1\11\1\12\1\13\1\14\2\1\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\0\1\27\5\0\1\30\1\0\1\3\1\0"+
    "\1\31\1\3\1\31\3\3\1\32\1\3\1\0\11\3"+
    "\2\0\6\3\1\33\1\34\1\35\1\36\1\37\1\40"+
    "\1\41\1\42\1\43\2\0\1\3\2\44\2\3\1\0"+
    "\3\3\1\0\4\3\1\0\2\3\1\0\3\3\2\0"+
    "\4\3\1\45\1\0\1\3\1\30\2\46\2\3\2\47"+
    "\2\3\1\0\1\3\1\0\1\3\1\50\1\51\1\3"+
    "\2\52\1\53\2\54\1\0\1\3\1\55\2\0\3\3"+
    "\1\0\1\3\1\0\5\3\1\0\1\3\1\0\1\3"+
    "\2\56\1\0\1\3\2\0\2\3\1\0\1\3\2\57"+
    "\2\60\2\3\1\61\1\3\1\0\1\3\2\62\1\0"+
    "\1\3\1\63\1\64\1\63\1\64\1\0\2\3\2\65"+
    "\1\66\1\0\1\3\1\67\1\70\1\67\1\70\1\0"+
    "\1\3\1\0\1\3\1\71\1\0\1\3\3\0\2\3"+
    "\1\0\1\3\3\0\2\3\1\0\1\3\2\0\1\72"+
    "\1\3\1\72\1\0\1\3\2\0\1\3\1\0\1\3"+
    "\2\0\1\3\1\0\1\3\1\73\2\74\1\0\1\3"+
    "\2\75";

  private static int [] zzUnpackAction() {
    int [] result = new int[248];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\73\0\166\0\261\0\73\0\354\0\u0127\0\u0162"+
    "\0\u019d\0\u01d8\0\73\0\u0213\0\u024e\0\u0289\0\u02c4\0\u02ff"+
    "\0\u033a\0\u0375\0\u03b0\0\u03eb\0\u0426\0\u0461\0\u049c\0\u04d7"+
    "\0\u0512\0\u054d\0\u0588\0\73\0\u05c3\0\u05fe\0\u0639\0\u0674"+
    "\0\u06af\0\u06ea\0\73\0\73\0\73\0\73\0\73\0\73"+
    "\0\73\0\73\0\73\0\73\0\261\0\73\0\u0725\0\354"+
    "\0\u0760\0\u079b\0\u07d6\0\u0811\0\u084c\0\u0887\0\u08c2\0\73"+
    "\0\u08fd\0\u0127\0\u0938\0\u0973\0\u09ae\0\u09e9\0\u0a24\0\u0a5f"+
    "\0\u0a9a\0\u0ad5\0\u0b10\0\u0b4b\0\u0b86\0\u0bc1\0\u0bfc\0\u0c37"+
    "\0\u0c72\0\u0cad\0\u0ce8\0\u0d23\0\u0d5e\0\u0d99\0\u0dd4\0\u0e0f"+
    "\0\u0e4a\0\73\0\73\0\73\0\73\0\73\0\73\0\73"+
    "\0\u0760\0\73\0\u0e85\0\u0ec0\0\u0efb\0\73\0\u0127\0\u0f36"+
    "\0\u0f71\0\u0fac\0\u0fe7\0\u1022\0\u105d\0\u1098\0\u10d3\0\u110e"+
    "\0\u1149\0\u1184\0\u11bf\0\u11fa\0\u1235\0\u1270\0\u12ab\0\u12e6"+
    "\0\u1321\0\u135c\0\u1397\0\u13d2\0\u140d\0\u1448\0\u1483\0\u0127"+
    "\0\u14be\0\u14f9\0\73\0\73\0\u0127\0\u1534\0\u156f\0\73"+
    "\0\u0127\0\u15aa\0\u15e5\0\u1620\0\u165b\0\u1696\0\u16d1\0\u0127"+
    "\0\u0127\0\u170c\0\73\0\u0127\0\u0127\0\73\0\u0127\0\u1747"+
    "\0\u1782\0\u0127\0\u17bd\0\u17f8\0\u1833\0\u186e\0\u18a9\0\u18e4"+
    "\0\u191f\0\u195a\0\u1995\0\u19d0\0\u1a0b\0\u1a46\0\u1a81\0\u1abc"+
    "\0\u1af7\0\u1b32\0\u1b6d\0\73\0\u0127\0\u1ba8\0\u1be3\0\u1c1e"+
    "\0\u1c59\0\u1c94\0\u1ccf\0\u1d0a\0\u1d45\0\73\0\u0127\0\73"+
    "\0\u0127\0\u1d80\0\u1dbb\0\u0127\0\u1df6\0\u1e31\0\u1e6c\0\u1ea7"+
    "\0\u1ee2\0\u1f1d\0\u1f58\0\73\0\73\0\u0127\0\u0127\0\u1f93"+
    "\0\u1fce\0\u2009\0\73\0\u0127\0\u0127\0\u2044\0\u207f\0\73"+
    "\0\73\0\u0127\0\u0127\0\u20ba\0\u20f5\0\u2130\0\u216b\0\u0127"+
    "\0\u21a6\0\u21e1\0\u221c\0\u2257\0\u2292\0\u22cd\0\u2308\0\u2343"+
    "\0\u237e\0\u23b9\0\u23f4\0\u242f\0\u246a\0\u24a5\0\u24e0\0\u251b"+
    "\0\u2556\0\u2591\0\73\0\u25cc\0\u0127\0\u2607\0\u2642\0\u267d"+
    "\0\u26b8\0\u26f3\0\u272e\0\u2769\0\u27a4\0\u27df\0\u281a\0\u2855"+
    "\0\u2890\0\73\0\73\0\u0127\0\u28cb\0\u2906\0\73\0\u0127";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[248];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\2\1\5\1\3\1\0\1\6"+
    "\1\7\1\10\1\11\1\2\1\12\1\13\1\14\1\7"+
    "\1\15\1\16\1\17\1\20\1\7\1\21\1\22\1\7"+
    "\1\23\1\7\1\24\1\25\2\7\1\26\1\27\1\30"+
    "\1\31\1\32\1\2\5\7\1\33\1\34\1\35\1\36"+
    "\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46"+
    "\1\47\1\50\1\51\1\52\1\53\1\54\74\0\1\3"+
    "\3\0\1\3\65\0\2\55\1\56\1\57\1\0\66\55"+
    "\7\0\1\60\1\7\5\0\2\7\1\0\15\7\1\0"+
    "\4\7\1\0\5\7\31\0\3\7\4\0\2\7\1\0"+
    "\15\7\1\0\4\7\1\0\5\7\33\0\1\10\1\0"+
    "\1\61\57\0\2\62\1\0\1\63\1\0\66\62\14\0"+
    "\1\64\1\65\64\0\3\7\4\0\1\7\1\66\1\0"+
    "\15\7\1\0\4\7\1\0\5\7\44\0\1\67\16\0"+
    "\1\70\40\0\3\7\4\0\2\7\1\0\1\7\1\71"+
    "\13\7\1\0\2\7\1\72\1\7\1\0\5\7\31\0"+
    "\3\7\4\0\2\7\1\0\11\7\1\73\3\7\1\0"+
    "\4\7\1\0\5\7\31\0\3\7\4\0\1\7\1\74"+
    "\1\0\3\7\1\75\11\7\1\0\4\7\1\0\5\7"+
    "\31\0\3\7\4\0\2\7\1\0\3\7\1\76\5\7"+
    "\1\77\3\7\1\0\4\7\1\0\5\7\31\0\3\7"+
    "\4\0\2\7\1\100\1\101\13\7\1\102\1\0\4\7"+
    "\1\0\5\7\31\0\3\7\4\0\2\7\1\0\3\7"+
    "\1\103\10\7\1\104\1\0\4\7\1\0\5\7\31\0"+
    "\3\7\4\0\2\7\1\0\10\7\1\105\4\7\1\0"+
    "\4\7\1\0\1\7\1\106\3\7\31\0\3\7\4\0"+
    "\1\7\1\107\1\0\3\7\1\110\7\7\1\111\1\7"+
    "\1\0\4\7\1\0\5\7\50\0\1\112\13\0\1\113"+
    "\37\0\3\7\4\0\2\7\1\0\5\7\1\114\7\7"+
    "\1\0\3\7\1\115\1\0\5\7\31\0\3\7\4\0"+
    "\2\7\1\0\14\7\1\116\1\0\4\7\1\0\5\7"+
    "\31\0\3\7\4\0\1\7\1\117\1\0\3\7\1\120"+
    "\11\7\1\0\4\7\1\0\5\7\31\0\3\7\4\0"+
    "\2\7\1\0\13\7\1\121\1\7\1\0\4\7\1\0"+
    "\5\7\73\0\1\122\74\0\1\123\72\0\1\124\72\0"+
    "\1\125\72\0\1\126\76\0\1\127\73\0\1\130\12\0"+
    "\4\55\3\0\64\55\11\0\1\131\73\0\1\132\60\0"+
    "\4\62\3\0\64\62\4\64\2\0\65\64\15\65\1\133"+
    "\55\65\7\0\3\7\4\0\2\7\1\134\1\135\14\7"+
    "\1\0\4\7\1\0\5\7\50\0\1\136\53\0\3\7"+
    "\4\0\2\7\1\0\5\7\1\137\7\7\1\0\4\7"+
    "\1\0\5\7\31\0\3\7\4\0\2\7\1\0\15\7"+
    "\1\0\3\7\1\140\1\0\5\7\31\0\3\7\4\0"+
    "\2\7\1\0\10\7\1\141\4\7\1\0\4\7\1\0"+
    "\5\7\31\0\3\7\4\0\2\7\1\142\1\143\14\7"+
    "\1\0\4\7\1\0\5\7\31\0\3\7\4\0\2\7"+
    "\1\0\6\7\1\144\6\7\1\0\4\7\1\0\5\7"+
    "\31\0\3\7\4\0\2\7\1\0\15\7\1\0\2\7"+
    "\1\145\1\7\1\0\5\7\50\0\1\146\53\0\3\7"+
    "\4\0\2\7\1\0\5\7\1\147\7\7\1\0\4\7"+
    "\1\0\5\7\31\0\3\7\4\0\2\7\1\0\6\7"+
    "\1\150\6\7\1\0\4\7\1\0\5\7\31\0\3\7"+
    "\4\0\2\7\1\0\3\7\1\151\11\7\1\0\4\7"+
    "\1\0\5\7\31\0\3\7\4\0\2\7\1\0\11\7"+
    "\1\152\3\7\1\0\4\7\1\0\5\7\31\0\3\7"+
    "\4\0\2\7\1\0\15\7\1\153\1\154\3\7\1\0"+
    "\5\7\31\0\3\7\4\0\2\7\1\0\11\7\1\155"+
    "\3\7\1\0\4\7\1\0\5\7\31\0\3\7\4\0"+
    "\2\7\1\0\15\7\1\156\1\157\3\7\1\0\5\7"+
    "\31\0\3\7\4\0\2\7\1\0\1\7\1\160\13\7"+
    "\1\0\4\7\1\0\5\7\31\0\3\7\4\0\1\7"+
    "\1\161\1\0\15\7\1\0\4\7\1\0\5\7\57\0"+
    "\1\162\55\0\2\163\60\0\3\7\4\0\2\7\1\0"+
    "\14\7\1\164\1\0\4\7\1\0\5\7\31\0\3\7"+
    "\4\0\2\7\1\163\1\165\14\7\1\0\4\7\1\0"+
    "\5\7\31\0\3\7\4\0\1\7\1\166\1\0\15\7"+
    "\1\0\4\7\1\0\5\7\31\0\3\7\4\0\2\7"+
    "\1\0\10\7\1\167\4\7\1\0\4\7\1\0\5\7"+
    "\31\0\3\7\4\0\2\7\1\0\14\7\1\170\1\0"+
    "\4\7\1\0\5\7\31\0\3\7\4\0\2\7\1\171"+
    "\1\172\14\7\1\0\4\7\1\0\5\7\22\0\14\65"+
    "\1\173\1\133\55\65\22\0\1\174\57\0\3\7\4\0"+
    "\2\7\1\0\1\7\1\175\13\7\1\0\4\7\1\0"+
    "\5\7\31\0\3\7\4\0\2\7\1\0\2\7\1\176"+
    "\12\7\1\0\4\7\1\0\5\7\31\0\3\7\4\0"+
    "\2\7\1\0\3\7\1\177\11\7\1\0\4\7\1\0"+
    "\5\7\47\0\1\200\54\0\3\7\4\0\2\7\1\0"+
    "\4\7\1\201\10\7\1\0\4\7\1\0\5\7\31\0"+
    "\3\7\4\0\2\7\1\0\7\7\1\202\5\7\1\0"+
    "\4\7\1\0\5\7\31\0\3\7\4\0\1\7\1\203"+
    "\1\204\1\205\14\7\1\0\4\7\1\0\5\7\51\0"+
    "\1\206\52\0\3\7\4\0\2\7\1\0\6\7\1\207"+
    "\6\7\1\0\4\7\1\0\5\7\31\0\3\7\4\0"+
    "\2\7\1\0\11\7\1\210\3\7\1\0\4\7\1\0"+
    "\5\7\31\0\3\7\4\0\2\7\1\0\10\7\1\211"+
    "\4\7\1\0\4\7\1\0\5\7\31\0\3\7\4\0"+
    "\1\7\1\212\1\0\15\7\1\0\4\7\1\0\5\7"+
    "\54\0\1\213\47\0\3\7\4\0\2\7\1\0\11\7"+
    "\1\214\3\7\1\0\4\7\1\0\5\7\31\0\3\7"+
    "\4\0\2\7\1\0\15\7\1\0\4\7\1\0\2\7"+
    "\1\215\2\7\54\0\1\216\47\0\3\7\4\0\2\7"+
    "\1\0\11\7\1\217\3\7\1\0\4\7\1\0\5\7"+
    "\31\0\3\7\4\0\2\7\1\0\15\7\1\220\1\221"+
    "\3\7\1\0\5\7\31\0\3\7\4\0\2\7\1\0"+
    "\14\7\1\222\1\0\4\7\1\0\5\7\42\0\2\223"+
    "\77\0\1\224\53\0\3\7\4\0\2\7\1\223\1\225"+
    "\14\7\1\0\4\7\1\0\5\7\31\0\3\7\4\0"+
    "\2\7\1\0\5\7\1\226\7\7\1\0\4\7\1\0"+
    "\5\7\31\0\3\7\4\0\2\7\1\0\15\7\1\0"+
    "\2\7\1\227\1\7\1\0\5\7\31\0\3\7\4\0"+
    "\2\7\1\0\15\7\1\230\1\231\3\7\1\0\5\7"+
    "\53\0\1\232\50\0\3\7\4\0\2\7\1\0\10\7"+
    "\1\233\4\7\1\0\4\7\1\0\5\7\31\0\3\7"+
    "\4\0\1\7\1\234\1\0\15\7\1\0\4\7\1\0"+
    "\5\7\31\0\3\7\4\0\2\7\1\0\14\7\1\235"+
    "\1\0\4\7\1\0\5\7\31\0\3\7\4\0\2\7"+
    "\1\0\10\7\1\236\4\7\1\0\4\7\1\0\5\7"+
    "\31\0\3\7\4\0\2\7\1\0\6\7\1\237\6\7"+
    "\1\0\4\7\1\0\5\7\44\0\1\240\57\0\3\7"+
    "\4\0\2\7\1\0\1\7\1\241\13\7\1\0\4\7"+
    "\1\0\5\7\53\0\1\242\50\0\3\7\4\0\2\7"+
    "\1\0\10\7\1\243\4\7\1\0\4\7\1\0\5\7"+
    "\31\0\3\7\4\0\2\7\1\0\15\7\1\0\4\7"+
    "\1\244\1\245\4\7\46\0\1\246\55\0\3\7\4\0"+
    "\2\7\1\0\3\7\1\247\11\7\1\0\4\7\1\0"+
    "\5\7\44\0\1\250\103\0\1\251\46\0\3\7\4\0"+
    "\2\7\1\0\1\7\1\252\13\7\1\0\4\7\1\0"+
    "\5\7\31\0\3\7\4\0\2\7\1\0\12\7\1\253"+
    "\2\7\1\0\4\7\1\0\5\7\31\0\3\7\4\0"+
    "\2\7\1\254\1\255\14\7\1\0\4\7\1\0\5\7"+
    "\54\0\1\256\47\0\3\7\4\0\2\7\1\0\11\7"+
    "\1\257\3\7\1\0\4\7\1\0\5\7\54\0\1\260"+
    "\47\0\3\7\4\0\2\7\1\0\11\7\1\261\3\7"+
    "\1\0\4\7\1\0\5\7\31\0\3\7\4\0\2\7"+
    "\1\0\10\7\1\262\4\7\1\0\4\7\1\0\5\7"+
    "\31\0\3\7\4\0\2\7\1\0\11\7\1\263\3\7"+
    "\1\0\4\7\1\0\5\7\31\0\3\7\4\0\2\7"+
    "\1\0\11\7\1\264\3\7\1\0\4\7\1\0\5\7"+
    "\31\0\3\7\4\0\2\7\1\0\10\7\1\265\4\7"+
    "\1\0\4\7\1\0\5\7\42\0\2\266\60\0\3\7"+
    "\4\0\2\7\1\266\1\267\14\7\1\0\4\7\1\0"+
    "\5\7\46\0\1\270\55\0\3\7\4\0\2\7\1\0"+
    "\3\7\1\271\11\7\1\0\4\7\1\0\5\7\53\0"+
    "\1\272\50\0\3\7\4\0\2\7\1\0\10\7\1\273"+
    "\4\7\1\0\4\7\1\0\5\7\62\0\1\274\66\0"+
    "\1\275\45\0\3\7\4\0\2\7\1\0\15\7\1\0"+
    "\1\7\1\276\2\7\1\0\5\7\31\0\3\7\4\0"+
    "\2\7\1\0\13\7\1\277\1\7\1\0\4\7\1\0"+
    "\5\7\55\0\1\300\46\0\3\7\4\0\2\7\1\0"+
    "\12\7\1\301\2\7\1\0\4\7\1\0\5\7\31\0"+
    "\3\7\4\0\2\7\1\0\3\7\1\302\11\7\1\0"+
    "\4\7\1\0\5\7\31\0\3\7\4\0\2\7\1\0"+
    "\15\7\1\303\1\304\3\7\1\0\5\7\31\0\3\7"+
    "\4\0\2\7\1\0\5\7\1\305\7\7\1\0\4\7"+
    "\1\0\5\7\57\0\1\306\44\0\3\7\4\0\2\7"+
    "\1\0\14\7\1\307\1\0\4\7\1\0\5\7\70\0"+
    "\1\310\1\311\32\0\3\7\4\0\2\7\1\0\15\7"+
    "\1\0\4\7\1\0\2\7\1\312\1\313\1\7\54\0"+
    "\1\314\47\0\3\7\4\0\2\7\1\0\11\7\1\315"+
    "\3\7\1\0\4\7\1\0\5\7\41\0\1\316\62\0"+
    "\3\7\4\0\1\7\1\317\1\0\15\7\1\0\4\7"+
    "\1\0\5\7\31\0\3\7\4\0\2\7\1\0\14\7"+
    "\1\320\1\0\4\7\1\0\5\7\62\0\1\321\41\0"+
    "\3\7\4\0\2\7\1\0\15\7\1\0\1\7\1\322"+
    "\2\7\1\0\5\7\35\0\1\323\66\0\3\7\1\0"+
    "\1\323\2\0\2\7\1\0\15\7\1\0\4\7\1\0"+
    "\5\7\52\0\1\324\17\0\1\325\31\0\3\7\4\0"+
    "\2\7\1\0\7\7\1\326\5\7\1\0\4\7\1\0"+
    "\4\7\1\327\53\0\1\330\50\0\3\7\4\0\2\7"+
    "\1\0\10\7\1\331\4\7\1\0\4\7\1\0\5\7"+
    "\64\0\1\332\47\0\1\333\73\0\2\334\60\0\3\7"+
    "\4\0\1\7\1\335\1\0\15\7\1\0\4\7\1\0"+
    "\5\7\31\0\3\7\4\0\2\7\1\334\1\336\14\7"+
    "\1\0\4\7\1\0\5\7\46\0\1\337\55\0\3\7"+
    "\4\0\2\7\1\0\3\7\1\340\11\7\1\0\4\7"+
    "\1\0\5\7\57\0\1\341\72\0\1\342\67\0\1\343"+
    "\47\0\3\7\4\0\2\7\1\0\14\7\1\344\1\0"+
    "\4\7\1\0\5\7\31\0\3\7\4\0\2\7\1\0"+
    "\11\7\1\345\3\7\1\0\4\7\1\0\5\7\52\0"+
    "\1\346\51\0\3\7\4\0\2\7\1\0\7\7\1\347"+
    "\5\7\1\0\4\7\1\0\5\7\42\0\2\350\106\0"+
    "\1\351\44\0\3\7\4\0\2\7\1\0\14\7\1\352"+
    "\1\0\4\7\1\0\5\7\41\0\1\353\62\0\3\7"+
    "\4\0\1\7\1\354\1\0\15\7\1\0\4\7\1\0"+
    "\5\7\50\0\1\355\63\0\1\356\62\0\3\7\4\0"+
    "\1\7\1\357\1\0\15\7\1\0\4\7\1\0\5\7"+
    "\53\0\1\360\50\0\3\7\4\0\2\7\1\0\10\7"+
    "\1\361\4\7\1\0\4\7\1\0\5\7\54\0\1\362"+
    "\76\0\2\363\42\0\3\7\4\0\2\7\1\0\15\7"+
    "\1\363\1\364\3\7\1\0\5\7\54\0\1\365\47\0"+
    "\3\7\4\0\2\7\1\0\11\7\1\366\3\7\1\0"+
    "\4\7\1\0\5\7\60\0\2\367\42\0\3\7\4\0"+
    "\2\7\1\0\15\7\1\367\1\370\3\7\1\0\5\7"+
    "\22\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[10561];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\2\1\1\11\5\1\1\11\20\1\1\11"+
    "\6\1\12\11\1\0\1\11\5\0\1\1\1\0\1\1"+
    "\1\0\1\11\7\1\1\0\11\1\2\0\6\1\7\11"+
    "\1\1\1\11\2\0\1\1\1\11\3\1\1\0\3\1"+
    "\1\0\4\1\1\0\2\1\1\0\3\1\2\0\5\1"+
    "\1\0\1\1\2\11\3\1\1\11\3\1\1\0\1\1"+
    "\1\0\4\1\1\11\2\1\1\11\1\1\1\0\2\1"+
    "\2\0\3\1\1\0\1\1\1\0\5\1\1\0\1\1"+
    "\1\0\1\1\1\11\1\1\1\0\1\1\2\0\2\1"+
    "\1\0\1\1\1\11\1\1\1\11\5\1\1\0\3\1"+
    "\1\0\1\1\2\11\2\1\1\0\2\1\1\11\2\1"+
    "\1\0\1\1\2\11\2\1\1\0\1\1\1\0\2\1"+
    "\1\0\1\1\3\0\2\1\1\0\1\1\3\0\2\1"+
    "\1\0\1\1\2\0\1\11\2\1\1\0\1\1\2\0"+
    "\1\1\1\0\1\1\2\0\1\1\1\0\1\1\2\11"+
    "\1\1\1\0\1\1\1\11\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[248];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    WordPainter painter;
    public ScannerF(java.io.Reader in,WordPainter painter) {
        yyline = 0;
        yychar = 0;
        this.zzReader = in;
        this.painter = painter;
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public ScannerF(java.io.Reader in) {
      yyline = 1;
    yychar = 1;
    this.zzReader = in;
  }



  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(TOK.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { painter.ERROR(yychar,yylength());
            } 
            // fall through
          case 62: break;
          case 2: 
            { 
            } 
            // fall through
          case 63: break;
          case 3: 
            { return new Symbol(TOK.TK_id,        yychar, yylength(), yytext());
            } 
            // fall through
          case 64: break;
          case 4: 
            { return new Symbol(TOK.TK_int,       yychar, yylength(), yytext());
            } 
            // fall through
          case 65: break;
          case 5: 
            { return new Symbol(TOK.TK_div,       yychar, yylength(), yytext());
            } 
            // fall through
          case 66: break;
          case 6: 
            { return new Symbol(TOK.TK_mult,      yychar, yylength(), yytext());
            } 
            // fall through
          case 67: break;
          case 7: 
            { return new Symbol(TOK.TK_plus,      yychar, yylength(), yytext());
            } 
            // fall through
          case 68: break;
          case 8: 
            { return new Symbol(TOK.TK_minus,     yychar, yylength(), yytext());
            } 
            // fall through
          case 69: break;
          case 9: 
            { return new Symbol(TOK.TK_equal,     yychar, yylength(), yytext());
            } 
            // fall through
          case 70: break;
          case 10: 
            { return new Symbol(TOK.TK_not,       yychar, yylength(), yytext());
            } 
            // fall through
          case 71: break;
          case 11: 
            { return new Symbol(TOK.TK_less,      yychar, yylength(), yytext());
            } 
            // fall through
          case 72: break;
          case 12: 
            { return new Symbol(TOK.TK_more,      yychar, yylength(), yytext());
            } 
            // fall through
          case 73: break;
          case 13: 
            { return new Symbol(TOK.TK_dollar,    yychar, yylength(), yytext());
            } 
            // fall through
          case 74: break;
          case 14: 
            { return new Symbol(TOK.TK_lpar,      yychar, yylength(), yytext());
            } 
            // fall through
          case 75: break;
          case 15: 
            { return new Symbol(TOK.TK_rpar,      yychar, yylength(), yytext());
            } 
            // fall through
          case 76: break;
          case 16: 
            { return new Symbol(TOK.TK_lbrc,      yychar, yylength(), yytext());
            } 
            // fall through
          case 77: break;
          case 17: 
            { return new Symbol(TOK.TK_rbrc,      yychar, yylength(), yytext());
            } 
            // fall through
          case 78: break;
          case 18: 
            { return new Symbol(TOK.TK_lbrk,      yychar, yylength(), yytext());
            } 
            // fall through
          case 79: break;
          case 19: 
            { return new Symbol(TOK.TK_rbrk,      yychar, yylength(), yytext());
            } 
            // fall through
          case 80: break;
          case 20: 
            { return new Symbol(TOK.TK_comma,     yychar, yylength(), yytext());
            } 
            // fall through
          case 81: break;
          case 21: 
            { return new Symbol(TOK.TK_colon,     yychar, yylength(), yytext());
            } 
            // fall through
          case 82: break;
          case 22: 
            { return new Symbol(TOK.TK_semicolon, yychar, yylength(), yytext());
            } 
            // fall through
          case 83: break;
          case 23: 
            { return new Symbol(TOK.TK_string,    yychar, yylength(), yytext());
            } 
            // fall through
          case 84: break;
          case 24: 
            { painter.COMMENT(yychar,yylength());
            } 
            // fall through
          case 85: break;
          case 25: 
            { return new Symbol(TOK.RW_if,        yychar, yylength(), yytext());
            } 
            // fall through
          case 86: break;
          case 26: 
            { return new Symbol(TOK.RW_do,        yychar, yylength(), yytext());
            } 
            // fall through
          case 87: break;
          case 27: 
            { return new Symbol(TOK.TK_inc,       yychar, yylength(), yytext());
            } 
            // fall through
          case 88: break;
          case 28: 
            { return new Symbol(TOK.TK_equequ,    yychar, yylength(), yytext());
            } 
            // fall through
          case 89: break;
          case 29: 
            { return new Symbol(TOK.TK_notequ,    yychar, yylength(), yytext());
            } 
            // fall through
          case 90: break;
          case 30: 
            { return new Symbol(TOK.TK_lessequ,   yychar, yylength(), yytext());
            } 
            // fall through
          case 91: break;
          case 31: 
            { return new Symbol(TOK.TK_moreequ,   yychar, yylength(), yytext());
            } 
            // fall through
          case 92: break;
          case 32: 
            { return new Symbol(TOK.TK_and,       yychar, yylength(), yytext());
            } 
            // fall through
          case 93: break;
          case 33: 
            { return new Symbol(TOK.TK_or,        yychar, yylength(), yytext());
            } 
            // fall through
          case 94: break;
          case 34: 
            { return new Symbol(TOK.TK_double,    yychar, yylength(), yytext());
            } 
            // fall through
          case 95: break;
          case 35: 
            { return new Symbol(TOK.TK_char,      yychar, yylength(), yytext());
            } 
            // fall through
          case 96: break;
          case 36: 
            { return new Symbol(TOK.RW_int,       yychar, yylength(), yytext());
            } 
            // fall through
          case 97: break;
          case 37: 
            { return new Symbol(TOK.RW_for,       yychar, yylength(), yytext());
            } 
            // fall through
          case 98: break;
          case 38: 
            { return new Symbol(TOK.RW_main,      yychar, yylength(), yytext());
            } 
            // fall through
          case 99: break;
          case 39: 
            { return new Symbol(TOK.RW_void,      yychar, yylength(), yytext());
            } 
            // fall through
          case 100: break;
          case 40: 
            { return new Symbol(TOK.RW_true,      yychar, yylength(), yytext());
            } 
            // fall through
          case 101: break;
          case 41: 
            { return new Symbol(TOK.RW_bool,      yychar, yylength(), yytext());
            } 
            // fall through
          case 102: break;
          case 42: 
            { return new Symbol(TOK.RW_else,      yychar, yylength(), yytext());
            } 
            // fall through
          case 103: break;
          case 43: 
            { return new Symbol(TOK.RW_xAxis,     yychar, yylength(), yytext());
            } 
            // fall through
          case 104: break;
          case 44: 
            { return new Symbol(TOK.RW_case,      yychar, yylength(), yytext());
            } 
            // fall through
          case 105: break;
          case 45: 
            { return new Symbol(TOK.RW_char,      yychar, yylength(), yytext());
            } 
            // fall through
          case 106: break;
          case 46: 
            { return new Symbol(TOK.RW_break,     yychar, yylength(), yytext());
            } 
            // fall through
          case 107: break;
          case 47: 
            { return new Symbol(TOK.RW_false,     yychar, yylength(), yytext());
            } 
            // fall through
          case 108: break;
          case 48: 
            { return new Symbol(TOK.RW_while,     yychar, yylength(), yytext());
            } 
            // fall through
          case 109: break;
          case 49: 
            { return new Symbol(TOK.RW_double,    yychar, yylength(), yytext());
            } 
            // fall through
          case 110: break;
          case 50: 
            { return new Symbol(TOK.RW_title,     yychar, yylength(), yytext());
            } 
            // fall through
          case 111: break;
          case 51: 
            { return new Symbol(TOK.RW_string,    yychar, yylength(), yytext());
            } 
            // fall through
          case 112: break;
          case 52: 
            { return new Symbol(TOK.RW_switch,    yychar, yylength(), yytext());
            } 
            // fall through
          case 113: break;
          case 53: 
            { return new Symbol(TOK.RW_values,    yychar, yylength(), yytext());
            } 
            // fall through
          case 114: break;
          case 54: 
            { return new Symbol(TOK.RW_default,   yychar, yylength(), yytext());
            } 
            // fall through
          case 115: break;
          case 55: 
            { return new Symbol(TOK.RW_titleX,    yychar, yylength(), yytext());
            } 
            // fall through
          case 116: break;
          case 56: 
            { return new Symbol(TOK.RW_titleY,    yychar, yylength(), yytext());
            } 
            // fall through
          case 117: break;
          case 57: 
            { return new Symbol(TOK.RW_newVal,    yychar, yylength(), yytext());
            } 
            // fall through
          case 118: break;
          case 58: 
            { return new Symbol(TOK.RW_pieG,      yychar, yylength(), yytext());
            } 
            // fall through
          case 119: break;
          case 59: 
            { return new Symbol(TOK.RW_print,     yychar, yylength(), yytext());
            } 
            // fall through
          case 120: break;
          case 60: 
            { return new Symbol(TOK.RW_barG,      yychar, yylength(), yytext());
            } 
            // fall through
          case 121: break;
          case 61: 
            { return new Symbol(TOK.RW_defG,      yychar, yylength(), yytext());
            } 
            // fall through
          case 122: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
