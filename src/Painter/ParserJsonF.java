
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Painter;

import java.util.ArrayList;
import java.util.stream.Collectors;
import java_cup.runtime.*;
import Components.Response;
import Components.ErrorS;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class ParserJsonF extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return TOKJSON.class;
}

  /** Default constructor. */
  @Deprecated
  public ParserJsonF() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public ParserJsonF(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ParserJsonF(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\011\000\002\002\004\000\002\002\005\000\002\003" +
    "\005\000\002\003\003\000\002\004\005\000\002\004\005" +
    "\000\002\005\003\000\002\006\003\000\002\007\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\020\000\004\006\004\001\002\000\004\004\ufffa\001" +
    "\002\000\004\002\022\001\002\000\004\004\007\001\002" +
    "\000\004\011\ufffb\001\002\000\004\011\017\001\002\000" +
    "\006\007\013\010\015\001\002\000\006\007\ufffe\010\ufffe" +
    "\001\002\000\004\002\ufff9\001\002\000\004\002\000\001" +
    "\002\000\004\004\007\001\002\000\006\007\uffff\010\uffff" +
    "\001\002\000\006\004\021\005\020\001\002\000\006\007" +
    "\ufffc\010\ufffc\001\002\000\006\007\ufffd\010\ufffd\001\002" +
    "\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\020\000\006\002\004\006\005\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\003\010\004\011\005\007" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\007" +
    "\013\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\004\015\005\007\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ParserJsonF$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ParserJsonF$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ParserJsonF$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public ScannerJsonF s;
    int index;
    int nIB = 0;
    WordPainter painter;
    public ParserJsonF(ScannerJsonF s,WordPainter painter) {
        super(s);
        this.s = s;
        this.painter = painter;
    }
    public void syntax_error(Symbol sym) {
        painter.SERROR(sym.left,sym.right);
    }
    public void unrecovered_syntax_error(Symbol sym) throws java.lang.Exception {}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$ParserJsonF$actions {
  private final ParserJsonF parser;

  /** Constructor */
  CUP$ParserJsonF$actions(ParserJsonF parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$ParserJsonF$do_action_part00000000(
    int                        CUP$ParserJsonF$act_num,
    java_cup.runtime.lr_parser CUP$ParserJsonF$parser,
    java.util.Stack            CUP$ParserJsonF$stack,
    int                        CUP$ParserJsonF$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ParserJsonF$result;

      /* select the action based on the action number */
      switch (CUP$ParserJsonF$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INIT EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$ParserJsonF$stack.elementAt(CUP$ParserJsonF$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$ParserJsonF$stack.elementAt(CUP$ParserJsonF$top-1)).right;
		String start_val = (String)((java_cup.runtime.Symbol) CUP$ParserJsonF$stack.elementAt(CUP$ParserJsonF$top-1)).value;
		RESULT = start_val;
              CUP$ParserJsonF$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$ParserJsonF$stack.elementAt(CUP$ParserJsonF$top-1)), ((java_cup.runtime.Symbol)CUP$ParserJsonF$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$ParserJsonF$parser.done_parsing();
          return CUP$ParserJsonF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INIT ::= COLORLBRC PARAMS COLORRBRC 
            {
              String RESULT =null;

              CUP$ParserJsonF$result = parser.getSymbolFactory().newSymbol("INIT",0, ((java_cup.runtime.Symbol)CUP$ParserJsonF$stack.elementAt(CUP$ParserJsonF$top-2)), ((java_cup.runtime.Symbol)CUP$ParserJsonF$stack.peek()), RESULT);
            }
          return CUP$ParserJsonF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // PARAMS ::= PARAMS TK_comma PARAM 
            {
              String RESULT =null;

              CUP$ParserJsonF$result = parser.getSymbolFactory().newSymbol("PARAMS",1, ((java_cup.runtime.Symbol)CUP$ParserJsonF$stack.elementAt(CUP$ParserJsonF$top-2)), ((java_cup.runtime.Symbol)CUP$ParserJsonF$stack.peek()), RESULT);
            }
          return CUP$ParserJsonF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // PARAMS ::= PARAM 
            {
              String RESULT =null;

              CUP$ParserJsonF$result = parser.getSymbolFactory().newSymbol("PARAMS",1, ((java_cup.runtime.Symbol)CUP$ParserJsonF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserJsonF$stack.peek()), RESULT);
            }
          return CUP$ParserJsonF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // PARAM ::= KEYS TK_colon TK_string 
            {
              String RESULT =null;
		int trleft = ((java_cup.runtime.Symbol)CUP$ParserJsonF$stack.peek()).left;
		int trright = ((java_cup.runtime.Symbol)CUP$ParserJsonF$stack.peek()).right;
		String tr = (String)((java_cup.runtime.Symbol) CUP$ParserJsonF$stack.peek()).value;
		painter.STRING(trleft, trright);
              CUP$ParserJsonF$result = parser.getSymbolFactory().newSymbol("PARAM",2, ((java_cup.runtime.Symbol)CUP$ParserJsonF$stack.elementAt(CUP$ParserJsonF$top-2)), ((java_cup.runtime.Symbol)CUP$ParserJsonF$stack.peek()), RESULT);
            }
          return CUP$ParserJsonF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // PARAM ::= KEYS TK_colon TK_double 
            {
              String RESULT =null;
		int trleft = ((java_cup.runtime.Symbol)CUP$ParserJsonF$stack.peek()).left;
		int trright = ((java_cup.runtime.Symbol)CUP$ParserJsonF$stack.peek()).right;
		String tr = (String)((java_cup.runtime.Symbol) CUP$ParserJsonF$stack.peek()).value;
		painter.NUMBER(trleft, trright);
              CUP$ParserJsonF$result = parser.getSymbolFactory().newSymbol("PARAM",2, ((java_cup.runtime.Symbol)CUP$ParserJsonF$stack.elementAt(CUP$ParserJsonF$top-2)), ((java_cup.runtime.Symbol)CUP$ParserJsonF$stack.peek()), RESULT);
            }
          return CUP$ParserJsonF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // KEYS ::= TK_string 
            {
              String RESULT =null;
		int kyleft = ((java_cup.runtime.Symbol)CUP$ParserJsonF$stack.peek()).left;
		int kyright = ((java_cup.runtime.Symbol)CUP$ParserJsonF$stack.peek()).right;
		String ky = (String)((java_cup.runtime.Symbol) CUP$ParserJsonF$stack.peek()).value;
		painter.VARIABLE(kyleft, kyright);
              CUP$ParserJsonF$result = parser.getSymbolFactory().newSymbol("KEYS",3, ((java_cup.runtime.Symbol)CUP$ParserJsonF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserJsonF$stack.peek()), RESULT);
            }
          return CUP$ParserJsonF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // COLORLBRC ::= TK_lbrc 
            {
              String RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$ParserJsonF$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$ParserJsonF$stack.peek()).right;
		String l = (String)((java_cup.runtime.Symbol) CUP$ParserJsonF$stack.peek()).value;
		painter.BRKT(nIB, lleft, lright); nIB ++;
              CUP$ParserJsonF$result = parser.getSymbolFactory().newSymbol("COLORLBRC",4, ((java_cup.runtime.Symbol)CUP$ParserJsonF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserJsonF$stack.peek()), RESULT);
            }
          return CUP$ParserJsonF$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // COLORRBRC ::= TK_rbrc 
            {
              String RESULT =null;
		int rleft = ((java_cup.runtime.Symbol)CUP$ParserJsonF$stack.peek()).left;
		int rright = ((java_cup.runtime.Symbol)CUP$ParserJsonF$stack.peek()).right;
		String r = (String)((java_cup.runtime.Symbol) CUP$ParserJsonF$stack.peek()).value;
		nIB --; painter.BRKT(nIB, rleft, rright);
              CUP$ParserJsonF$result = parser.getSymbolFactory().newSymbol("COLORRBRC",5, ((java_cup.runtime.Symbol)CUP$ParserJsonF$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserJsonF$stack.peek()), RESULT);
            }
          return CUP$ParserJsonF$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$ParserJsonF$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$ParserJsonF$do_action(
    int                        CUP$ParserJsonF$act_num,
    java_cup.runtime.lr_parser CUP$ParserJsonF$parser,
    java.util.Stack            CUP$ParserJsonF$stack,
    int                        CUP$ParserJsonF$top)
    throws java.lang.Exception
    {
              return CUP$ParserJsonF$do_action_part00000000(
                               CUP$ParserJsonF$act_num,
                               CUP$ParserJsonF$parser,
                               CUP$ParserJsonF$stack,
                               CUP$ParserJsonF$top);
    }
}

}
