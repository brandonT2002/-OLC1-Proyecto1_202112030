/* The following code was generated by JFlex 1.7.0 */

/* 1. Package e importaciones */
package Language;
import java_cup.runtime.Symbol;
import java.util.ArrayList;
import Components.ErrorL;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>src/Language/Scanner.jflex</tt>
 */
public class Scanner implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
     0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  4,  6,  6,  5,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     1, 39,  2,  0,  0,  0, 42, 10, 44, 45, 13, 36,  0, 37, 11, 12, 
     9,  9,  9,  9,  9,  9,  9,  9,  9,  9, 48, 49, 40, 38, 41,  0, 
     0,  8,  8, 34,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8,  8, 
     8,  8,  8,  8,  8,  8,  8, 35,  8,  8,  8,  0,  3,  0,  0,  7, 
     0, 15, 23, 26, 20, 25, 31, 30, 27, 16,  8, 33, 24, 14, 17, 19, 
     8,  8, 28, 29, 21, 22, 18, 32,  8,  8,  8, 46, 43, 47,  0,  0, 
     0,  0,  0,  0,  0,  6,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
  };

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\1\1\3\1\1\1\4\1\5"+
    "\1\1\1\6\1\7\14\4\1\10\1\11\1\12\1\13"+
    "\1\14\1\15\2\1\1\16\1\17\1\20\1\21\1\22"+
    "\1\23\1\0\1\24\5\0\1\2\1\0\2\4\1\25"+
    "\1\4\1\26\15\4\1\27\1\30\1\31\1\32\1\33"+
    "\1\34\1\35\1\36\1\37\1\0\1\4\1\40\14\4"+
    "\1\41\2\4\1\2\1\42\1\43\2\4\1\44\1\45"+
    "\1\4\1\46\1\47\1\50\7\4\1\51\2\4\1\52"+
    "\1\53\1\4\1\54\1\4\1\55\1\56\1\4\1\57"+
    "\1\4\5\0\1\60";

  private static int [] zzUnpackAction() {
    int [] result = new int[128];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\62\0\144\0\226\0\62\0\310\0\372\0\u012c"+
    "\0\u015e\0\u0190\0\62\0\u01c2\0\u01f4\0\u0226\0\u0258\0\u028a"+
    "\0\u02bc\0\u02ee\0\u0320\0\u0352\0\u0384\0\u03b6\0\u03e8\0\u041a"+
    "\0\62\0\u044c\0\u047e\0\u04b0\0\u04e2\0\u0514\0\u0546\0\62"+
    "\0\62\0\62\0\62\0\62\0\62\0\226\0\62\0\u0578"+
    "\0\310\0\u05aa\0\u05dc\0\u060e\0\u0640\0\u0672\0\u06a4\0\u06d6"+
    "\0\372\0\u0708\0\u073a\0\u076c\0\u079e\0\u07d0\0\u0802\0\u0834"+
    "\0\u0866\0\u0898\0\u08ca\0\u08fc\0\u092e\0\u0960\0\u0992\0\u09c4"+
    "\0\62\0\62\0\62\0\62\0\62\0\62\0\62\0\u05aa"+
    "\0\62\0\u09f6\0\u0a28\0\372\0\u0a5a\0\u0a8c\0\u0abe\0\u0af0"+
    "\0\u0b22\0\u0b54\0\u0b86\0\u0bb8\0\u0bea\0\u0c1c\0\u0c4e\0\u0c80"+
    "\0\372\0\u0cb2\0\u0ce4\0\62\0\372\0\372\0\u0d16\0\u0d48"+
    "\0\372\0\372\0\u0d7a\0\372\0\372\0\372\0\u0dac\0\u0dde"+
    "\0\u0e10\0\u0e42\0\u0e74\0\u0ea6\0\u0ed8\0\372\0\u0f0a\0\u0f3c"+
    "\0\372\0\372\0\u0f6e\0\372\0\u0fa0\0\372\0\372\0\u0fd2"+
    "\0\372\0\u1004\0\u1036\0\u1068\0\u109a\0\u10cc\0\u10fe\0\62";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[128];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\2\1\5\1\3\1\0\1\6"+
    "\1\7\1\10\1\11\1\2\1\12\1\13\1\14\1\7"+
    "\1\15\1\7\1\16\1\7\1\17\1\20\1\7\1\21"+
    "\1\7\1\22\1\23\2\7\1\24\1\7\1\25\1\26"+
    "\1\7\1\27\1\7\1\30\1\31\1\32\1\33\1\34"+
    "\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44"+
    "\1\45\63\0\1\3\3\0\1\3\54\0\2\46\1\47"+
    "\1\50\1\0\55\46\7\0\1\51\1\7\5\0\26\7"+
    "\25\0\3\7\4\0\26\7\27\0\1\10\1\0\1\52"+
    "\46\0\2\53\1\0\1\54\1\0\55\53\14\0\1\55"+
    "\1\56\53\0\3\7\4\0\1\7\1\57\24\7\25\0"+
    "\3\7\4\0\3\7\1\60\15\7\1\61\4\7\25\0"+
    "\3\7\4\0\5\7\1\62\20\7\25\0\3\7\4\0"+
    "\5\7\1\63\5\7\1\64\12\7\25\0\3\7\4\0"+
    "\16\7\1\65\7\7\25\0\3\7\4\0\5\7\1\66"+
    "\10\7\1\67\7\7\25\0\3\7\4\0\12\7\1\70"+
    "\13\7\25\0\3\7\4\0\1\7\1\71\13\7\1\72"+
    "\10\7\25\0\3\7\4\0\7\7\1\73\12\7\1\74"+
    "\3\7\25\0\3\7\4\0\1\7\1\75\3\7\1\76"+
    "\20\7\25\0\3\7\4\0\15\7\1\77\10\7\25\0"+
    "\3\7\4\0\5\7\1\100\20\7\62\0\1\101\63\0"+
    "\1\102\61\0\1\103\61\0\1\104\61\0\1\105\65\0"+
    "\1\106\62\0\1\107\6\0\4\46\3\0\53\46\11\0"+
    "\1\110\62\0\1\111\47\0\4\53\3\0\53\53\4\55"+
    "\2\0\54\55\15\56\1\112\44\56\7\0\3\7\4\0"+
    "\2\7\1\113\23\7\25\0\3\7\4\0\7\7\1\114"+
    "\16\7\25\0\3\7\4\0\2\7\1\115\23\7\25\0"+
    "\3\7\4\0\10\7\1\116\15\7\25\0\3\7\4\0"+
    "\21\7\1\117\4\7\25\0\3\7\4\0\10\7\1\120"+
    "\15\7\25\0\3\7\4\0\5\7\1\121\20\7\25\0"+
    "\3\7\4\0\13\7\1\122\12\7\25\0\3\7\4\0"+
    "\17\7\1\123\6\7\25\0\3\7\4\0\17\7\1\124"+
    "\6\7\25\0\3\7\4\0\1\7\1\125\24\7\25\0"+
    "\3\7\4\0\16\7\1\126\7\7\25\0\3\7\4\0"+
    "\2\7\1\127\23\7\25\0\3\7\4\0\12\7\1\130"+
    "\13\7\25\0\3\7\4\0\16\7\1\131\7\7\25\0"+
    "\3\7\4\0\2\7\1\132\23\7\25\0\3\7\4\0"+
    "\3\7\1\133\22\7\16\0\14\56\1\134\1\112\44\56"+
    "\7\0\3\7\4\0\3\7\1\135\22\7\25\0\3\7"+
    "\4\0\6\7\1\136\17\7\25\0\3\7\4\0\11\7"+
    "\1\137\14\7\25\0\3\7\4\0\1\7\1\140\24\7"+
    "\25\0\3\7\4\0\13\7\1\141\12\7\25\0\3\7"+
    "\4\0\12\7\1\142\13\7\25\0\3\7\4\0\1\7"+
    "\1\143\24\7\25\0\3\7\4\0\13\7\1\144\12\7"+
    "\25\0\3\7\4\0\13\7\1\145\12\7\25\0\3\7"+
    "\4\0\16\7\1\146\7\7\25\0\3\7\4\0\2\7"+
    "\1\147\23\7\25\0\3\7\4\0\7\7\1\150\16\7"+
    "\25\0\3\7\4\0\17\7\1\151\6\7\25\0\3\7"+
    "\4\0\12\7\1\152\13\7\25\0\3\7\4\0\17\7"+
    "\1\153\6\7\25\0\3\7\4\0\12\7\1\154\13\7"+
    "\25\0\3\7\4\0\10\7\1\155\15\7\25\0\3\7"+
    "\4\0\23\7\1\156\2\7\25\0\3\7\4\0\3\7"+
    "\1\157\22\7\25\0\3\7\4\0\14\7\1\160\11\7"+
    "\25\0\3\7\4\0\13\7\1\161\12\7\25\0\3\7"+
    "\4\0\13\7\1\162\12\7\25\0\3\7\4\0\5\7"+
    "\1\163\20\7\25\0\3\7\4\0\13\7\1\164\12\7"+
    "\25\0\3\7\4\0\12\7\1\165\13\7\25\0\3\7"+
    "\4\0\20\7\1\166\5\7\25\0\3\7\4\0\15\7"+
    "\1\167\10\7\25\0\3\7\4\0\12\7\1\170\13\7"+
    "\25\0\3\7\4\0\7\7\1\171\16\7\25\0\3\7"+
    "\4\0\13\7\1\172\12\7\25\0\3\7\1\0\1\173"+
    "\2\0\26\7\61\0\1\174\52\0\1\175\45\0\1\176"+
    "\66\0\1\177\65\0\1\200\30\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[4400];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\2\1\1\11\5\1\1\11\15\1\1\11"+
    "\6\1\6\11\1\0\1\11\5\0\1\1\1\0\22\1"+
    "\7\11\1\1\1\11\1\0\21\1\1\11\36\1\5\0"+
    "\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[128];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    ArrayList<ErrorL> errors = new ArrayList<>();
    void addError(int line, int column, String character) {
        errors.add(new ErrorL(line, column, character));
    }
    public ArrayList<ErrorL> getErrors() {
        return errors;
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Scanner(java.io.Reader in) {
      yyline = 1;
    yychar = 1;
    this.zzReader = in;
  }



  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(TOK.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { addError(yyline, yychar, yytext());
            } 
            // fall through
          case 49: break;
          case 2: 
            { 
            } 
            // fall through
          case 50: break;
          case 3: 
            { yychar = 1;
            } 
            // fall through
          case 51: break;
          case 4: 
            { return new Symbol(TOK.TK_id,        yyline, yychar, yytext());
            } 
            // fall through
          case 52: break;
          case 5: 
            { return new Symbol(TOK.TK_int,       yyline, yychar, yytext());
            } 
            // fall through
          case 53: break;
          case 6: 
            { return new Symbol(TOK.TK_div,       yyline, yychar, yytext());
            } 
            // fall through
          case 54: break;
          case 7: 
            { return new Symbol(TOK.TK_mult,      yyline, yychar, yytext());
            } 
            // fall through
          case 55: break;
          case 8: 
            { return new Symbol(TOK.TK_plus,      yyline, yychar, yytext());
            } 
            // fall through
          case 56: break;
          case 9: 
            { return new Symbol(TOK.TK_minus,     yyline, yychar, yytext());
            } 
            // fall through
          case 57: break;
          case 10: 
            { return new Symbol(TOK.TK_equal,     yyline, yychar, yytext());
            } 
            // fall through
          case 58: break;
          case 11: 
            { return new Symbol(TOK.TK_not,       yyline, yychar, yytext());
            } 
            // fall through
          case 59: break;
          case 12: 
            { return new Symbol(TOK.TK_less,      yyline, yychar, yytext());
            } 
            // fall through
          case 60: break;
          case 13: 
            { return new Symbol(TOK.TK_more,      yyline, yychar, yytext());
            } 
            // fall through
          case 61: break;
          case 14: 
            { return new Symbol(TOK.TK_lpar,      yyline, yychar, yytext());
            } 
            // fall through
          case 62: break;
          case 15: 
            { return new Symbol(TOK.TK_rpar,      yyline, yychar, yytext());
            } 
            // fall through
          case 63: break;
          case 16: 
            { return new Symbol(TOK.TK_lbrc,      yyline, yychar, yytext());
            } 
            // fall through
          case 64: break;
          case 17: 
            { return new Symbol(TOK.TK_rbrc,      yyline, yychar, yytext());
            } 
            // fall through
          case 65: break;
          case 18: 
            { return new Symbol(TOK.TK_colon,     yyline, yychar, yytext());
            } 
            // fall through
          case 66: break;
          case 19: 
            { return new Symbol(TOK.TK_semicolon, yyline, yychar, yytext());
            } 
            // fall through
          case 67: break;
          case 20: 
            { return new Symbol(TOK.TK_string,    yyline, yychar, yytext());
            } 
            // fall through
          case 68: break;
          case 21: 
            { return new Symbol(TOK.RW_if,        yyline, yychar, yytext());
            } 
            // fall through
          case 69: break;
          case 22: 
            { return new Symbol(TOK.RW_do,        yyline, yychar, yytext());
            } 
            // fall through
          case 70: break;
          case 23: 
            { return new Symbol(TOK.TK_inc,       yyline, yychar, yytext());
            } 
            // fall through
          case 71: break;
          case 24: 
            { return new Symbol(TOK.TK_equequ,    yyline, yychar, yytext());
            } 
            // fall through
          case 72: break;
          case 25: 
            { return new Symbol(TOK.TK_notequ,    yyline, yychar, yytext());
            } 
            // fall through
          case 73: break;
          case 26: 
            { return new Symbol(TOK.TK_lessequ,   yyline, yychar, yytext());
            } 
            // fall through
          case 74: break;
          case 27: 
            { return new Symbol(TOK.TK_moreequ,   yyline, yychar, yytext());
            } 
            // fall through
          case 75: break;
          case 28: 
            { return new Symbol(TOK.TK_and,       yyline, yychar, yytext());
            } 
            // fall through
          case 76: break;
          case 29: 
            { return new Symbol(TOK.TK_or,        yyline, yychar, yytext());
            } 
            // fall through
          case 77: break;
          case 30: 
            { return new Symbol(TOK.TK_double,    yyline, yychar, yytext());
            } 
            // fall through
          case 78: break;
          case 31: 
            { return new Symbol(TOK.TK_char,      yyline, yychar, yytext());
            } 
            // fall through
          case 79: break;
          case 32: 
            { return new Symbol(TOK.RW_int,       yyline, yychar, yytext());
            } 
            // fall through
          case 80: break;
          case 33: 
            { return new Symbol(TOK.RW_for,       yyline, yychar, yytext());
            } 
            // fall through
          case 81: break;
          case 34: 
            { return new Symbol(TOK.RW_main,      yyline, yychar, yytext());
            } 
            // fall through
          case 82: break;
          case 35: 
            { return new Symbol(TOK.RW_void,      yyline, yychar, yytext());
            } 
            // fall through
          case 83: break;
          case 36: 
            { return new Symbol(TOK.RW_true,      yyline, yychar, yytext());
            } 
            // fall through
          case 84: break;
          case 37: 
            { return new Symbol(TOK.RW_bool,      yyline, yychar, yytext());
            } 
            // fall through
          case 85: break;
          case 38: 
            { return new Symbol(TOK.RW_else,      yyline, yychar, yytext());
            } 
            // fall through
          case 86: break;
          case 39: 
            { return new Symbol(TOK.RW_case,      yyline, yychar, yytext());
            } 
            // fall through
          case 87: break;
          case 40: 
            { return new Symbol(TOK.RW_char,      yyline, yychar, yytext());
            } 
            // fall through
          case 88: break;
          case 41: 
            { return new Symbol(TOK.RW_break,     yyline, yychar, yytext());
            } 
            // fall through
          case 89: break;
          case 42: 
            { return new Symbol(TOK.RW_false,     yyline, yychar, yytext());
            } 
            // fall through
          case 90: break;
          case 43: 
            { return new Symbol(TOK.RW_while,     yyline, yychar, yytext());
            } 
            // fall through
          case 91: break;
          case 44: 
            { return new Symbol(TOK.RW_double,    yyline, yychar, yytext());
            } 
            // fall through
          case 92: break;
          case 45: 
            { return new Symbol(TOK.RW_string,    yyline, yychar, yytext());
            } 
            // fall through
          case 93: break;
          case 46: 
            { return new Symbol(TOK.RW_switch,    yyline, yychar, yytext());
            } 
            // fall through
          case 94: break;
          case 47: 
            { return new Symbol(TOK.RW_default,   yyline, yychar, yytext());
            } 
            // fall through
          case 95: break;
          case 48: 
            { return new Symbol(TOK.RW_print,     yyline, yychar, yytext());
            } 
            // fall through
          case 96: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
