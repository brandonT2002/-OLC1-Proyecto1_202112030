/* The following code was generated by JFlex 1.7.0 */

/* 1. Package e importaciones */
package Language;
import java_cup.runtime.Symbol;
import java.util.ArrayList;
import Components.ErrorL;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>src/Language/Scanner.jflex</tt>
 */
public class Scanner implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
     0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  4,  6,  6,  5,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     1, 51,  2,  0, 56,  0, 54, 10, 57, 58, 13, 48, 63, 49, 11, 12, 
     9,  9,  9,  9,  9,  9,  9,  9,  9,  9, 64, 65, 52, 50, 53,  0, 
     0,  8, 45, 34, 43, 37,  8, 44,  8,  8,  8,  8,  8,  8, 47,  8, 
    46,  8,  8,  8, 36,  8, 40, 35, 41, 42,  8, 61,  3, 62,  0,  7, 
     0, 15, 23, 26, 20, 25, 31, 30, 27, 16, 38, 33, 24, 14, 17, 19, 
     8,  8, 28, 29, 21, 22, 18, 32, 39,  8,  8, 59, 55, 60,  0,  0, 
     0,  0,  0,  0,  0,  6,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
  };

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\1\1\3\1\1\1\4\1\5"+
    "\1\1\1\6\1\7\22\4\1\10\1\11\1\12\1\13"+
    "\1\14\1\15\2\1\1\16\1\17\1\20\1\21\1\22"+
    "\1\23\1\24\1\25\1\26\1\27\1\0\1\30\5\0"+
    "\1\2\1\0\2\4\1\31\1\4\1\32\23\4\1\33"+
    "\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43"+
    "\1\0\1\4\1\44\14\4\1\45\10\4\1\2\1\46"+
    "\1\47\2\4\1\50\1\51\1\4\1\52\1\53\1\54"+
    "\6\4\1\55\6\4\1\56\2\4\1\57\1\60\6\4"+
    "\1\61\1\4\1\62\1\63\1\4\1\64\4\4\1\65"+
    "\1\4\1\66\1\67\1\70\3\4\1\0\3\4\1\71"+
    "\1\0\3\4\1\0\2\4\1\72\1\0\2\4\1\0"+
    "\2\4\1\73\1\4\1\74\1\4\1\75";

  private static int [] zzUnpackAction() {
    int [] result = new int[190];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\102\0\204\0\306\0\102\0\u0108\0\u014a\0\u018c"+
    "\0\u01ce\0\u0210\0\102\0\u0252\0\u0294\0\u02d6\0\u0318\0\u035a"+
    "\0\u039c\0\u03de\0\u0420\0\u0462\0\u04a4\0\u04e6\0\u0528\0\u056a"+
    "\0\u05ac\0\u05ee\0\u0630\0\u0672\0\u06b4\0\u06f6\0\102\0\u0738"+
    "\0\u077a\0\u07bc\0\u07fe\0\u0840\0\u0882\0\102\0\102\0\102"+
    "\0\102\0\102\0\102\0\102\0\102\0\102\0\102\0\306"+
    "\0\102\0\u08c4\0\u0108\0\u0906\0\u0948\0\u098a\0\u09cc\0\u0a0e"+
    "\0\u0a50\0\u0a92\0\u014a\0\u0ad4\0\u0b16\0\u0b58\0\u0b9a\0\u0bdc"+
    "\0\u0c1e\0\u0c60\0\u0ca2\0\u0ce4\0\u0d26\0\u0d68\0\u0daa\0\u0dec"+
    "\0\u0e2e\0\u0e70\0\u0eb2\0\u0ef4\0\u0f36\0\u0f78\0\u0fba\0\u0ffc"+
    "\0\102\0\102\0\102\0\102\0\102\0\102\0\102\0\u0906"+
    "\0\102\0\u103e\0\u1080\0\u014a\0\u10c2\0\u1104\0\u1146\0\u1188"+
    "\0\u11ca\0\u120c\0\u124e\0\u1290\0\u12d2\0\u1314\0\u1356\0\u1398"+
    "\0\u014a\0\u13da\0\u141c\0\u145e\0\u14a0\0\u14e2\0\u1524\0\u1566"+
    "\0\u15a8\0\102\0\u014a\0\u014a\0\u15ea\0\u162c\0\u014a\0\u014a"+
    "\0\u166e\0\u014a\0\u014a\0\u014a\0\u16b0\0\u16f2\0\u1734\0\u1776"+
    "\0\u17b8\0\u17fa\0\u014a\0\u183c\0\u187e\0\u18c0\0\u1902\0\u1944"+
    "\0\u1986\0\u014a\0\u19c8\0\u1a0a\0\u014a\0\u014a\0\u1a4c\0\u1a8e"+
    "\0\u1ad0\0\u1b12\0\u1b54\0\u1b96\0\u014a\0\u1bd8\0\u014a\0\u014a"+
    "\0\u1c1a\0\u1c5c\0\u1c9e\0\u1ce0\0\u1d22\0\u1d64\0\u014a\0\u1da6"+
    "\0\u014a\0\u014a\0\u014a\0\u1de8\0\u1e2a\0\u1e6c\0\u1eae\0\u1ef0"+
    "\0\u1f32\0\u1f74\0\u014a\0\u1fb6\0\u1ff8\0\u203a\0\u207c\0\u20be"+
    "\0\u2100\0\u2142\0\u014a\0\u2184\0\u21c6\0\u2208\0\u224a\0\u228c"+
    "\0\u22ce\0\102\0\u2310\0\u014a\0\u2352\0\u014a";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[190];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\2\1\5\1\3\1\0\1\6"+
    "\1\7\1\10\1\11\1\2\1\12\1\13\1\14\1\7"+
    "\1\15\1\7\1\16\1\7\1\17\1\20\1\7\1\21"+
    "\1\7\1\22\1\23\2\7\1\24\1\7\1\25\1\26"+
    "\1\7\1\27\1\7\1\30\1\31\2\7\1\32\2\7"+
    "\1\33\1\34\2\7\1\35\1\36\1\37\1\40\1\41"+
    "\1\42\1\43\1\44\1\45\1\46\1\47\1\50\1\51"+
    "\1\52\1\53\1\54\1\55\1\56\1\57\103\0\1\3"+
    "\3\0\1\3\74\0\2\60\1\61\1\62\1\0\75\60"+
    "\7\0\1\63\1\7\5\0\42\7\31\0\3\7\4\0"+
    "\42\7\33\0\1\10\1\0\1\64\66\0\2\65\1\0"+
    "\1\66\1\0\75\65\14\0\1\67\1\70\73\0\3\7"+
    "\4\0\1\7\1\71\40\7\31\0\3\7\4\0\3\7"+
    "\1\72\15\7\1\73\20\7\31\0\3\7\4\0\5\7"+
    "\1\74\34\7\31\0\3\7\4\0\5\7\1\75\5\7"+
    "\1\76\26\7\31\0\3\7\4\0\16\7\1\77\23\7"+
    "\31\0\3\7\4\0\5\7\1\100\10\7\1\101\23\7"+
    "\31\0\3\7\4\0\12\7\1\102\27\7\31\0\3\7"+
    "\4\0\1\7\1\103\13\7\1\104\24\7\31\0\3\7"+
    "\4\0\7\7\1\105\12\7\1\106\17\7\31\0\3\7"+
    "\4\0\1\7\1\107\3\7\1\110\34\7\31\0\3\7"+
    "\4\0\15\7\1\111\24\7\31\0\3\7\4\0\5\7"+
    "\1\112\34\7\31\0\3\7\4\0\2\7\1\113\37\7"+
    "\31\0\3\7\4\0\30\7\1\114\11\7\31\0\3\7"+
    "\4\0\1\7\1\115\40\7\31\0\3\7\4\0\13\7"+
    "\1\116\26\7\31\0\3\7\4\0\16\7\1\117\23\7"+
    "\31\0\3\7\4\0\13\7\1\120\26\7\102\0\1\121"+
    "\103\0\1\122\101\0\1\123\101\0\1\124\101\0\1\125"+
    "\105\0\1\126\102\0\1\127\12\0\4\60\3\0\73\60"+
    "\11\0\1\130\102\0\1\131\67\0\4\65\3\0\73\65"+
    "\4\67\2\0\74\67\15\70\1\132\64\70\7\0\3\7"+
    "\4\0\2\7\1\133\37\7\31\0\3\7\4\0\7\7"+
    "\1\134\32\7\31\0\3\7\4\0\2\7\1\135\37\7"+
    "\31\0\3\7\4\0\10\7\1\136\31\7\31\0\3\7"+
    "\4\0\21\7\1\137\20\7\31\0\3\7\4\0\10\7"+
    "\1\140\31\7\31\0\3\7\4\0\5\7\1\141\34\7"+
    "\31\0\3\7\4\0\13\7\1\142\26\7\31\0\3\7"+
    "\4\0\17\7\1\143\22\7\31\0\3\7\4\0\17\7"+
    "\1\144\22\7\31\0\3\7\4\0\1\7\1\145\40\7"+
    "\31\0\3\7\4\0\16\7\1\146\23\7\31\0\3\7"+
    "\4\0\2\7\1\147\37\7\31\0\3\7\4\0\12\7"+
    "\1\150\27\7\31\0\3\7\4\0\16\7\1\151\23\7"+
    "\31\0\3\7\4\0\2\7\1\152\37\7\31\0\3\7"+
    "\4\0\3\7\1\153\36\7\31\0\3\7\4\0\7\7"+
    "\1\154\32\7\31\0\3\7\4\0\13\7\1\155\26\7"+
    "\31\0\3\7\4\0\12\7\1\156\27\7\31\0\3\7"+
    "\4\0\21\7\1\157\20\7\31\0\3\7\4\0\1\7"+
    "\1\160\40\7\31\0\3\7\4\0\22\7\1\161\17\7"+
    "\22\0\14\70\1\162\1\132\64\70\7\0\3\7\4\0"+
    "\3\7\1\163\36\7\31\0\3\7\4\0\6\7\1\164"+
    "\33\7\31\0\3\7\4\0\11\7\1\165\30\7\31\0"+
    "\3\7\4\0\1\7\1\166\40\7\31\0\3\7\4\0"+
    "\13\7\1\167\26\7\31\0\3\7\4\0\12\7\1\170"+
    "\27\7\31\0\3\7\4\0\1\7\1\171\40\7\31\0"+
    "\3\7\4\0\13\7\1\172\26\7\31\0\3\7\4\0"+
    "\13\7\1\173\26\7\31\0\3\7\4\0\16\7\1\174"+
    "\23\7\31\0\3\7\4\0\2\7\1\175\37\7\31\0"+
    "\3\7\4\0\7\7\1\176\32\7\31\0\3\7\4\0"+
    "\17\7\1\177\22\7\31\0\3\7\4\0\12\7\1\200"+
    "\27\7\31\0\3\7\4\0\17\7\1\201\22\7\31\0"+
    "\3\7\4\0\10\7\1\202\31\7\31\0\3\7\4\0"+
    "\31\7\1\203\10\7\31\0\3\7\4\0\5\7\1\204"+
    "\34\7\31\0\3\7\4\0\2\7\1\205\37\7\31\0"+
    "\3\7\4\0\21\7\1\206\20\7\31\0\3\7\4\0"+
    "\32\7\1\207\7\7\31\0\3\7\4\0\12\7\1\210"+
    "\27\7\31\0\3\7\4\0\10\7\1\211\31\7\31\0"+
    "\3\7\4\0\23\7\1\212\16\7\31\0\3\7\4\0"+
    "\3\7\1\213\36\7\31\0\3\7\4\0\14\7\1\214"+
    "\25\7\31\0\3\7\4\0\13\7\1\215\26\7\31\0"+
    "\3\7\4\0\13\7\1\216\26\7\31\0\3\7\4\0"+
    "\5\7\1\217\34\7\31\0\3\7\4\0\12\7\1\220"+
    "\27\7\31\0\3\7\4\0\16\7\1\221\23\7\31\0"+
    "\3\7\4\0\3\7\1\222\36\7\31\0\3\7\4\0"+
    "\2\7\1\223\37\7\31\0\3\7\4\0\1\7\1\224"+
    "\40\7\31\0\3\7\4\0\13\7\1\225\26\7\31\0"+
    "\3\7\4\0\12\7\1\226\27\7\31\0\3\7\4\0"+
    "\20\7\1\227\21\7\31\0\3\7\4\0\15\7\1\230"+
    "\24\7\31\0\3\7\4\0\12\7\1\231\27\7\31\0"+
    "\3\7\4\0\5\7\1\232\34\7\31\0\3\7\4\0"+
    "\13\7\1\233\26\7\31\0\3\7\4\0\2\7\1\234"+
    "\37\7\31\0\3\7\4\0\14\7\1\235\25\7\31\0"+
    "\3\7\4\0\12\7\1\236\27\7\31\0\3\7\4\0"+
    "\7\7\1\237\32\7\31\0\3\7\4\0\13\7\1\240"+
    "\26\7\31\0\3\7\4\0\33\7\1\241\1\242\5\7"+
    "\31\0\3\7\4\0\17\7\1\243\22\7\31\0\3\7"+
    "\4\0\16\7\1\244\23\7\31\0\3\7\4\0\1\7"+
    "\1\245\40\7\31\0\3\7\4\0\5\7\1\246\34\7"+
    "\31\0\3\7\1\0\1\247\2\0\42\7\31\0\3\7"+
    "\4\0\36\7\1\250\3\7\31\0\3\7\4\0\37\7"+
    "\1\251\1\252\1\7\31\0\3\7\4\0\16\7\1\253"+
    "\23\7\65\0\1\254\45\0\3\7\4\0\12\7\1\255"+
    "\27\7\31\0\3\7\4\0\1\7\1\256\40\7\31\0"+
    "\3\7\4\0\2\7\1\257\37\7\56\0\1\260\54\0"+
    "\3\7\4\0\5\7\1\261\34\7\31\0\3\7\4\0"+
    "\16\7\1\262\23\7\31\0\3\7\4\0\13\7\1\263"+
    "\26\7\42\0\1\264\70\0\3\7\4\0\11\7\1\265"+
    "\30\7\31\0\3\7\4\0\16\7\1\266\23\7\47\0"+
    "\1\267\63\0\3\7\4\0\1\7\1\270\40\7\31\0"+
    "\3\7\4\0\1\7\1\271\40\7\53\0\1\272\57\0"+
    "\3\7\4\0\12\7\1\273\27\7\31\0\3\7\4\0"+
    "\17\7\1\274\22\7\31\0\3\7\4\0\13\7\1\275"+
    "\26\7\31\0\3\7\4\0\17\7\1\276\22\7\22\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[9108];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\2\1\1\11\5\1\1\11\23\1\1\11"+
    "\6\1\12\11\1\0\1\11\5\0\1\1\1\0\30\1"+
    "\7\11\1\1\1\11\1\0\27\1\1\11\64\1\1\0"+
    "\4\1\1\0\3\1\1\0\3\1\1\0\2\1\1\0"+
    "\2\1\1\11\4\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[190];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
    ArrayList<ErrorL> errors = new ArrayList<>();
    void addError(int line, int column, String character) {
        errors.add(new ErrorL(line, column, character));
    }
    public ArrayList<ErrorL> getErrors() {
        return errors;
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Scanner(java.io.Reader in) {
      yyline = 1;
    yychar = 1;
    this.zzReader = in;
  }



  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(TOK.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { addError(yyline, yychar, yytext());
            } 
            // fall through
          case 62: break;
          case 2: 
            { 
            } 
            // fall through
          case 63: break;
          case 3: 
            { yychar = 1;
            } 
            // fall through
          case 64: break;
          case 4: 
            { return new Symbol(TOK.TK_id,        yyline, yychar, yytext());
            } 
            // fall through
          case 65: break;
          case 5: 
            { return new Symbol(TOK.TK_int,       yyline, yychar, yytext());
            } 
            // fall through
          case 66: break;
          case 6: 
            { return new Symbol(TOK.TK_div,       yyline, yychar, yytext());
            } 
            // fall through
          case 67: break;
          case 7: 
            { return new Symbol(TOK.TK_mult,      yyline, yychar, yytext());
            } 
            // fall through
          case 68: break;
          case 8: 
            { return new Symbol(TOK.TK_plus,      yyline, yychar, yytext());
            } 
            // fall through
          case 69: break;
          case 9: 
            { return new Symbol(TOK.TK_minus,     yyline, yychar, yytext());
            } 
            // fall through
          case 70: break;
          case 10: 
            { return new Symbol(TOK.TK_equal,     yyline, yychar, yytext());
            } 
            // fall through
          case 71: break;
          case 11: 
            { return new Symbol(TOK.TK_not,       yyline, yychar, yytext());
            } 
            // fall through
          case 72: break;
          case 12: 
            { return new Symbol(TOK.TK_less,      yyline, yychar, yytext());
            } 
            // fall through
          case 73: break;
          case 13: 
            { return new Symbol(TOK.TK_more,      yyline, yychar, yytext());
            } 
            // fall through
          case 74: break;
          case 14: 
            { return new Symbol(TOK.TK_dollar,    yyline, yychar, yytext());
            } 
            // fall through
          case 75: break;
          case 15: 
            { return new Symbol(TOK.TK_lpar,      yyline, yychar, yytext());
            } 
            // fall through
          case 76: break;
          case 16: 
            { return new Symbol(TOK.TK_rpar,      yyline, yychar, yytext());
            } 
            // fall through
          case 77: break;
          case 17: 
            { return new Symbol(TOK.TK_lbrc,      yyline, yychar, yytext());
            } 
            // fall through
          case 78: break;
          case 18: 
            { return new Symbol(TOK.TK_rbrc,      yyline, yychar, yytext());
            } 
            // fall through
          case 79: break;
          case 19: 
            { return new Symbol(TOK.TK_lbrk,      yyline, yychar, yytext());
            } 
            // fall through
          case 80: break;
          case 20: 
            { return new Symbol(TOK.TK_rbrk,      yyline, yychar, yytext());
            } 
            // fall through
          case 81: break;
          case 21: 
            { return new Symbol(TOK.TK_comma,     yyline, yychar, yytext());
            } 
            // fall through
          case 82: break;
          case 22: 
            { return new Symbol(TOK.TK_colon,     yyline, yychar, yytext());
            } 
            // fall through
          case 83: break;
          case 23: 
            { return new Symbol(TOK.TK_semicolon, yyline, yychar, yytext());
            } 
            // fall through
          case 84: break;
          case 24: 
            { return new Symbol(TOK.TK_string,    yyline, yychar, yytext());
            } 
            // fall through
          case 85: break;
          case 25: 
            { return new Symbol(TOK.RW_if,        yyline, yychar, yytext());
            } 
            // fall through
          case 86: break;
          case 26: 
            { return new Symbol(TOK.RW_do,        yyline, yychar, yytext());
            } 
            // fall through
          case 87: break;
          case 27: 
            { return new Symbol(TOK.TK_inc,       yyline, yychar, yytext());
            } 
            // fall through
          case 88: break;
          case 28: 
            { return new Symbol(TOK.TK_equequ,    yyline, yychar, yytext());
            } 
            // fall through
          case 89: break;
          case 29: 
            { return new Symbol(TOK.TK_notequ,    yyline, yychar, yytext());
            } 
            // fall through
          case 90: break;
          case 30: 
            { return new Symbol(TOK.TK_lessequ,   yyline, yychar, yytext());
            } 
            // fall through
          case 91: break;
          case 31: 
            { return new Symbol(TOK.TK_moreequ,   yyline, yychar, yytext());
            } 
            // fall through
          case 92: break;
          case 32: 
            { return new Symbol(TOK.TK_and,       yyline, yychar, yytext());
            } 
            // fall through
          case 93: break;
          case 33: 
            { return new Symbol(TOK.TK_or,        yyline, yychar, yytext());
            } 
            // fall through
          case 94: break;
          case 34: 
            { return new Symbol(TOK.TK_double,    yyline, yychar, yytext());
            } 
            // fall through
          case 95: break;
          case 35: 
            { return new Symbol(TOK.TK_char,      yyline, yychar, yytext());
            } 
            // fall through
          case 96: break;
          case 36: 
            { return new Symbol(TOK.RW_int,       yyline, yychar, yytext());
            } 
            // fall through
          case 97: break;
          case 37: 
            { return new Symbol(TOK.RW_for,       yyline, yychar, yytext());
            } 
            // fall through
          case 98: break;
          case 38: 
            { return new Symbol(TOK.RW_main,      yyline, yychar, yytext());
            } 
            // fall through
          case 99: break;
          case 39: 
            { return new Symbol(TOK.RW_void,      yyline, yychar, yytext());
            } 
            // fall through
          case 100: break;
          case 40: 
            { return new Symbol(TOK.RW_true,      yyline, yychar, yytext());
            } 
            // fall through
          case 101: break;
          case 41: 
            { return new Symbol(TOK.RW_bool,      yyline, yychar, yytext());
            } 
            // fall through
          case 102: break;
          case 42: 
            { return new Symbol(TOK.RW_else,      yyline, yychar, yytext());
            } 
            // fall through
          case 103: break;
          case 43: 
            { return new Symbol(TOK.RW_case,      yyline, yychar, yytext());
            } 
            // fall through
          case 104: break;
          case 44: 
            { return new Symbol(TOK.RW_char,      yyline, yychar, yytext());
            } 
            // fall through
          case 105: break;
          case 45: 
            { return new Symbol(TOK.RW_xAxis,     yyline, yychar, yytext());
            } 
            // fall through
          case 106: break;
          case 46: 
            { return new Symbol(TOK.RW_break,     yyline, yychar, yytext());
            } 
            // fall through
          case 107: break;
          case 47: 
            { return new Symbol(TOK.RW_false,     yyline, yychar, yytext());
            } 
            // fall through
          case 108: break;
          case 48: 
            { return new Symbol(TOK.RW_while,     yyline, yychar, yytext());
            } 
            // fall through
          case 109: break;
          case 49: 
            { return new Symbol(TOK.RW_double,    yyline, yychar, yytext());
            } 
            // fall through
          case 110: break;
          case 50: 
            { return new Symbol(TOK.RW_string,    yyline, yychar, yytext());
            } 
            // fall through
          case 111: break;
          case 51: 
            { return new Symbol(TOK.RW_switch,    yyline, yychar, yytext());
            } 
            // fall through
          case 112: break;
          case 52: 
            { return new Symbol(TOK.RW_title,     yyline, yychar, yytext());
            } 
            // fall through
          case 113: break;
          case 53: 
            { return new Symbol(TOK.RW_default,   yyline, yychar, yytext());
            } 
            // fall through
          case 114: break;
          case 54: 
            { return new Symbol(TOK.RW_titleX,    yyline, yychar, yytext());
            } 
            // fall through
          case 115: break;
          case 55: 
            { return new Symbol(TOK.RW_titleY,    yyline, yychar, yytext());
            } 
            // fall through
          case 116: break;
          case 56: 
            { return new Symbol(TOK.RW_values,    yyline, yychar, yytext());
            } 
            // fall through
          case 117: break;
          case 57: 
            { return new Symbol(TOK.RW_newVal,    yyline, yychar, yytext());
            } 
            // fall through
          case 118: break;
          case 58: 
            { return new Symbol(TOK.RW_pieG,      yyline, yychar, yytext());
            } 
            // fall through
          case 119: break;
          case 59: 
            { return new Symbol(TOK.RW_print,     yyline, yychar, yytext());
            } 
            // fall through
          case 120: break;
          case 60: 
            { return new Symbol(TOK.RW_barG,      yyline, yychar, yytext());
            } 
            // fall through
          case 121: break;
          case 61: 
            { return new Symbol(TOK.RW_defG,      yyline, yychar, yytext());
            } 
            // fall through
          case 122: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
