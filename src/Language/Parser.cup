/* 1. Package e importaciones */
package Language;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.stream.Collectors;
import java_cup.runtime.*;
import Components.Response;
import Components.ErrorS;
import Convertor.*;
import TableSym.*;
import Graphs.*;
// graficas
import java.awt.BorderLayout;
import java.util.List;
import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.SwingUtilities;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import com.formdev.flatlaf.intellijthemes.FlatOneDarkIJTheme;

/* 2. Código para el parser, variables y métodos */
parser code
{:
    ArrayList<Response> errorsS = new ArrayList<>();
    public boolean isThereGraphBar = false;
    public boolean isThereGraphPie = false;
    TableSym tableSym;
    public Instruction mainMethod;
    EnvGraph envG;
    FuncDefG globalsDef;
    FuncDefPie pieGraph;
    FuncDefBar barGraph;
    public Parser(Scanner s, TableSym tableSym, EnvGraph envG) {
        super(s);
        this.tableSym = tableSym;
        this.envG = envG;
    }
    public void syntax_error(Symbol sym) {
        errorsS.add(new Response(new ErrorS(sym.left,sym.right,sym.value,TOK.terminalNames[sym.sym])));
    }
    public void unrecovered_syntax_error(Symbol sym) throws java.lang.Exception {
        errorsS.add(new Response("Error Sintáctico sin recuperar."));
    }
    public String getErrors() {
        return errorsS.stream().map(Object::toString).collect(Collectors.joining("\n-> "));
    }
    public boolean isSuccessExecution() {
        return !(errorsS.size() > 0);
    }

    public void defineGlobals() {
        globalsDef.define(envG, tableSym);
    }

    public void barGraph() {
        barGraph.define(envG, tableSym);
    }

    public void pieChart() {
        pieGraph.define(envG, tableSym);
    }
:}

/* 3. Terminales */
terminal String RW_main, RW_void, RW_defG, RW_barG, RW_pieG;
terminal String RW_int, RW_double, RW_char, RW_bool, RW_string, RW_newVal;
terminal String RW_title, RW_xAxis, RW_values, RW_titleX, RW_titleY;
terminal String RW_if, RW_else, RW_switch, RW_case, RW_default, RW_for, RW_while, RW_do;
terminal String RW_break;
terminal String RW_true, RW_false, RW_print;
terminal String TK_string, TK_char, TK_int, TK_double, TK_id, TK_inc;
terminal String TK_plus, TK_minus, TK_mult, TK_div, TK_uminus;
terminal String TK_equequ, TK_notequ, TK_lessequ, TK_moreequ, TK_equal, TK_less, TK_more;
terminal String TK_and, TK_or, TK_not;
terminal String TK_dollar, TK_lpar, TK_rpar, TK_lbrc, TK_rbrc, TK_lbrk, TK_rbrk,TK_comma, TK_colon, TK_semicolon;

/* 4. No Terminales */
non terminal Instruction INIT;
non terminal ArrayList<Instruction> INSTRUCTIONS, ENV;
non terminal Instruction INSTRUCTION;
non terminal Instruction DECLID, DECFUNC;
non terminal Instruction IFSTRUCT, SWITCHSTRUCT;
non terminal ArrayList<Instruction> DEFAULT;
non terminal ArrayList<Case> CASES;
non terminal Case CASE;
non terminal Object[] ENVS, CASESDEFAULT;
non terminal Instruction LOOPFOR;
non terminal String[] ARGSFOR;
non terminal Instruction LOOPWHILE, LOOPDOWHILE;
non terminal Instruction PRINT;
non terminal Instruction REASIGN;
non terminal Expression EXP, ARITHMETICS, RELATIONALS, LOGICS;
non terminal String EXPF, EXPFOR;
non terminal String TYPE;
// Stat
non terminal Value EXPEST;
non terminal SymbStat SYMBSTAT;
non terminal ArrayList<Init> ENVEST, INSTRUCTIONSEST;
non terminal Init INSTRUCTIONEST;
non terminal String TYPEEST;
non terminal Init DECLIDEST;
non terminal ArrayList<Value> VALUES;
non terminal InitAxis ARRAYSDEF;

/* 5. Precedencias */
precedence left TK_colon;
precedence left TK_or;
precedence left TK_and;
precedence right TK_not;
precedence left TK_equequ, TK_notequ;
precedence left TK_lessequ, TK_moreequ, TK_less, TK_more;
precedence left TK_plus, TK_minus;
precedence left TK_mult, TK_div;
precedence right TK_uminus;

start with INIT;

INIT ::=
    RW_void RW_main TK_lpar TK_rpar TK_lbrc INSTRUCTIONS :ins TK_rbrc {:mainMethod = new MainMethod(ins); :} |
    RW_void RW_main TK_lpar TK_rpar TK_lbrc TK_rbrc                   {:mainMethod = new MainMethod(null);:} ;

INSTRUCTIONS ::=
    INSTRUCTIONS :ins INSTRUCTION :i {:RESULT = ins; RESULT.add(i);               :} |
    INSTRUCTION :i                   {:RESULT = new ArrayList<>(Arrays.asList(i));:} ;

INSTRUCTION ::= 
    DECLID       :ins TK_semicolon {:RESULT = ins;:} |
    REASIGN      :ins TK_semicolon {:RESULT = ins;:} |
    IFSTRUCT     :ins              {:RESULT = ins;:} |
    SWITCHSTRUCT :ins              {:RESULT = ins;:} |
    LOOPFOR      :ins              {:RESULT = ins;:} |
    LOOPWHILE    :ins              {:RESULT = ins;:} |
    LOOPDOWHILE  :ins              {:RESULT = ins;:} |
    PRINT        :ins              {:RESULT = ins;:} |
    RW_break          TK_semicolon {:RESULT = new Break();:} |
    DECFUNC      :ins              {:RESULT = new Empty();:} |
    error                          ;

// Declaracion de variables
DECLID ::=
    TYPE TK_id :id TK_equal EXP :exp {:RESULT = new InitID(id.toLowerCase(), exp); :} |
    TYPE TK_id :id                   {:RESULT = new InitID(id.toLowerCase(), null);:} ;

// Reasignación
REASIGN ::=
    TK_id :id TK_equal EXP :exp {:RESULT = new InitID(id.toLowerCase(), exp);:} ;

// Estructura if
IFSTRUCT ::=
    RW_if TK_lpar EXP :exp TK_rpar ENV :ins RW_else IFSTRUCT :b {:RESULT = new If(exp, ins, b);:}|
    RW_if TK_lpar EXP :exp TK_rpar ENV :ins RW_else ENV :b      {:RESULT = new If(exp, ins, b);:}|
    RW_if TK_lpar EXP :exp TK_rpar ENV :ins                     {:RESULT = new If(exp, ins);:};

// Estructura switch-case
SWITCHSTRUCT ::=
    RW_switch TK_lpar EXP :exp TK_rpar ENVS :b {:RESULT = new SwitchCase(exp, (ArrayList<Case>) b[0], (ArrayList<Instruction>) b[1]);:} ;

ENVS ::=
    TK_lbrc CASESDEFAULT :cd TK_rbrc {:RESULT = cd;:} |
    TK_lbrc TK_rbrc                  {:RESULT = new Object[] {null, null};:} ;

CASESDEFAULT ::=
    CASES :c DEFAULT :d {:RESULT = new Object[] {c,    d};   :} |
    CASES :c            {:RESULT = new Object[] {c,    null};:} |
    DEFAULT :d          {:RESULT = new Object[] {null, d};   :} ;

CASES ::= 
    CASES :l CASE :c {:RESULT = l; RESULT.add(c);                 :} |
    CASE :c          {:RESULT = new ArrayList<>(Arrays.asList(c));:} ;

CASE ::= 
    RW_case :c EXP :exp TK_colon INSTRUCTIONS :b {:RESULT = new Case(exp, b);                :} |
    RW_case :c EXP :exp TK_colon                 {:RESULT = new Case(exp, new ArrayList<>());:} ;

DEFAULT ::=
    RW_default TK_colon INSTRUCTIONS :b {:RESULT = b;:}|
    RW_default TK_colon                 {:RESULT = new ArrayList<>();:};

// Bucle for
LOOPFOR ::=
    RW_for TK_lpar ARGSFOR :args TK_rpar ENV :env {:RESULT = new For(args[0], args[1], args[2], env);:} ;

ARGSFOR ::=
    TYPE TK_id :id TK_equal EXP :start TK_semicolon EXPF :limit TK_semicolon TK_id TK_inc {:RESULT = new String[] {id, start.convert(), limit};:} ;

EXPF ::=
    TK_id TK_lessequ EXPFOR :exp {:RESULT = exp + " + 1";:} |
    TK_id TK_less    EXPFOR :exp {:RESULT = exp         ;:} ;

EXPFOR ::=
    EXPFOR :e1 TK_plus  :s EXPFOR :e2 {:RESULT = e1 + " " + s + " " + e2;:} |
    EXPFOR :e1 TK_minus :s EXPFOR :e2 {:RESULT = e1 + " " + s + " " + e2;:} |
    EXPFOR :e1 TK_mult  :s EXPFOR :e2 {:RESULT = e1 + " " + s + " " + e2;:} |
    EXPFOR :e1 TK_div   :s EXPFOR :e2 {:RESULT = e1 + " " + s + " " + e2;:} |
    TK_lpar EXPFOR :exp TK_rpar       {:RESULT = "(" + exp + ")";        :} |
    TK_id     :id                     {:RESULT = id.toLowerCase();       :} |
    TK_int    :p                      {:RESULT = p;                      :} |
    TK_double :p                      {:RESULT = p;                      :} ;

// Bucle while
LOOPWHILE ::=
    RW_while TK_lpar EXP :exp TK_rpar ENV :env {:RESULT = new While(exp, env);:} ;

// bucle do-while
LOOPDOWHILE ::=
    RW_do ENV :env RW_while TK_lpar EXP :exp TK_rpar TK_semicolon {:RESULT = new DoWhile(env, exp);:};

// Impresion
PRINT ::=
    RW_print TK_lpar EXP :exp TK_rpar TK_semicolon {:RESULT = new Print(exp); :} |
    RW_print TK_lpar TK_rpar TK_semicolon          {:RESULT = new Print(null);:} ;

// Entorno
ENV ::=
    TK_lbrc INSTRUCTIONS :ins TK_rbrc {:RESULT = ins; :} |
    TK_lbrc TK_rbrc                   {:RESULT = null;:} ;

// Tipos
TYPE ::=
    RW_string  |
    RW_int     |
    RW_bool    |
    RW_char    |
    RW_double  ;

// Expresiones
EXP ::=
    ARITHMETICS :exp         {:RESULT = exp;:} |
    RELATIONALS :exp         {:RESULT = exp;:} |
    LOGICS      :exp         {:RESULT = exp;:} |
    TK_id       :id          {:RESULT = new Expression(id.toLowerCase());:} |
    TK_string   :p           {:RESULT = new Expression(p);               :} |
    TK_char     :p           {:RESULT = new Expression(p);               :} |
    TK_int      :p           {:RESULT = new Expression(p);               :} |
    TK_double   :p           {:RESULT = new Expression(p);               :} |
    RW_true     :p           {:RESULT = new Expression("True");          :} |
    RW_false    :p           {:RESULT = new Expression("False");         :} |
    TK_lpar EXP :exp TK_rpar {:RESULT = new Expression(exp, null, null); :} ;

ARITHMETICS ::=
    EXP :e1 TK_plus  :s EXP :e2 {:RESULT = new Expression(e1, s, e2);  :} |
    EXP :e1 TK_minus :s EXP :e2 {:RESULT = new Expression(e1, s, e2);  :} |
    EXP :e1 TK_mult  :s EXP :e2 {:RESULT = new Expression(e1, s, e2);  :} |
    EXP :e1 TK_div   :s EXP :e2 {:RESULT = new Expression(e1, s, e2);  :} |
    TK_minus :s         EXP :e2 {:RESULT = new Expression(null, s, e2);:} %prec TK_uminus ;

RELATIONALS ::=
    EXP :e1 TK_equequ  :s EXP :e2 {:RESULT = new Expression(e1, s, e2);:} |
    EXP :e1 TK_notequ  :s EXP :e2 {:RESULT = new Expression(e1, s, e2);:} |
    EXP :e1 TK_lessequ :s EXP :e2 {:RESULT = new Expression(e1, s, e2);:} |
    EXP :e1 TK_moreequ :s EXP :e2 {:RESULT = new Expression(e1, s, e2);:} |
    EXP :e1 TK_less    :s EXP :e2 {:RESULT = new Expression(e1, s, e2);:} |
    EXP :e1 TK_more    :s EXP :e2 {:RESULT = new Expression(e1, s, e2);:} ;

LOGICS ::=
    EXP :e1 TK_and :s EXP :e2 {:RESULT = new Expression(e1, "and", e2);  :} |
    EXP :e1 TK_or  :s EXP :e2 {:RESULT = new Expression(e1, "or",  e2);  :} |
    TK_not :s         EXP :e2 {:RESULT = new Expression(null, "not", e2);:} ;

// StatPy
INSTRUCTIONSEST ::=
    INSTRUCTIONSEST :insts INSTRUCTIONEST :ins {:RESULT = insts; RESULT.add(ins);:} |
    INSTRUCTIONEST :ins                        {:RESULT = new ArrayList<>(Arrays.asList(ins));:} ;

INSTRUCTIONEST ::=
    DECLIDEST :ins      TK_semicolon {:RESULT = ins;:} |
    ARRAYSDEF :ins                   {:RESULT = ins;:} ;

// Declaración de funciones
DECFUNC ::=
    RW_void RW_defG TK_lpar TK_rpar ENVEST :ins {:globalsDef = new FuncDefG(ins);:} |
    RW_void RW_barG TK_lpar TK_rpar ENVEST :ins {:barGraph = new FuncDefBar(ins); isThereGraphBar = true;:} |
    RW_void RW_pieG TK_lpar TK_rpar ENVEST :ins {:pieGraph = new FuncDefPie(ins); isThereGraphPie = true;:} ;

// Declaracion de variables
DECLIDEST ::=
    RW_string RW_title :id TK_equal EXPEST :dts  {:RESULT = new InitLabel(id.toLowerCase(), dts);:}|
    RW_string RW_titleX :id TK_equal EXPEST :dts {:RESULT = new InitLabel(id.toLowerCase(), dts);:}|
    RW_string RW_titleY :id TK_equal EXPEST :dts {:RESULT = new InitLabel(id.toLowerCase(), dts);:}|
    TYPEEST TK_id :id TK_equal EXPEST :dts       {:RESULT = new InitLabel(id.toLowerCase(), dts);:}|
    TYPEEST TK_id :id                            {:RESULT = new InitLabel(id.toLowerCase(), null);:};

// Arreglos
ARRAYSDEF ::=
    RW_string TK_lbrk TK_rbrk RW_xAxis :id TK_equal TK_lbrc VALUES :values TK_rbrc TK_semicolon  {:RESULT = new InitAxis(id.toLowerCase(), values);:} |
    RW_double TK_lbrk TK_rbrk RW_values :id TK_equal TK_lbrc VALUES :values TK_rbrc TK_semicolon {:RESULT = new InitAxis(id.toLowerCase(), values);:} ;

VALUES ::=
    VALUES :list TK_comma EXPEST :exp {:RESULT = list; RESULT.add(exp);:} |
    EXPEST :exp                       {:RESULT = new ArrayList<>(Arrays.asList(exp));:} ;

// Entorno estadístico
ENVEST ::=
    TK_lbrc INSTRUCTIONSEST :insts TK_rbrc {:RESULT = insts;:} |
    TK_lbrc TK_rbrc                        {:RESULT = new ArrayList<>();:} ;

// Tipos estadisticos
TYPEEST ::=
    RW_string  |
    RW_double  ;

// Expresiones
EXPEST ::=
    SYMBSTAT  :sym              {:RESULT = sym;:} |
    TK_id     :id               {:RESULT = new ValueID(id.toLowerCase());:} |
    TK_string :str              {:RESULT = new Basic(new DataSym(true, str.substring(1, str.length() - 1)));:} |
    TK_double :dbl              {:RESULT = new Basic(new DataSym(false, Double.parseDouble(dbl)));:} |
    TK_lpar EXPEST :exp TK_rpar {:RESULT = exp;:} ;

// Simbolos en Archivo StatPy
SYMBSTAT ::=
    TK_dollar TK_lbrc RW_newVal TK_comma TK_string :fn TK_comma TK_string :att TK_rbrc {:RESULT = new SymbStat(fn.substring(1, fn.length() - 1), att.toLowerCase().substring(1, att.length() - 1));:} ;