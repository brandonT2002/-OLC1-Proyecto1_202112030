/* 1. Package e importaciones */
package Language;
import java.util.ArrayList;
import java.util.stream.Collectors;
import java_cup.runtime.*;
import Components.Response;
import Components.ErrorS;

/* 2. Código para el parser, variables y métodos */
parser code
{:
    ArrayList<Response> errorsS = new ArrayList<>();
    public void syntax_error(Symbol sym) {
        errorsS.add(new Response(new ErrorS(sym.left,sym.right,sym.value,TOK.terminalNames[sym.sym])));
    }
    public void unrecovered_syntax_error(Symbol sym) throws java.lang.Exception {
        errorsS.add(new Response("Error Sintáctico sin recuperar."));
    }
    public String getErrors() {
        return errorsS.stream().map(Object::toString).collect(Collectors.joining("\n-> "));
    }
    public boolean isSuccessExecution() {
        return !(errorsS.size() > 0);
    }
:}

/* 3. Terminales */
terminal String RW_main, RW_void, RW_int, RW_double, RW_char, RW_bool, RW_string;
terminal String RW_if, RW_else, RW_switch, RW_case, RW_default, RW_for, RW_while, RW_do;
terminal String RW_break;
terminal String RW_true, RW_false, RW_print;
terminal String TK_string, TK_char, TK_int, TK_double, TK_id, TK_inc;
terminal String TK_plus, TK_minus, TK_mult, TK_div, TK_uminus;
terminal String TK_equequ, TK_notequ, TK_lessequ, TK_moreequ, TK_equal, TK_less, TK_more;
terminal String TK_and, TK_or, TK_not;
terminal String TK_lpar, TK_rpar, TK_lbrc, TK_rbrc, TK_comma, TK_colon, TK_semicolon;

/* 4. No Terminales */
non terminal String INIT;
non terminal String INSTRUCTIONS;
non terminal String EXP, ARITHMETICS, RELATIONALS, LOGICS;
non terminal String DECLID;
non terminal String IFSTRUCT, SWITCHSTRUCT;
non terminal String ENVS, CASESDEFAULT, CASES, CASE, DEFAULT;
non terminal String PRINT;
non terminal String INSTRUCTION;
non terminal String REASIGN;
non terminal String TYPE;
non terminal String ENV;

/* 5. Precedencias */
precedence left TK_colon;
precedence left TK_or;
precedence left TK_and;
precedence right TK_not;
precedence left TK_equequ, TK_notequ;
precedence left TK_lessequ, TK_moreequ, TK_less, TK_more;
precedence left TK_plus, TK_minus;
precedence left TK_mult, TK_div;
precedence right TK_uminus;

start with INIT;

INIT ::=
    RW_void RW_main TK_lpar TK_rpar TK_lbrc INSTRUCTIONS TK_rbrc |
    RW_void RW_main TK_lpar TK_rpar TK_lbrc TK_rbrc              ;

INSTRUCTIONS ::=
    INSTRUCTIONS INSTRUCTION |
    INSTRUCTION              ;

INSTRUCTION ::= 
    DECLID          TK_semicolon |
    REASIGN         TK_semicolon |
    IFSTRUCT                     |
    SWITCHSTRUCT                 |
    PRINT                        |
    RW_break        TK_semicolon |
    error                        ;

DECLID ::=
    TYPE TK_id TK_equal EXP;

REASIGN ::=
    TK_id TK_equal EXP ;

IFSTRUCT ::=
    RW_if TK_lpar EXP TK_rpar ENV RW_else IFSTRUCT |
    RW_if TK_lpar EXP TK_rpar ENV RW_else ENV      |
    RW_if TK_lpar EXP TK_rpar ENV                  ;

SWITCHSTRUCT ::=
    RW_switch :s TK_lpar EXP :exp TK_rpar ENVS ;

ENVS ::=
    TK_lbrc CASESDEFAULT TK_rbrc |
    TK_lbrc TK_rbrc              ;

CASESDEFAULT ::=
    CASES DEFAULT |
    CASES         |
    DEFAULT       ;

CASES ::= 
    CASES CASE |
    CASE       ;

CASE ::= 
    RW_case EXP TK_colon INSTRUCTIONS |
    RW_case EXP TK_colon ENV          |
    RW_case EXP TK_colon              ;

DEFAULT ::=
    RW_default TK_colon INSTRUCTIONS |
    RW_default TK_colon ENV          |
    RW_default TK_colon              ;

PRINT ::=
    RW_print TK_lpar EXP TK_rpar TK_semicolon |
    RW_print TK_lpar TK_rpar TK_semicolon     ;


ENV ::=
    TK_lbrc INSTRUCTIONS TK_rbrc |
    TK_lbrc TK_rbrc              ;

TYPE ::=
    RW_string  |
    RW_int     |
    RW_bool    |
    RW_char    |
    RW_double  ;

EXP ::=
    ARITHMETICS           |
    RELATIONALS           |
    LOGICS                |
    TK_id                 |
    TK_string             |
    TK_char               |
    TK_int                |
    TK_double             |
    RW_true               |
    RW_false              |
    TK_lpar EXP  TK_rpar  ;

ARITHMETICS ::=
    EXP TK_plus  EXP |
    EXP TK_minus EXP |
    EXP TK_mult  EXP |
    EXP TK_div   EXP |
    TK_minus     EXP %prec TK_uminus ;

RELATIONALS ::=
    EXP TK_equequ  EXP |
    EXP TK_notequ  EXP |
    EXP TK_lessequ EXP |
    EXP TK_moreequ EXP |
    EXP TK_less    EXP |
    EXP TK_more    EXP ;

LOGICS ::=
    EXP TK_and EXP |
    EXP TK_or  EXP |
    TK_not     EXP ;