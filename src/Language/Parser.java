
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Language;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.stream.Collectors;
import java_cup.runtime.*;
import Components.Response;
import Components.ErrorS;
import Convertor.*;
import TableSym.*;
import Graphs.*;
import java.awt.BorderLayout;
import java.util.List;
import javax.swing.JFrame;
import javax.swing.JPanel;
import javax.swing.SwingUtilities;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import com.formdev.flatlaf.intellijthemes.FlatOneDarkIJTheme;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return TOK.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\155\000\002\002\004\000\002\002\011\000\002\002" +
    "\010\000\002\003\004\000\002\003\003\000\002\005\004" +
    "\000\002\005\004\000\002\005\003\000\002\005\003\000" +
    "\002\005\003\000\002\005\003\000\002\005\003\000\002" +
    "\005\003\000\002\005\004\000\002\005\003\000\002\005" +
    "\003\000\002\006\006\000\002\006\004\000\002\024\005" +
    "\000\002\010\011\000\002\010\011\000\002\010\007\000" +
    "\002\011\007\000\002\015\005\000\002\015\004\000\002" +
    "\016\004\000\002\016\003\000\002\016\003\000\002\013" +
    "\004\000\002\013\003\000\002\014\006\000\002\014\005" +
    "\000\002\012\005\000\002\012\004\000\002\017\007\000" +
    "\002\020\013\000\002\032\005\000\002\032\005\000\002" +
    "\033\005\000\002\033\005\000\002\033\005\000\002\033" +
    "\005\000\002\033\005\000\002\033\003\000\002\033\003" +
    "\000\002\033\003\000\002\021\007\000\002\022\011\000" +
    "\002\023\007\000\002\023\006\000\002\004\005\000\002" +
    "\004\004\000\002\034\003\000\002\034\003\000\002\034" +
    "\003\000\002\034\003\000\002\034\003\000\002\026\003" +
    "\000\002\026\003\000\002\026\003\000\002\026\003\000" +
    "\002\026\003\000\002\026\003\000\002\026\003\000\002" +
    "\026\003\000\002\026\003\000\002\026\003\000\002\026" +
    "\005\000\002\027\005\000\002\027\005\000\002\027\005" +
    "\000\002\027\005\000\002\027\004\000\002\030\005\000" +
    "\002\030\005\000\002\030\005\000\002\030\005\000\002" +
    "\030\005\000\002\030\005\000\002\031\005\000\002\031" +
    "\005\000\002\031\004\000\002\037\004\000\002\037\003" +
    "\000\002\040\004\000\002\040\004\000\002\040\003\000" +
    "\002\007\007\000\002\007\007\000\002\007\007\000\002" +
    "\042\006\000\002\042\006\000\002\042\006\000\002\042" +
    "\006\000\002\042\004\000\002\036\012\000\002\044\013" +
    "\000\002\044\013\000\002\043\005\000\002\043\003\000" +
    "\002\025\005\000\002\025\004\000\002\041\003\000\002" +
    "\041\003\000\002\035\003\000\002\035\003\000\002\035" +
    "\003\000\002\035\003\000\002\035\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\356\000\004\005\005\001\002\000\004\002\360\001" +
    "\002\000\004\004\006\001\002\000\004\066\007\001\002" +
    "\000\004\067\010\001\002\000\004\070\011\001\002\000" +
    "\042\003\036\005\017\011\043\012\034\013\037\014\016" +
    "\015\040\024\032\026\027\031\023\032\025\033\041\034" +
    "\045\037\012\044\014\071\013\001\002\000\004\066\352" +
    "\001\002\000\004\002\uffff\001\002\000\004\057\350\001" +
    "\002\000\046\003\ufff7\005\ufff7\011\ufff7\012\ufff7\013\ufff7" +
    "\014\ufff7\015\ufff7\024\ufff7\026\ufff7\027\ufff7\030\ufff7\031" +
    "\ufff7\032\ufff7\033\ufff7\034\ufff7\037\ufff7\044\ufff7\071\ufff7" +
    "\001\002\000\004\044\uffcb\001\002\000\010\006\240\007" +
    "\242\010\241\001\002\000\046\003\ufff9\005\ufff9\011\ufff9" +
    "\012\ufff9\013\ufff9\014\ufff9\015\ufff9\024\ufff9\026\ufff9\027" +
    "\ufff9\030\ufff9\031\ufff9\032\ufff9\033\ufff9\034\ufff9\037\ufff9" +
    "\044\ufff9\071\ufff9\001\002\000\042\003\036\005\017\011" +
    "\043\012\034\013\037\014\016\015\040\024\032\026\027" +
    "\031\023\032\025\033\041\034\045\037\012\044\014\071" +
    "\237\001\002\000\004\044\234\001\002\000\004\066\174" +
    "\001\002\000\046\003\ufff6\005\ufff6\011\ufff6\012\ufff6\013" +
    "\ufff6\014\ufff6\015\ufff6\024\ufff6\026\ufff6\027\ufff6\030\ufff6" +
    "\031\ufff6\032\ufff6\033\ufff6\034\ufff6\037\ufff6\044\ufff6\071" +
    "\ufff6\001\002\000\004\066\170\001\002\000\046\003\ufffa" +
    "\005\ufffa\011\ufffa\012\ufffa\013\ufffa\014\ufffa\015\ufffa\024" +
    "\ufffa\026\ufffa\027\ufffa\030\ufffa\031\ufffa\032\ufffa\033\ufffa" +
    "\034\ufffa\037\ufffa\044\ufffa\071\ufffa\001\002\000\004\066" +
    "\144\001\002\000\046\003\ufffd\005\ufffd\011\ufffd\012\ufffd" +
    "\013\ufffd\014\ufffd\015\ufffd\024\ufffd\026\ufffd\027\ufffd\030" +
    "\ufffd\031\ufffd\032\ufffd\033\ufffd\034\ufffd\037\ufffd\044\ufffd" +
    "\071\ufffd\001\002\000\046\003\ufff8\005\ufff8\011\ufff8\012" +
    "\ufff8\013\ufff8\014\ufff8\015\ufff8\024\ufff8\026\ufff8\027\ufff8" +
    "\030\ufff8\031\ufff8\032\ufff8\033\ufff8\034\ufff8\037\ufff8\044" +
    "\ufff8\071\ufff8\001\002\000\004\066\135\001\002\000\004" +
    "\076\134\001\002\000\004\044\uffc9\001\002\000\046\003" +
    "\ufff5\005\ufff5\011\ufff5\012\ufff5\013\ufff5\014\ufff5\015\ufff5" +
    "\024\ufff5\026\ufff5\027\ufff5\030\ufff5\031\ufff5\032\ufff5\033" +
    "\ufff5\034\ufff5\037\ufff5\044\ufff5\071\ufff5\001\002\000\046" +
    "\003\ufff2\005\ufff2\011\ufff2\012\ufff2\013\ufff2\014\ufff2\015" +
    "\ufff2\024\ufff2\026\ufff2\027\ufff2\030\ufff2\031\ufff2\032\ufff2" +
    "\033\ufff2\034\ufff2\037\ufff2\044\ufff2\071\ufff2\001\002\000" +
    "\004\044\uffca\001\002\000\004\044\uffcd\001\002\000\004" +
    "\070\051\001\002\000\046\003\ufff3\005\ufff3\011\ufff3\012" +
    "\ufff3\013\ufff3\014\ufff3\015\ufff3\024\ufff3\026\ufff3\027\ufff3" +
    "\030\ufff3\031\ufff3\032\ufff3\033\ufff3\034\ufff3\037\ufff3\044" +
    "\ufff3\071\ufff3\001\002\000\004\044\uffcc\001\002\000\004" +
    "\076\047\001\002\000\004\076\046\001\002\000\046\003" +
    "\ufff4\005\ufff4\011\ufff4\012\ufff4\013\ufff4\014\ufff4\015\ufff4" +
    "\024\ufff4\026\ufff4\027\ufff4\030\ufff4\031\ufff4\032\ufff4\033" +
    "\ufff4\034\ufff4\037\ufff4\044\ufff4\071\ufff4\001\002\000\046" +
    "\003\ufffb\005\ufffb\011\ufffb\012\ufffb\013\ufffb\014\ufffb\015" +
    "\ufffb\024\ufffb\026\ufffb\027\ufffb\030\ufffb\031\ufffb\032\ufffb" +
    "\033\ufffb\034\ufffb\037\ufffb\044\ufffb\071\ufffb\001\002\000" +
    "\004\032\056\001\002\000\042\003\036\005\017\011\043" +
    "\012\034\013\037\014\016\015\040\024\032\026\027\031" +
    "\023\032\025\033\041\034\045\037\012\044\014\071\052" +
    "\001\002\000\050\003\uffce\005\uffce\011\uffce\012\uffce\013" +
    "\uffce\014\uffce\015\uffce\024\uffce\025\uffce\026\uffce\027\uffce" +
    "\030\uffce\031\uffce\032\uffce\033\uffce\034\uffce\037\uffce\044" +
    "\uffce\071\uffce\001\002\000\042\003\036\005\017\011\043" +
    "\012\034\013\037\014\016\015\040\024\032\026\027\031" +
    "\023\032\025\033\041\034\045\037\012\044\014\071\054" +
    "\001\002\000\050\003\uffcf\005\uffcf\011\uffcf\012\uffcf\013" +
    "\uffcf\014\uffcf\015\uffcf\024\uffcf\025\uffcf\026\uffcf\027\uffcf" +
    "\030\uffcf\031\uffcf\032\uffcf\033\uffcf\034\uffcf\037\uffcf\044" +
    "\uffcf\071\uffcf\001\002\000\046\003\ufffe\005\ufffe\011\ufffe" +
    "\012\ufffe\013\ufffe\014\ufffe\015\ufffe\024\ufffe\026\ufffe\027" +
    "\ufffe\030\ufffe\031\ufffe\032\ufffe\033\ufffe\034\ufffe\037\ufffe" +
    "\044\ufffe\071\ufffe\001\002\000\004\066\057\001\002\000" +
    "\026\035\066\036\065\040\061\041\064\042\060\043\063" +
    "\044\073\047\062\064\070\066\067\001\002\000\040\046" +
    "\uffc2\047\uffc2\050\uffc2\051\uffc2\053\uffc2\054\uffc2\055\uffc2" +
    "\056\uffc2\060\uffc2\061\uffc2\062\uffc2\063\uffc2\067\uffc2\075" +
    "\uffc2\076\uffc2\001\002\000\040\046\uffc4\047\uffc4\050\uffc4" +
    "\051\uffc4\053\uffc4\054\uffc4\055\uffc4\056\uffc4\060\uffc4\061" +
    "\uffc4\062\uffc4\063\uffc4\067\uffc4\075\uffc4\076\uffc4\001\002" +
    "\000\026\035\066\036\065\040\061\041\064\042\060\043" +
    "\063\044\073\047\062\064\070\066\067\001\002\000\040" +
    "\046\uffc1\047\uffc1\050\uffc1\051\uffc1\053\uffc1\054\uffc1\055" +
    "\uffc1\056\uffc1\060\uffc1\061\uffc1\062\uffc1\063\uffc1\067\uffc1" +
    "\075\uffc1\076\uffc1\001\002\000\040\046\uffc3\047\uffc3\050" +
    "\uffc3\051\uffc3\053\uffc3\054\uffc3\055\uffc3\056\uffc3\060\uffc3" +
    "\061\uffc3\062\uffc3\063\uffc3\067\uffc3\075\uffc3\076\uffc3\001" +
    "\002\000\040\046\uffbf\047\uffbf\050\uffbf\051\uffbf\053\uffbf" +
    "\054\uffbf\055\uffbf\056\uffbf\060\uffbf\061\uffbf\062\uffbf\063" +
    "\uffbf\067\uffbf\075\uffbf\076\uffbf\001\002\000\040\046\uffc0" +
    "\047\uffc0\050\uffc0\051\uffc0\053\uffc0\054\uffc0\055\uffc0\056" +
    "\uffc0\060\uffc0\061\uffc0\062\uffc0\063\uffc0\067\uffc0\075\uffc0" +
    "\076\uffc0\001\002\000\026\035\066\036\065\040\061\041" +
    "\064\042\060\043\063\044\073\047\062\064\070\066\067" +
    "\001\002\000\026\035\066\036\065\040\061\041\064\042" +
    "\060\043\063\044\073\047\062\064\070\066\067\001\002" +
    "\000\040\046\uffc8\047\uffc8\050\uffc8\051\uffc8\053\uffc8\054" +
    "\uffc8\055\uffc8\056\uffc8\060\uffc8\061\uffc8\062\uffc8\063\uffc8" +
    "\067\uffc8\075\uffc8\076\uffc8\001\002\000\040\046\uffc7\047" +
    "\uffc7\050\uffc7\051\uffc7\053\uffc7\054\uffc7\055\uffc7\056\uffc7" +
    "\060\uffc7\061\uffc7\062\uffc7\063\uffc7\067\uffc7\075\uffc7\076" +
    "\uffc7\001\002\000\040\046\uffc5\047\uffc5\050\uffc5\051\uffc5" +
    "\053\uffc5\054\uffc5\055\uffc5\056\uffc5\060\uffc5\061\uffc5\062" +
    "\uffc5\063\uffc5\067\uffc5\075\uffc5\076\uffc5\001\002\000\034" +
    "\046\107\047\076\050\104\051\105\053\103\054\106\055" +
    "\077\056\102\060\111\061\110\062\112\063\101\067\100" +
    "\001\002\000\040\046\uffc6\047\uffc6\050\uffc6\051\uffc6\053" +
    "\uffc6\054\uffc6\055\uffc6\056\uffc6\060\uffc6\061\uffc6\062\uffc6" +
    "\063\uffc6\067\uffc6\075\uffc6\076\uffc6\001\002\000\026\035" +
    "\066\036\065\040\061\041\064\042\060\043\063\044\073" +
    "\047\062\064\070\066\067\001\002\000\026\035\066\036" +
    "\065\040\061\041\064\042\060\043\063\044\073\047\062" +
    "\064\070\066\067\001\002\000\004\076\125\001\002\000" +
    "\026\035\066\036\065\040\061\041\064\042\060\043\063" +
    "\044\073\047\062\064\070\066\067\001\002\000\026\035" +
    "\066\036\065\040\061\041\064\042\060\043\063\044\073" +
    "\047\062\064\070\066\067\001\002\000\026\035\066\036" +
    "\065\040\061\041\064\042\060\043\063\044\073\047\062" +
    "\064\070\066\067\001\002\000\026\035\066\036\065\040" +
    "\061\041\064\042\060\043\063\044\073\047\062\064\070" +
    "\066\067\001\002\000\026\035\066\036\065\040\061\041" +
    "\064\042\060\043\063\044\073\047\062\064\070\066\067" +
    "\001\002\000\026\035\066\036\065\040\061\041\064\042" +
    "\060\043\063\044\073\047\062\064\070\066\067\001\002" +
    "\000\026\035\066\036\065\040\061\041\064\042\060\043" +
    "\063\044\073\047\062\064\070\066\067\001\002\000\026" +
    "\035\066\036\065\040\061\041\064\042\060\043\063\044" +
    "\073\047\062\064\070\066\067\001\002\000\026\035\066" +
    "\036\065\040\061\041\064\042\060\043\063\044\073\047" +
    "\062\064\070\066\067\001\002\000\026\035\066\036\065" +
    "\040\061\041\064\042\060\043\063\044\073\047\062\064" +
    "\070\066\067\001\002\000\040\046\107\047\076\050\104" +
    "\051\105\053\103\054\106\055\077\056\102\060\111\061" +
    "\110\062\uffb2\063\uffb2\067\uffb2\075\uffb2\076\uffb2\001\002" +
    "\000\040\046\107\047\076\050\104\051\105\053\uffb4\054" +
    "\uffb4\055\uffb4\056\uffb4\060\uffb4\061\uffb4\062\uffb4\063\uffb4" +
    "\067\uffb4\075\uffb4\076\uffb4\001\002\000\040\046\107\047" +
    "\076\050\104\051\105\053\uffb3\054\uffb3\055\uffb3\056\uffb3" +
    "\060\uffb3\061\uffb3\062\uffb3\063\uffb3\067\uffb3\075\uffb3\076" +
    "\uffb3\001\002\000\040\046\uffbd\047\uffbd\050\104\051\105" +
    "\053\uffbd\054\uffbd\055\uffbd\056\uffbd\060\uffbd\061\uffbd\062" +
    "\uffbd\063\uffbd\067\uffbd\075\uffbd\076\uffbd\001\002\000\040" +
    "\046\107\047\076\050\104\051\105\053\uffb7\054\uffb7\055" +
    "\077\056\102\060\111\061\110\062\uffb7\063\uffb7\067\uffb7" +
    "\075\uffb7\076\uffb7\001\002\000\040\046\uffba\047\uffba\050" +
    "\uffba\051\uffba\053\uffba\054\uffba\055\uffba\056\uffba\060\uffba" +
    "\061\uffba\062\uffba\063\uffba\067\uffba\075\uffba\076\uffba\001" +
    "\002\000\040\046\uffbb\047\uffbb\050\uffbb\051\uffbb\053\uffbb" +
    "\054\uffbb\055\uffbb\056\uffbb\060\uffbb\061\uffbb\062\uffbb\063" +
    "\uffbb\067\uffbb\075\uffbb\076\uffbb\001\002\000\040\046\107" +
    "\047\076\050\104\051\105\053\uffb8\054\uffb8\055\077\056" +
    "\102\060\111\061\110\062\uffb8\063\uffb8\067\uffb8\075\uffb8" +
    "\076\uffb8\001\002\000\040\046\107\047\076\050\104\051" +
    "\105\053\uffb5\054\uffb5\055\uffb5\056\uffb5\060\uffb5\061\uffb5" +
    "\062\uffb5\063\uffb5\067\uffb5\075\uffb5\076\uffb5\001\002\000" +
    "\040\046\107\047\076\050\104\051\105\053\103\054\106" +
    "\055\077\056\102\060\111\061\110\062\112\063\uffb1\067" +
    "\uffb1\075\uffb1\076\uffb1\001\002\000\046\003\uffd2\005\uffd2" +
    "\011\uffd2\012\uffd2\013\uffd2\014\uffd2\015\uffd2\024\uffd2\026" +
    "\uffd2\027\uffd2\030\uffd2\031\uffd2\032\uffd2\033\uffd2\034\uffd2" +
    "\037\uffd2\044\uffd2\071\uffd2\001\002\000\040\046\107\047" +
    "\076\050\104\051\105\053\uffb6\054\uffb6\055\uffb6\056\uffb6" +
    "\060\uffb6\061\uffb6\062\uffb6\063\uffb6\067\uffb6\075\uffb6\076" +
    "\uffb6\001\002\000\040\046\uffbc\047\uffbc\050\104\051\105" +
    "\053\uffbc\054\uffbc\055\uffbc\056\uffbc\060\uffbc\061\uffbc\062" +
    "\uffbc\063\uffbc\067\uffbc\075\uffbc\076\uffbc\001\002\000\040" +
    "\046\107\047\076\050\104\051\105\053\103\054\106\055" +
    "\077\056\102\060\111\061\110\062\uffb0\063\uffb0\067\uffb0" +
    "\075\uffb0\076\uffb0\001\002\000\034\046\107\047\076\050" +
    "\104\051\105\053\103\054\106\055\077\056\102\060\111" +
    "\061\110\062\112\063\101\067\132\001\002\000\040\046" +
    "\uffbe\047\uffbe\050\uffbe\051\uffbe\053\uffbe\054\uffbe\055\uffbe" +
    "\056\uffbe\060\uffbe\061\uffbe\062\uffbe\063\uffbe\067\uffbe\075" +
    "\uffbe\076\uffbe\001\002\000\040\046\uffb9\047\uffb9\050\uffb9" +
    "\051\uffb9\053\uffb9\054\uffb9\055\uffb9\056\uffb9\060\uffb9\061" +
    "\uffb9\062\uffb9\063\uffb9\067\uffb9\075\uffb9\076\uffb9\001\002" +
    "\000\046\003\ufffc\005\ufffc\011\ufffc\012\ufffc\013\ufffc\014" +
    "\ufffc\015\ufffc\024\ufffc\026\ufffc\027\ufffc\030\ufffc\031\ufffc" +
    "\032\ufffc\033\ufffc\034\ufffc\037\ufffc\044\ufffc\071\ufffc\001" +
    "\002\000\026\035\066\036\065\040\061\041\064\042\060" +
    "\043\063\044\073\047\062\064\070\066\067\001\002\000" +
    "\034\046\107\047\076\050\104\051\105\053\103\054\106" +
    "\055\077\056\102\060\111\061\110\062\112\063\101\067" +
    "\137\001\002\000\004\070\051\001\002\000\050\003\uffec" +
    "\005\uffec\011\uffec\012\uffec\013\uffec\014\uffec\015\uffec\024" +
    "\uffec\025\141\026\uffec\027\uffec\030\uffec\031\uffec\032\uffec" +
    "\033\uffec\034\uffec\037\uffec\044\uffec\071\uffec\001\002\000" +
    "\006\024\032\070\051\001\002\000\046\003\uffee\005\uffee" +
    "\011\uffee\012\uffee\013\uffee\014\uffee\015\uffee\024\uffee\026" +
    "\uffee\027\uffee\030\uffee\031\uffee\032\uffee\033\uffee\034\uffee" +
    "\037\uffee\044\uffee\071\uffee\001\002\000\046\003\uffed\005" +
    "\uffed\011\uffed\012\uffed\013\uffed\014\uffed\015\uffed\024\uffed" +
    "\026\uffed\027\uffed\030\uffed\031\uffed\032\uffed\033\uffed\034" +
    "\uffed\037\uffed\044\uffed\071\uffed\001\002\000\026\035\066" +
    "\036\065\040\061\041\064\042\060\043\063\044\073\047" +
    "\062\064\070\066\067\001\002\000\034\046\107\047\076" +
    "\050\104\051\105\053\103\054\106\055\077\056\102\060" +
    "\111\061\110\062\112\063\101\067\146\001\002\000\004" +
    "\070\147\001\002\000\010\027\154\030\157\071\152\001" +
    "\002\000\046\003\uffeb\005\uffeb\011\uffeb\012\uffeb\013\uffeb" +
    "\014\uffeb\015\uffeb\024\uffeb\026\uffeb\027\uffeb\030\uffeb\031" +
    "\uffeb\032\uffeb\033\uffeb\034\uffeb\037\uffeb\044\uffeb\071\uffeb" +
    "\001\002\000\004\071\uffe6\001\002\000\046\003\uffe9\005" +
    "\uffe9\011\uffe9\012\uffe9\013\uffe9\014\uffe9\015\uffe9\024\uffe9" +
    "\026\uffe9\027\uffe9\030\uffe9\031\uffe9\032\uffe9\033\uffe9\034" +
    "\uffe9\037\uffe9\044\uffe9\071\uffe9\001\002\000\010\027\154" +
    "\030\157\071\uffe7\001\002\000\026\035\066\036\065\040" +
    "\061\041\064\042\060\043\063\044\073\047\062\064\070" +
    "\066\067\001\002\000\004\071\162\001\002\000\010\027" +
    "\uffe4\030\uffe4\071\uffe4\001\002\000\004\075\160\001\002" +
    "\000\042\003\036\005\017\011\043\012\034\013\037\014" +
    "\016\015\040\024\032\026\027\031\023\032\025\033\041" +
    "\034\045\037\012\044\014\071\uffe0\001\002\000\042\003" +
    "\036\005\017\011\043\012\034\013\037\014\016\015\040" +
    "\024\032\026\027\031\023\032\025\033\041\034\045\037" +
    "\012\044\014\071\uffe1\001\002\000\046\003\uffea\005\uffea" +
    "\011\uffea\012\uffea\013\uffea\014\uffea\015\uffea\024\uffea\026" +
    "\uffea\027\uffea\030\uffea\031\uffea\032\uffea\033\uffea\034\uffea" +
    "\037\uffea\044\uffea\071\uffea\001\002\000\034\046\107\047" +
    "\076\050\104\051\105\053\103\054\106\055\077\056\102" +
    "\060\111\061\110\062\112\063\101\075\164\001\002\000" +
    "\046\003\036\005\017\011\043\012\034\013\037\014\016" +
    "\015\040\024\032\026\027\027\uffe2\030\uffe2\031\023\032" +
    "\025\033\041\034\045\037\012\044\014\071\uffe2\001\002" +
    "\000\046\003\036\005\017\011\043\012\034\013\037\014" +
    "\016\015\040\024\032\026\027\027\uffe3\030\uffe3\031\023" +
    "\032\025\033\041\034\045\037\012\044\014\071\uffe3\001" +
    "\002\000\004\071\uffe8\001\002\000\010\027\uffe5\030\uffe5" +
    "\071\uffe5\001\002\000\026\035\066\036\065\040\061\041" +
    "\064\042\060\043\063\044\073\047\062\064\070\066\067" +
    "\001\002\000\034\046\107\047\076\050\104\051\105\053" +
    "\103\054\106\055\077\056\102\060\111\061\110\062\112" +
    "\063\101\067\172\001\002\000\004\070\051\001\002\000" +
    "\046\003\uffd3\005\uffd3\011\uffd3\012\uffd3\013\uffd3\014\uffd3" +
    "\015\uffd3\024\uffd3\026\uffd3\027\uffd3\030\uffd3\031\uffd3\032" +
    "\uffd3\033\uffd3\034\uffd3\037\uffd3\044\uffd3\071\uffd3\001\002" +
    "\000\014\011\043\012\034\013\037\014\016\015\040\001" +
    "\002\000\004\067\232\001\002\000\004\044\177\001\002" +
    "\000\004\057\200\001\002\000\026\035\066\036\065\040" +
    "\061\041\064\042\060\043\063\044\073\047\062\064\070" +
    "\066\067\001\002\000\034\046\107\047\076\050\104\051" +
    "\105\053\103\054\106\055\077\056\102\060\111\061\110" +
    "\062\112\063\101\076\202\001\002\000\004\044\204\001" +
    "\002\000\004\076\227\001\002\000\006\055\205\060\206" +
    "\001\002\000\012\042\212\043\207\044\213\066\211\001" +
    "\002\000\012\042\212\043\207\044\213\066\211\001\002" +
    "\000\016\046\uffd4\047\uffd4\050\uffd4\051\uffd4\067\uffd4\076" +
    "\uffd4\001\002\000\014\046\221\047\220\050\216\051\217" +
    "\076\uffdc\001\002\000\012\042\212\043\207\044\213\066" +
    "\211\001\002\000\016\046\uffd5\047\uffd5\050\uffd5\051\uffd5" +
    "\067\uffd5\076\uffd5\001\002\000\016\046\uffd6\047\uffd6\050" +
    "\uffd6\051\uffd6\067\uffd6\076\uffd6\001\002\000\014\046\221" +
    "\047\220\050\216\051\217\067\215\001\002\000\016\046" +
    "\uffd7\047\uffd7\050\uffd7\051\uffd7\067\uffd7\076\uffd7\001\002" +
    "\000\012\042\212\043\207\044\213\066\211\001\002\000" +
    "\012\042\212\043\207\044\213\066\211\001\002\000\012" +
    "\042\212\043\207\044\213\066\211\001\002\000\012\042" +
    "\212\043\207\044\213\066\211\001\002\000\016\046\uffdb" +
    "\047\uffdb\050\216\051\217\067\uffdb\076\uffdb\001\002\000" +
    "\016\046\uffda\047\uffda\050\216\051\217\067\uffda\076\uffda" +
    "\001\002\000\016\046\uffd8\047\uffd8\050\uffd8\051\uffd8\067" +
    "\uffd8\076\uffd8\001\002\000\016\046\uffd9\047\uffd9\050\uffd9" +
    "\051\uffd9\067\uffd9\076\uffd9\001\002\000\014\046\221\047" +
    "\220\050\216\051\217\076\uffdd\001\002\000\004\044\230" +
    "\001\002\000\004\045\231\001\002\000\004\067\uffde\001" +
    "\002\000\004\070\051\001\002\000\046\003\uffdf\005\uffdf" +
    "\011\uffdf\012\uffdf\013\uffdf\014\uffdf\015\uffdf\024\uffdf\026" +
    "\uffdf\027\uffdf\030\uffdf\031\uffdf\032\uffdf\033\uffdf\034\uffdf" +
    "\037\uffdf\044\uffdf\071\uffdf\001\002\000\006\057\235\076" +
    "\ufff0\001\002\000\026\035\066\036\065\040\061\041\064" +
    "\042\060\043\063\044\073\047\062\064\070\066\067\001" +
    "\002\000\034\046\107\047\076\050\104\051\105\053\103" +
    "\054\106\055\077\056\102\060\111\061\110\062\112\063" +
    "\101\076\ufff1\001\002\000\004\002\000\001\002\000\004" +
    "\066\345\001\002\000\004\066\342\001\002\000\004\066" +
    "\243\001\002\000\004\067\244\001\002\000\004\070\246" +
    "\001\002\000\046\003\uffa9\005\uffa9\011\uffa9\012\uffa9\013" +
    "\uffa9\014\uffa9\015\uffa9\024\uffa9\026\uffa9\027\uffa9\030\uffa9" +
    "\031\uffa9\032\uffa9\033\uffa9\034\uffa9\037\uffa9\044\uffa9\071" +
    "\uffa9\001\002\000\012\012\253\015\256\044\014\071\255" +
    "\001\002\000\004\076\341\001\002\000\012\012\uffab\015" +
    "\uffab\044\uffab\071\uffab\001\002\000\012\012\uffae\015\uffae" +
    "\044\uffae\071\uffae\001\002\000\004\044\336\001\002\000" +
    "\006\044\uff9a\072\326\001\002\000\012\012\253\015\256" +
    "\044\014\071\325\001\002\000\046\003\uff9c\005\uff9c\011" +
    "\uff9c\012\uff9c\013\uff9c\014\uff9c\015\uff9c\024\uff9c\026\uff9c" +
    "\027\uff9c\030\uff9c\031\uff9c\032\uff9c\033\uff9c\034\uff9c\037" +
    "\uff9c\044\uff9c\071\uff9c\001\002\000\014\017\264\022\263" +
    "\023\262\044\uff9b\072\261\001\002\000\004\076\260\001" +
    "\002\000\012\012\uffac\015\uffac\044\uffac\071\uffac\001\002" +
    "\000\004\073\312\001\002\000\004\057\310\001\002\000" +
    "\004\057\306\001\002\000\004\057\265\001\002\000\014" +
    "\040\266\043\267\044\274\065\273\066\272\001\002\000" +
    "\012\067\uff97\071\uff97\074\uff97\076\uff97\001\002\000\012" +
    "\067\uff96\071\uff96\074\uff96\076\uff96\001\002\000\012\067" +
    "\uff99\071\uff99\074\uff99\076\uff99\001\002\000\004\076\uffa7" +
    "\001\002\000\014\040\266\043\267\044\274\065\273\066" +
    "\272\001\002\000\004\070\275\001\002\000\012\067\uff98" +
    "\071\uff98\074\uff98\076\uff98\001\002\000\004\016\276\001" +
    "\002\000\004\074\277\001\002\000\004\040\300\001\002" +
    "\000\004\074\301\001\002\000\004\040\302\001\002\000" +
    "\004\071\303\001\002\000\012\067\uffa2\071\uffa2\074\uffa2" +
    "\076\uffa2\001\002\000\004\067\305\001\002\000\012\067" +
    "\uff95\071\uff95\074\uff95\076\uff95\001\002\000\014\040\266" +
    "\043\267\044\274\065\273\066\272\001\002\000\004\076" +
    "\uffa6\001\002\000\014\040\266\043\267\044\274\065\273" +
    "\066\272\001\002\000\004\076\uffa5\001\002\000\004\020" +
    "\313\001\002\000\004\057\314\001\002\000\004\070\315" +
    "\001\002\000\014\040\266\043\267\044\274\065\273\066" +
    "\272\001\002\000\006\071\320\074\321\001\002\000\006" +
    "\071\uff9e\074\uff9e\001\002\000\004\076\323\001\002\000" +
    "\014\040\266\043\267\044\274\065\273\066\272\001\002" +
    "\000\006\071\uff9f\074\uff9f\001\002\000\012\012\uffa1\015" +
    "\uffa1\044\uffa1\071\uffa1\001\002\000\012\012\uffaf\015\uffaf" +
    "\044\uffaf\071\uffaf\001\002\000\046\003\uff9d\005\uff9d\011" +
    "\uff9d\012\uff9d\013\uff9d\014\uff9d\015\uff9d\024\uff9d\026\uff9d" +
    "\027\uff9d\030\uff9d\031\uff9d\032\uff9d\033\uff9d\034\uff9d\037" +
    "\uff9d\044\uff9d\071\uff9d\001\002\000\004\073\327\001\002" +
    "\000\004\021\330\001\002\000\004\057\331\001\002\000" +
    "\004\070\332\001\002\000\014\040\266\043\267\044\274" +
    "\065\273\066\272\001\002\000\006\071\334\074\321\001" +
    "\002\000\004\076\335\001\002\000\012\012\uffa0\015\uffa0" +
    "\044\uffa0\071\uffa0\001\002\000\006\057\337\076\uffa3\001" +
    "\002\000\014\040\266\043\267\044\274\065\273\066\272" +
    "\001\002\000\004\076\uffa4\001\002\000\012\012\uffad\015" +
    "\uffad\044\uffad\071\uffad\001\002\000\004\067\343\001\002" +
    "\000\004\070\246\001\002\000\046\003\uffa8\005\uffa8\011" +
    "\uffa8\012\uffa8\013\uffa8\014\uffa8\015\uffa8\024\uffa8\026\uffa8" +
    "\027\uffa8\030\uffa8\031\uffa8\032\uffa8\033\uffa8\034\uffa8\037" +
    "\uffa8\044\uffa8\071\uffa8\001\002\000\004\067\346\001\002" +
    "\000\004\070\246\001\002\000\046\003\uffaa\005\uffaa\011" +
    "\uffaa\012\uffaa\013\uffaa\014\uffaa\015\uffaa\024\uffaa\026\uffaa" +
    "\027\uffaa\030\uffaa\031\uffaa\032\uffaa\033\uffaa\034\uffaa\037" +
    "\uffaa\044\uffaa\071\uffaa\001\002\000\026\035\066\036\065" +
    "\040\061\041\064\042\060\043\063\044\073\047\062\064" +
    "\070\066\067\001\002\000\034\046\107\047\076\050\104" +
    "\051\105\053\103\054\106\055\077\056\102\060\111\061" +
    "\110\062\112\063\101\076\uffef\001\002\000\030\035\066" +
    "\036\065\040\061\041\064\042\060\043\063\044\073\047" +
    "\062\064\070\066\067\067\353\001\002\000\004\076\357" +
    "\001\002\000\034\046\107\047\076\050\104\051\105\053" +
    "\103\054\106\055\077\056\102\060\111\061\110\062\112" +
    "\063\101\067\355\001\002\000\004\076\356\001\002\000" +
    "\046\003\uffd1\005\uffd1\011\uffd1\012\uffd1\013\uffd1\014\uffd1" +
    "\015\uffd1\024\uffd1\026\uffd1\027\uffd1\030\uffd1\031\uffd1\032" +
    "\uffd1\033\uffd1\034\uffd1\037\uffd1\044\uffd1\071\uffd1\001\002" +
    "\000\046\003\uffd0\005\uffd0\011\uffd0\012\uffd0\013\uffd0\014" +
    "\uffd0\015\uffd0\024\uffd0\026\uffd0\027\uffd0\030\uffd0\031\uffd0" +
    "\032\uffd0\033\uffd0\034\uffd0\037\uffd0\044\uffd0\071\uffd0\001" +
    "\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\356\000\004\002\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\032\003\020\005\027\006\032\007\041\010" +
    "\025\011\017\017\030\021\014\022\023\023\034\024\043" +
    "\034\021\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\030\005\054\006\032\007" +
    "\041\010\025\011\017\017\030\021\014\022\023\023\034" +
    "\024\043\034\021\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\004\047\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\032\003\052" +
    "\005\027\006\032\007\041\010\025\011\017\017\030\021" +
    "\014\022\023\023\034\024\043\034\021\001\001\000\002" +
    "\001\001\000\030\005\054\006\032\007\041\010\025\011" +
    "\017\017\030\021\014\022\023\023\034\024\043\034\021" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\026\073\027\070\030\071\031\074\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\026\132\027" +
    "\070\030\071\031\074\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\026" +
    "\130\027\070\030\071\031\074\001\001\000\012\026\127" +
    "\027\070\030\071\031\074\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\026\126\027\070\030\071\031\074\001" +
    "\001\000\012\026\125\027\070\030\071\031\074\001\001" +
    "\000\002\001\001\000\012\026\123\027\070\030\071\031" +
    "\074\001\001\000\012\026\122\027\070\030\071\031\074" +
    "\001\001\000\012\026\121\027\070\030\071\031\074\001" +
    "\001\000\012\026\120\027\070\030\071\031\074\001\001" +
    "\000\012\026\117\027\070\030\071\031\074\001\001\000" +
    "\012\026\116\027\070\030\071\031\074\001\001\000\012" +
    "\026\115\027\070\030\071\031\074\001\001\000\012\026" +
    "\114\027\070\030\071\031\074\001\001\000\012\026\113" +
    "\027\070\030\071\031\074\001\001\000\012\026\112\027" +
    "\070\030\071\031\074\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\026\135\027\070\030\071\031\074\001\001" +
    "\000\002\001\001\000\004\004\137\001\001\000\002\001" +
    "\001\000\006\004\142\010\141\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\026\144\027\070\030\071\031" +
    "\074\001\001\000\002\001\001\000\004\015\147\001\001" +
    "\000\012\012\150\013\152\014\155\016\154\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\012\165\014\166\001\001\000\012\026\162\027\070\030" +
    "\071\031\074\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\032\003\160\005\027\006\032\007" +
    "\041\010\025\011\017\017\030\021\014\022\023\023\034" +
    "\024\043\034\021\001\001\000\030\005\054\006\032\007" +
    "\041\010\025\011\017\017\030\021\014\022\023\023\034" +
    "\024\043\034\021\001\001\000\002\001\001\000\002\001" +
    "\001\000\032\003\164\005\027\006\032\007\041\010\025" +
    "\011\017\017\030\021\014\022\023\023\034\024\043\034" +
    "\021\001\001\000\030\005\054\006\032\007\041\010\025" +
    "\011\017\017\030\021\014\022\023\023\034\024\043\034" +
    "\021\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\026\170\027\070\030\071\031\074\001\001\000\002\001" +
    "\001\000\004\004\172\001\001\000\002\001\001\000\006" +
    "\020\174\034\175\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\026\200\027\070\030\071" +
    "\031\074\001\001\000\002\001\001\000\004\032\202\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\033\225" +
    "\001\001\000\004\033\207\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\033\213\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\033\224\001\001\000\004\033\223\001\001\000\004" +
    "\033\222\001\001\000\004\033\221\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\004\232\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\026\235\027\070\030\071\031" +
    "\074\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\025\244\001\001\000\002\001\001\000\016" +
    "\024\256\037\253\040\250\041\251\042\246\044\247\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\014\024\256\040" +
    "\323\041\251\042\246\044\247\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\035\270\036\267\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\035\303\036\267\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\035\306\036\267\001\001\000\002\001\001\000" +
    "\006\035\310\036\267\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\035" +
    "\316\036\267\043\315\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\035\321\036\267\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\035\316\036\267" +
    "\043\332\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\035\337\036\267" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\025\343\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\025\346\001\001\000\002\001\001\000" +
    "\012\026\350\027\070\030\071\031\074\001\001\000\002" +
    "\001\001\000\012\026\353\027\070\030\071\031\074\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    ArrayList<Response> errorsS = new ArrayList<>();
    public boolean isThereGraphBar = false;
    public boolean isThereGraphPie = false;
    TableSym tableSym;
    public Instruction mainMethod;
    EnvGraph envG;
    public Parser(Scanner s, TableSym tableSym, EnvGraph envG) {
        super(s);
        this.tableSym = tableSym;
        this.envG = envG;
    }
    public void syntax_error(Symbol sym) {
        errorsS.add(new Response(new ErrorS(sym.left,sym.right,sym.value,TOK.terminalNames[sym.sym])));
    }
    public void unrecovered_syntax_error(Symbol sym) throws java.lang.Exception {
        errorsS.add(new Response("Error Sintáctico sin recuperar."));
    }
    public String getErrors() {
        return errorsS.stream().map(Object::toString).collect(Collectors.joining("\n-> "));
    }
    public boolean isSuccessExecution() {
        return !(errorsS.size() > 0);
    }

    public void barGraph() {
        try {
            barGraph(
                envG.getArrDataSym("valores"),
                envG.getArrDataSym("ejex"),
                envG.getDataSym("titulo").dataS,
                envG.getDataSym("titulox").dataS,
                envG.getDataSym("tituloy").dataS
            );
        } catch(Exception e) {
            e.printStackTrace();
        }
    }

    private void barGraph(ArrayList<DataSym> heights, ArrayList<DataSym> labels, String title, String xTitle, String yTitle) {
        SwingUtilities.invokeLater(() -> {
            JFrame frame = new JFrame("Gráfica de Barras");
            frame.setSize(600, 400);

            JPanel panel = new JPanel(new BorderLayout());

            BarGraph grafica = new BarGraph(heights, labels, title, xTitle, yTitle);
            panel.add(grafica);

            frame.add(panel);
            frame.setVisible(true);
        });
    }

    public void pieChart() {
        try {
            pieChart(
                envG.getArrDataSym("valores"),
                envG.getArrDataSym("ejex"),
                envG.getDataSym("titulo").dataS
            );
        } catch(Exception e) {
            e.printStackTrace();
        }
    }

    private void pieChart(ArrayList<DataSym> data, ArrayList<DataSym> titles, String title) {
        SwingUtilities.invokeLater(() -> {
            JFrame frame = new JFrame("Gráfico de Pie Personalizado");
            frame.setSize(600, 400);

            PieChart grafico = new PieChart(data, titles, title);
            frame.add(grafico);

            frame.setVisible(true);
        });
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INIT EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Instruction start_val = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INIT ::= RW_void RW_main TK_lpar TK_rpar TK_lbrc INSTRUCTIONS TK_rbrc 
            {
              Instruction RESULT =null;
		int insleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int insright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArrayList<Instruction> ins = (ArrayList<Instruction>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		mainMethod = new MainMethod(ins); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INIT",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INIT ::= RW_void RW_main TK_lpar TK_rpar TK_lbrc TK_rbrc 
            {
              Instruction RESULT =null;
		mainMethod = new MainMethod(null);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INIT",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INSTRUCTIONS ::= INSTRUCTIONS INSTRUCTION 
            {
              ArrayList<Instruction> RESULT =null;
		int insleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int insright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArrayList<Instruction> ins = (ArrayList<Instruction>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction i = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = ins; RESULT.add(i);               
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTIONS",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INSTRUCTIONS ::= INSTRUCTION 
            {
              ArrayList<Instruction> RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction i = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new ArrayList<>(Arrays.asList(i));
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTIONS",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // INSTRUCTION ::= DECLID TK_semicolon 
            {
              Instruction RESULT =null;
		int insleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int insright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Instruction ins = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = ins;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // INSTRUCTION ::= REASIGN TK_semicolon 
            {
              Instruction RESULT =null;
		int insleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int insright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Instruction ins = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = ins;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // INSTRUCTION ::= IFSTRUCT 
            {
              Instruction RESULT =null;
		int insleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int insright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction ins = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = ins;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // INSTRUCTION ::= SWITCHSTRUCT 
            {
              Instruction RESULT =null;
		int insleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int insright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction ins = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = ins;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // INSTRUCTION ::= LOOPFOR 
            {
              Instruction RESULT =null;
		int insleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int insright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction ins = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = ins;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // INSTRUCTION ::= LOOPWHILE 
            {
              Instruction RESULT =null;
		int insleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int insright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction ins = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = ins;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // INSTRUCTION ::= LOOPDOWHILE 
            {
              Instruction RESULT =null;
		int insleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int insright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction ins = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = ins;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // INSTRUCTION ::= PRINT 
            {
              Instruction RESULT =null;
		int insleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int insright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction ins = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = ins;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // INSTRUCTION ::= RW_break TK_semicolon 
            {
              Instruction RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // INSTRUCTION ::= DECFUNC 
            {
              Instruction RESULT =null;
		int insleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int insright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction ins = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Empty();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // INSTRUCTION ::= error 
            {
              Instruction RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // DECLID ::= TYPE TK_id TK_equal EXP 
            {
              Instruction RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression exp = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new InitID(id.toLowerCase(), exp); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLID",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // DECLID ::= TYPE TK_id 
            {
              Instruction RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new InitID(id.toLowerCase(), null);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLID",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // REASIGN ::= TK_id TK_equal EXP 
            {
              Instruction RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression exp = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new InitID(id.toLowerCase(), exp);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("REASIGN",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // IFSTRUCT ::= RW_if TK_lpar EXP TK_rpar ENV RW_else IFSTRUCT 
            {
              Instruction RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Expression exp = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int insleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int insright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ArrayList<Instruction> ins = (ArrayList<Instruction>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruction b = (Instruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new If(exp, ins, b);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IFSTRUCT",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // IFSTRUCT ::= RW_if TK_lpar EXP TK_rpar ENV RW_else ENV 
            {
              Instruction RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Expression exp = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int insleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int insright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ArrayList<Instruction> ins = (ArrayList<Instruction>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrayList<Instruction> b = (ArrayList<Instruction>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new If(exp, ins, b);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IFSTRUCT",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // IFSTRUCT ::= RW_if TK_lpar EXP TK_rpar ENV 
            {
              Instruction RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression exp = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int insleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int insright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrayList<Instruction> ins = (ArrayList<Instruction>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new If(exp, ins);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IFSTRUCT",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // SWITCHSTRUCT ::= RW_switch TK_lpar EXP TK_rpar ENVS 
            {
              Instruction RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression exp = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Object[] b = (Object[])((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new SwitchCase(exp, (ArrayList<Case>) b[0], (ArrayList<Instruction>) b[1]);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SWITCHSTRUCT",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // ENVS ::= TK_lbrc CASESDEFAULT TK_rbrc 
            {
              Object[] RESULT =null;
		int cdleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cdright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object[] cd = (Object[])((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = cd;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ENVS",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // ENVS ::= TK_lbrc TK_rbrc 
            {
              Object[] RESULT =null;
		RESULT = new Object[] {null, null};
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ENVS",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // CASESDEFAULT ::= CASES DEFAULT 
            {
              Object[] RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArrayList<Case> c = (ArrayList<Case>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrayList<Instruction> d = (ArrayList<Instruction>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Object[] {c,    d};   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CASESDEFAULT",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // CASESDEFAULT ::= CASES 
            {
              Object[] RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrayList<Case> c = (ArrayList<Case>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Object[] {c,    null};
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CASESDEFAULT",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // CASESDEFAULT ::= DEFAULT 
            {
              Object[] RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrayList<Instruction> d = (ArrayList<Instruction>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Object[] {null, d};   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CASESDEFAULT",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // CASES ::= CASES CASE 
            {
              ArrayList<Case> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArrayList<Case> l = (ArrayList<Case>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Case c = (Case)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = l; RESULT.add(c);                 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CASES",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // CASES ::= CASE 
            {
              ArrayList<Case> RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Case c = (Case)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new ArrayList<>(Arrays.asList(c));
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CASES",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // CASE ::= RW_case EXP TK_colon INSTRUCTIONS 
            {
              Case RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression exp = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrayList<Instruction> b = (ArrayList<Instruction>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Case(exp, b);                
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CASE",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // CASE ::= RW_case EXP TK_colon 
            {
              Case RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expression exp = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new Case(exp, new ArrayList<>());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CASE",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // DEFAULT ::= RW_default TK_colon INSTRUCTIONS 
            {
              ArrayList<Instruction> RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrayList<Instruction> b = (ArrayList<Instruction>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = b;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DEFAULT",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // DEFAULT ::= RW_default TK_colon 
            {
              ArrayList<Instruction> RESULT =null;
		RESULT = new ArrayList<>();
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DEFAULT",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // LOOPFOR ::= RW_for TK_lpar ARGSFOR TK_rpar ENV 
            {
              Instruction RESULT =null;
		int argsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String[] args = (String[])((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int envleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int envright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrayList<Instruction> env = (ArrayList<Instruction>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new For(args[0], args[1], args[2], env);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LOOPFOR",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // ARGSFOR ::= TYPE TK_id TK_equal EXP TK_semicolon EXPF TK_semicolon TK_id TK_inc 
            {
              String[] RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int startleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int startright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Expression start = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int limitleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int limitright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String limit = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		RESULT = new String[] {id, start.convert(), limit};
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARGSFOR",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // EXPF ::= TK_id TK_lessequ EXPFOR 
            {
              String RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String exp = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = exp + " + 1";
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPF",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // EXPF ::= TK_id TK_less EXPFOR 
            {
              String RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String exp = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = exp         ;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPF",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // EXPFOR ::= EXPFOR TK_plus EXPFOR 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = e1 + " " + s + " " + e2;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPFOR",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // EXPFOR ::= EXPFOR TK_minus EXPFOR 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = e1 + " " + s + " " + e2;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPFOR",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // EXPFOR ::= EXPFOR TK_mult EXPFOR 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = e1 + " " + s + " " + e2;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPFOR",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // EXPFOR ::= EXPFOR TK_div EXPFOR 
            {
              String RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String e1 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String e2 = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = e1 + " " + s + " " + e2;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPFOR",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // EXPFOR ::= TK_lpar EXPFOR TK_rpar 
            {
              String RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String exp = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = "(" + exp + ")";        
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPFOR",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // EXPFOR ::= TK_id 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = id.toLowerCase();       
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPFOR",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // EXPFOR ::= TK_int 
            {
              String RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = p;                      
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPFOR",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // EXPFOR ::= TK_double 
            {
              String RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = p;                      
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPFOR",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // LOOPWHILE ::= RW_while TK_lpar EXP TK_rpar ENV 
            {
              Instruction RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression exp = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int envleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int envright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		ArrayList<Instruction> env = (ArrayList<Instruction>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new While(exp, env);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LOOPWHILE",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // LOOPDOWHILE ::= RW_do ENV RW_while TK_lpar EXP TK_rpar TK_semicolon 
            {
              Instruction RESULT =null;
		int envleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int envright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		ArrayList<Instruction> env = (ArrayList<Instruction>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression exp = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		RESULT = new DoWhile(env, exp);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LOOPDOWHILE",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // PRINT ::= RW_print TK_lpar EXP TK_rpar TK_semicolon 
            {
              Instruction RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression exp = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		RESULT = new Print(exp); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PRINT",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // PRINT ::= RW_print TK_lpar TK_rpar TK_semicolon 
            {
              Instruction RESULT =null;
		RESULT = new Print(null);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PRINT",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // ENV ::= TK_lbrc INSTRUCTIONS TK_rbrc 
            {
              ArrayList<Instruction> RESULT =null;
		int insleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int insright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		ArrayList<Instruction> ins = (ArrayList<Instruction>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = ins; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ENV",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // ENV ::= TK_lbrc TK_rbrc 
            {
              ArrayList<Instruction> RESULT =null;
		RESULT = null;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ENV",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // TYPE ::= RW_string 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TYPE",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // TYPE ::= RW_int 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TYPE",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // TYPE ::= RW_bool 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TYPE",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // TYPE ::= RW_char 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TYPE",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // TYPE ::= RW_double 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TYPE",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // EXP ::= ARITHMETICS 
            {
              Expression RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression exp = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = exp;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // EXP ::= RELATIONALS 
            {
              Expression RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression exp = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = exp;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // EXP ::= LOGICS 
            {
              Expression RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression exp = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = exp;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // EXP ::= TK_id 
            {
              Expression RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Expression(id.toLowerCase());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // EXP ::= TK_string 
            {
              Expression RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Expression(p);               
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // EXP ::= TK_char 
            {
              Expression RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Expression(p);               
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // EXP ::= TK_int 
            {
              Expression RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Expression(p);               
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // EXP ::= TK_double 
            {
              Expression RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Expression(p);               
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // EXP ::= RW_true 
            {
              Expression RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Expression("True");          
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // EXP ::= RW_false 
            {
              Expression RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String p = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Expression("False");         
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // EXP ::= TK_lpar EXP TK_rpar 
            {
              Expression RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expression exp = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = new Expression(exp, null, null); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // ARITHMETICS ::= EXP TK_plus EXP 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Expression(e1, s, e2);  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARITHMETICS",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // ARITHMETICS ::= EXP TK_minus EXP 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Expression(e1, s, e2);  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARITHMETICS",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // ARITHMETICS ::= EXP TK_mult EXP 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Expression(e1, s, e2);  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARITHMETICS",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // ARITHMETICS ::= EXP TK_div EXP 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Expression(e1, s, e2);  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARITHMETICS",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // ARITHMETICS ::= TK_minus EXP 
            {
              Expression RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Expression(null, s, e2);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARITHMETICS",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // RELATIONALS ::= EXP TK_equequ EXP 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Expression(e1, s, e2);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RELATIONALS",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // RELATIONALS ::= EXP TK_notequ EXP 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Expression(e1, s, e2);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RELATIONALS",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // RELATIONALS ::= EXP TK_lessequ EXP 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Expression(e1, s, e2);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RELATIONALS",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // RELATIONALS ::= EXP TK_moreequ EXP 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Expression(e1, s, e2);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RELATIONALS",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // RELATIONALS ::= EXP TK_less EXP 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Expression(e1, s, e2);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RELATIONALS",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // RELATIONALS ::= EXP TK_more EXP 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Expression(e1, s, e2);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RELATIONALS",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // LOGICS ::= EXP TK_and EXP 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Expression(e1, "and", e2);  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LOGICS",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // LOGICS ::= EXP TK_or EXP 
            {
              Expression RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e1 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Expression(e1, "or",  e2);  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LOGICS",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // LOGICS ::= TK_not EXP 
            {
              Expression RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new Expression(null, "not", e2);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LOGICS",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // INSTRUCTIONSEST ::= INSTRUCTIONSEST INSTRUCTIONEST 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTIONSEST",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // INSTRUCTIONSEST ::= INSTRUCTIONEST 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTIONSEST",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // INSTRUCTIONEST ::= DECLIDEST TK_semicolon 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTIONEST",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // INSTRUCTIONEST ::= REASIGN TK_semicolon 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTIONEST",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // INSTRUCTIONEST ::= ARRAYSDEF 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTIONEST",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // DECFUNC ::= RW_void RW_defG TK_lpar TK_rpar ENVEST 
            {
              Instruction RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECFUNC",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // DECFUNC ::= RW_void RW_barG TK_lpar TK_rpar ENVEST 
            {
              Instruction RESULT =null;
		isThereGraphBar = true;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECFUNC",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // DECFUNC ::= RW_void RW_pieG TK_lpar TK_rpar ENVEST 
            {
              Instruction RESULT =null;
		isThereGraphPie = true;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECFUNC",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // DECLIDEST ::= RW_string RW_title TK_equal EXPEST 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int dtsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dtsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		DataSym dts = (DataSym)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		envG.saveDataSym(id.toLowerCase(), dts);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLIDEST",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // DECLIDEST ::= RW_string RW_titleX TK_equal EXPEST 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int dtsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dtsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		DataSym dts = (DataSym)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		envG.saveDataSym(id.toLowerCase(), dts);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLIDEST",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // DECLIDEST ::= RW_string RW_titleY TK_equal EXPEST 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int dtsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dtsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		DataSym dts = (DataSym)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		envG.saveDataSym(id.toLowerCase(), dts);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLIDEST",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // DECLIDEST ::= TYPEEST TK_id TK_equal EXPEST 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int dtsleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dtsright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		DataSym dts = (DataSym)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		envG.saveDataSym(id.toLowerCase(), dts);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLIDEST",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // DECLIDEST ::= TYPEEST TK_id 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		envG.saveDataSym(id.toLowerCase(), null);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLIDEST",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // SYMBSTAT ::= TK_dollar TK_lbrc RW_newVal TK_comma TK_string TK_comma TK_string TK_rbrc 
            {
              DataSym RESULT =null;
		int fnleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int fnright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String fn = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int attleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int attright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String att = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = tableSym.getValue(fn.substring(1, fn.length() - 1), att.toLowerCase().substring(1, att.length() - 1));
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SYMBSTAT",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // ARRAYSDEF ::= RW_string TK_lbrk TK_rbrk RW_xAxis TK_equal TK_lbrc VALUES TK_rbrc TK_semicolon 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int valuesleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int valuesright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ArrayList<DataSym> values = (ArrayList<DataSym>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		envG.saveArrDataSym(id.toLowerCase(), values);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARRAYSDEF",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // ARRAYSDEF ::= RW_double TK_lbrk TK_rbrk RW_values TK_equal TK_lbrc VALUES TK_rbrc TK_semicolon 
            {
              String RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int valuesleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int valuesright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ArrayList<DataSym> values = (ArrayList<DataSym>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		envG.saveArrDataSym(id.toLowerCase(), values);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARRAYSDEF",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // VALUES ::= VALUES TK_comma EXPEST 
            {
              ArrayList<DataSym> RESULT =null;
		int listleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int listright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		ArrayList<DataSym> list = (ArrayList<DataSym>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		DataSym exp = (DataSym)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = list; RESULT.add(exp);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VALUES",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // VALUES ::= EXPEST 
            {
              ArrayList<DataSym> RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		DataSym exp = (DataSym)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new ArrayList<>(Arrays.asList(exp));
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VALUES",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // ENVEST ::= TK_lbrc INSTRUCTIONSEST TK_rbrc 
            {
              Instruction RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ENVEST",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // ENVEST ::= TK_lbrc TK_rbrc 
            {
              Instruction RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ENVEST",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // TYPEEST ::= RW_string 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TYPEEST",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // TYPEEST ::= RW_double 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TYPEEST",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // EXPEST ::= SYMBSTAT 
            {
              DataSym RESULT =null;
		int symleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int symright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		DataSym sym = (DataSym)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = sym;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPEST",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // EXPEST ::= TK_id 
            {
              DataSym RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = envG.getDataSym(id.toLowerCase());
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPEST",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // EXPEST ::= TK_string 
            {
              DataSym RESULT =null;
		int strleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int strright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String str = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new DataSym(true, str.substring(1, str.length() - 1));
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPEST",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // EXPEST ::= TK_double 
            {
              DataSym RESULT =null;
		int dblleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int dblright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String dbl = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		RESULT = new DataSym(false, Double.parseDouble(dbl));
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPEST",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // EXPEST ::= TK_lpar EXPEST TK_rpar 
            {
              DataSym RESULT =null;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		DataSym exp = (DataSym)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = exp;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPEST",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
