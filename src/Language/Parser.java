
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Language;

import java.util.ArrayList;
import java.util.stream.Collectors;
import java_cup.runtime.*;
import Components.Response;
import Components.ErrorS;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return TOK.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\105\000\002\002\004\000\002\002\011\000\002\002" +
    "\010\000\002\003\004\000\002\003\003\000\002\023\004" +
    "\000\002\023\004\000\002\023\003\000\002\023\003\000" +
    "\002\023\003\000\002\023\003\000\002\023\004\000\002" +
    "\023\003\000\002\010\006\000\002\010\004\000\002\024" +
    "\005\000\002\011\011\000\002\011\011\000\002\011\007" +
    "\000\002\012\007\000\002\013\005\000\002\013\004\000" +
    "\002\014\004\000\002\014\003\000\002\014\003\000\002" +
    "\015\004\000\002\015\003\000\002\016\006\000\002\016" +
    "\006\000\002\016\005\000\002\017\005\000\002\017\005" +
    "\000\002\017\004\000\002\020\007\000\002\021\013\000" +
    "\002\022\007\000\002\022\006\000\002\026\005\000\002" +
    "\026\004\000\002\025\003\000\002\025\003\000\002\025" +
    "\003\000\002\025\003\000\002\025\003\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\004\003\000" +
    "\002\004\003\000\002\004\003\000\002\004\003\000\002" +
    "\004\003\000\002\004\003\000\002\004\003\000\002\004" +
    "\005\000\002\005\005\000\002\005\005\000\002\005\005" +
    "\000\002\005\005\000\002\005\004\000\002\006\005\000" +
    "\002\006\005\000\002\006\005\000\002\006\005\000\002" +
    "\006\005\000\002\006\005\000\002\007\005\000\002\007" +
    "\005\000\002\007\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\205\000\004\005\005\001\002\000\004\002\207\001" +
    "\002\000\004\004\006\001\002\000\004\054\007\001\002" +
    "\000\004\055\010\001\002\000\004\056\011\001\002\000" +
    "\034\003\031\006\035\007\030\010\033\011\015\012\034" +
    "\013\025\015\024\020\021\023\037\026\012\033\014\057" +
    "\013\001\002\000\004\054\201\001\002\000\004\002\uffff" +
    "\001\002\000\004\046\177\001\002\000\004\033\uffd8\001" +
    "\002\000\040\003\ufff9\006\ufff9\007\ufff9\010\ufff9\011\ufff9" +
    "\012\ufff9\013\ufff9\015\ufff9\016\ufff9\017\ufff9\020\ufff9\023" +
    "\ufff9\026\ufff9\033\ufff9\057\ufff9\001\002\000\034\003\031" +
    "\006\035\007\030\010\033\011\015\012\034\013\025\015" +
    "\024\020\021\023\037\026\012\033\014\057\176\001\002" +
    "\000\004\033\173\001\002\000\004\054\156\001\002\000" +
    "\040\003\ufffa\006\ufffa\007\ufffa\010\ufffa\011\ufffa\012\ufffa" +
    "\013\ufffa\015\ufffa\016\ufffa\017\ufffa\020\ufffa\023\ufffa\026" +
    "\ufffa\033\ufffa\057\ufffa\001\002\000\040\003\ufffd\006\ufffd" +
    "\007\ufffd\010\ufffd\011\ufffd\012\ufffd\013\ufffd\015\ufffd\016" +
    "\ufffd\017\ufffd\020\ufffd\023\ufffd\026\ufffd\033\ufffd\057\ufffd" +
    "\001\002\000\004\054\130\001\002\000\004\054\043\001" +
    "\002\000\040\003\ufff8\006\ufff8\007\ufff8\010\ufff8\011\ufff8" +
    "\012\ufff8\013\ufff8\015\ufff8\016\ufff8\017\ufff8\020\ufff8\023" +
    "\ufff8\026\ufff8\033\ufff8\057\ufff8\001\002\000\004\061\042" +
    "\001\002\000\004\033\uffd6\001\002\000\040\003\ufff5\006" +
    "\ufff5\007\ufff5\010\ufff5\011\ufff5\012\ufff5\013\ufff5\015\ufff5" +
    "\016\ufff5\017\ufff5\020\ufff5\023\ufff5\026\ufff5\033\ufff5\057" +
    "\ufff5\001\002\000\040\003\ufff7\006\ufff7\007\ufff7\010\ufff7" +
    "\011\ufff7\012\ufff7\013\ufff7\015\ufff7\016\ufff7\017\ufff7\020" +
    "\ufff7\023\ufff7\026\ufff7\033\ufff7\057\ufff7\001\002\000\004" +
    "\033\uffd7\001\002\000\004\033\uffda\001\002\000\004\033" +
    "\uffd9\001\002\000\004\061\041\001\002\000\004\061\040" +
    "\001\002\000\040\003\ufff6\006\ufff6\007\ufff6\010\ufff6\011" +
    "\ufff6\012\ufff6\013\ufff6\015\ufff6\016\ufff6\017\ufff6\020\ufff6" +
    "\023\ufff6\026\ufff6\033\ufff6\057\ufff6\001\002\000\040\003" +
    "\ufffb\006\ufffb\007\ufffb\010\ufffb\011\ufffb\012\ufffb\013\ufffb" +
    "\015\ufffb\016\ufffb\017\ufffb\020\ufffb\023\ufffb\026\ufffb\033" +
    "\ufffb\057\ufffb\001\002\000\040\003\ufffc\006\ufffc\007\ufffc" +
    "\010\ufffc\011\ufffc\012\ufffc\013\ufffc\015\ufffc\016\ufffc\017" +
    "\ufffc\020\ufffc\023\ufffc\026\ufffc\033\ufffc\057\ufffc\001\002" +
    "\000\026\024\052\025\051\027\046\030\050\031\044\032" +
    "\047\033\057\036\045\053\054\054\053\001\002\000\040" +
    "\035\uffcf\036\uffcf\037\uffcf\040\uffcf\042\uffcf\043\uffcf\044" +
    "\uffcf\045\uffcf\047\uffcf\050\uffcf\051\uffcf\052\uffcf\055\uffcf" +
    "\060\uffcf\061\uffcf\001\002\000\026\024\052\025\051\027" +
    "\046\030\050\031\044\032\047\033\057\036\045\053\054" +
    "\054\053\001\002\000\040\035\uffd1\036\uffd1\037\uffd1\040" +
    "\uffd1\042\uffd1\043\uffd1\044\uffd1\045\uffd1\047\uffd1\050\uffd1" +
    "\051\uffd1\052\uffd1\055\uffd1\060\uffd1\061\uffd1\001\002\000" +
    "\040\035\uffce\036\uffce\037\uffce\040\uffce\042\uffce\043\uffce" +
    "\044\uffce\045\uffce\047\uffce\050\uffce\051\uffce\052\uffce\055" +
    "\uffce\060\uffce\061\uffce\001\002\000\040\035\uffd0\036\uffd0" +
    "\037\uffd0\040\uffd0\042\uffd0\043\uffd0\044\uffd0\045\uffd0\047" +
    "\uffd0\050\uffd0\051\uffd0\052\uffd0\055\uffd0\060\uffd0\061\uffd0" +
    "\001\002\000\040\035\uffcc\036\uffcc\037\uffcc\040\uffcc\042" +
    "\uffcc\043\uffcc\044\uffcc\045\uffcc\047\uffcc\050\uffcc\051\uffcc" +
    "\052\uffcc\055\uffcc\060\uffcc\061\uffcc\001\002\000\040\035" +
    "\uffcd\036\uffcd\037\uffcd\040\uffcd\042\uffcd\043\uffcd\044\uffcd" +
    "\045\uffcd\047\uffcd\050\uffcd\051\uffcd\052\uffcd\055\uffcd\060" +
    "\uffcd\061\uffcd\001\002\000\026\024\052\025\051\027\046" +
    "\030\050\031\044\032\047\033\057\036\045\053\054\054" +
    "\053\001\002\000\026\024\052\025\051\027\046\030\050" +
    "\031\044\032\047\033\057\036\045\053\054\054\053\001" +
    "\002\000\040\035\uffd5\036\uffd5\037\uffd5\040\uffd5\042\uffd5" +
    "\043\uffd5\044\uffd5\045\uffd5\047\uffd5\050\uffd5\051\uffd5\052" +
    "\uffd5\055\uffd5\060\uffd5\061\uffd5\001\002\000\040\035\uffd4" +
    "\036\uffd4\037\uffd4\040\uffd4\042\uffd4\043\uffd4\044\uffd4\045" +
    "\uffd4\047\uffd4\050\uffd4\051\uffd4\052\uffd4\055\uffd4\060\uffd4" +
    "\061\uffd4\001\002\000\040\035\uffd2\036\uffd2\037\uffd2\040" +
    "\uffd2\042\uffd2\043\uffd2\044\uffd2\045\uffd2\047\uffd2\050\uffd2" +
    "\051\uffd2\052\uffd2\055\uffd2\060\uffd2\061\uffd2\001\002\000" +
    "\034\035\073\036\063\037\071\040\070\042\067\043\072" +
    "\044\062\045\066\047\076\050\074\051\075\052\065\055" +
    "\064\001\002\000\040\035\uffd3\036\uffd3\037\uffd3\040\uffd3" +
    "\042\uffd3\043\uffd3\044\uffd3\045\uffd3\047\uffd3\050\uffd3\051" +
    "\uffd3\052\uffd3\055\uffd3\060\uffd3\061\uffd3\001\002\000\026" +
    "\024\052\025\051\027\046\030\050\031\044\032\047\033" +
    "\057\036\045\053\054\054\053\001\002\000\026\024\052" +
    "\025\051\027\046\030\050\031\044\032\047\033\057\036" +
    "\045\053\054\054\053\001\002\000\004\056\111\001\002" +
    "\000\026\024\052\025\051\027\046\030\050\031\044\032" +
    "\047\033\057\036\045\053\054\054\053\001\002\000\026" +
    "\024\052\025\051\027\046\030\050\031\044\032\047\033" +
    "\057\036\045\053\054\054\053\001\002\000\026\024\052" +
    "\025\051\027\046\030\050\031\044\032\047\033\057\036" +
    "\045\053\054\054\053\001\002\000\026\024\052\025\051" +
    "\027\046\030\050\031\044\032\047\033\057\036\045\053" +
    "\054\054\053\001\002\000\026\024\052\025\051\027\046" +
    "\030\050\031\044\032\047\033\057\036\045\053\054\054" +
    "\053\001\002\000\026\024\052\025\051\027\046\030\050" +
    "\031\044\032\047\033\057\036\045\053\054\054\053\001" +
    "\002\000\026\024\052\025\051\027\046\030\050\031\044" +
    "\032\047\033\057\036\045\053\054\054\053\001\002\000" +
    "\026\024\052\025\051\027\046\030\050\031\044\032\047" +
    "\033\057\036\045\053\054\054\053\001\002\000\026\024" +
    "\052\025\051\027\046\030\050\031\044\032\047\033\057" +
    "\036\045\053\054\054\053\001\002\000\026\024\052\025" +
    "\051\027\046\030\050\031\044\032\047\033\057\036\045" +
    "\053\054\054\053\001\002\000\040\035\073\036\063\037" +
    "\071\040\070\042\uffc1\043\uffc1\044\uffc1\045\uffc1\047\uffc1" +
    "\050\uffc1\051\uffc1\052\uffc1\055\uffc1\060\uffc1\061\uffc1\001" +
    "\002\000\040\035\073\036\063\037\071\040\070\042\067" +
    "\043\072\044\062\045\066\047\076\050\074\051\uffbf\052" +
    "\uffbf\055\uffbf\060\uffbf\061\uffbf\001\002\000\040\035\073" +
    "\036\063\037\071\040\070\042\uffc0\043\uffc0\044\uffc0\045" +
    "\uffc0\047\uffc0\050\uffc0\051\uffc0\052\uffc0\055\uffc0\060\uffc0" +
    "\061\uffc0\001\002\000\040\035\uffca\036\uffca\037\071\040" +
    "\070\042\uffca\043\uffca\044\uffca\045\uffca\047\uffca\050\uffca" +
    "\051\uffca\052\uffca\055\uffca\060\uffca\061\uffca\001\002\000" +
    "\040\035\073\036\063\037\071\040\070\042\uffc4\043\uffc4" +
    "\044\062\045\066\047\076\050\074\051\uffc4\052\uffc4\055" +
    "\uffc4\060\uffc4\061\uffc4\001\002\000\040\035\uffc8\036\uffc8" +
    "\037\uffc8\040\uffc8\042\uffc8\043\uffc8\044\uffc8\045\uffc8\047" +
    "\uffc8\050\uffc8\051\uffc8\052\uffc8\055\uffc8\060\uffc8\061\uffc8" +
    "\001\002\000\040\035\uffc7\036\uffc7\037\uffc7\040\uffc7\042" +
    "\uffc7\043\uffc7\044\uffc7\045\uffc7\047\uffc7\050\uffc7\051\uffc7" +
    "\052\uffc7\055\uffc7\060\uffc7\061\uffc7\001\002\000\040\035" +
    "\073\036\063\037\071\040\070\042\uffc5\043\uffc5\044\062" +
    "\045\066\047\076\050\074\051\uffc5\052\uffc5\055\uffc5\060" +
    "\uffc5\061\uffc5\001\002\000\040\035\073\036\063\037\071" +
    "\040\070\042\uffc2\043\uffc2\044\uffc2\045\uffc2\047\uffc2\050" +
    "\uffc2\051\uffc2\052\uffc2\055\uffc2\060\uffc2\061\uffc2\001\002" +
    "\000\040\035\073\036\063\037\071\040\070\042\067\043" +
    "\072\044\062\045\066\047\076\050\074\051\075\052\uffbe" +
    "\055\uffbe\060\uffbe\061\uffbe\001\002\000\034\003\031\006" +
    "\035\007\030\010\033\011\015\012\034\013\025\015\024" +
    "\020\021\023\037\026\012\033\014\057\116\001\002\000" +
    "\042\003\uffef\006\uffef\007\uffef\010\uffef\011\uffef\012\uffef" +
    "\013\uffef\014\113\015\uffef\016\uffef\017\uffef\020\uffef\023" +
    "\uffef\026\uffef\033\uffef\057\uffef\001\002\000\006\013\025" +
    "\056\111\001\002\000\040\003\ufff1\006\ufff1\007\ufff1\010" +
    "\ufff1\011\ufff1\012\ufff1\013\ufff1\015\ufff1\016\ufff1\017\ufff1" +
    "\020\ufff1\023\ufff1\026\ufff1\033\ufff1\057\ufff1\001\002\000" +
    "\040\003\ufff0\006\ufff0\007\ufff0\010\ufff0\011\ufff0\012\ufff0" +
    "\013\ufff0\015\ufff0\016\ufff0\017\ufff0\020\ufff0\023\ufff0\026" +
    "\ufff0\033\ufff0\057\ufff0\001\002\000\042\003\uffdb\006\uffdb" +
    "\007\uffdb\010\uffdb\011\uffdb\012\uffdb\013\uffdb\014\uffdb\015" +
    "\uffdb\016\uffdb\017\uffdb\020\uffdb\023\uffdb\026\uffdb\033\uffdb" +
    "\057\uffdb\001\002\000\034\003\031\006\035\007\030\010" +
    "\033\011\015\012\034\013\025\015\024\020\021\023\037" +
    "\026\012\033\014\057\120\001\002\000\042\003\uffdc\006" +
    "\uffdc\007\uffdc\010\uffdc\011\uffdc\012\uffdc\013\uffdc\014\uffdc" +
    "\015\uffdc\016\uffdc\017\uffdc\020\uffdc\023\uffdc\026\uffdc\033" +
    "\uffdc\057\uffdc\001\002\000\040\003\ufffe\006\ufffe\007\ufffe" +
    "\010\ufffe\011\ufffe\012\ufffe\013\ufffe\015\ufffe\016\ufffe\017" +
    "\ufffe\020\ufffe\023\ufffe\026\ufffe\033\ufffe\057\ufffe\001\002" +
    "\000\040\035\uffc9\036\uffc9\037\071\040\070\042\uffc9\043" +
    "\uffc9\044\uffc9\045\uffc9\047\uffc9\050\uffc9\051\uffc9\052\uffc9" +
    "\055\uffc9\060\uffc9\061\uffc9\001\002\000\040\035\073\036" +
    "\063\037\071\040\070\042\uffc3\043\uffc3\044\uffc3\045\uffc3" +
    "\047\uffc3\050\uffc3\051\uffc3\052\uffc3\055\uffc3\060\uffc3\061" +
    "\uffc3\001\002\000\040\035\073\036\063\037\071\040\070" +
    "\042\067\043\072\044\062\045\066\047\076\050\074\051" +
    "\uffbd\052\uffbd\055\uffbd\060\uffbd\061\uffbd\001\002\000\034" +
    "\035\073\036\063\037\071\040\070\042\067\043\072\044" +
    "\062\045\066\047\076\050\074\051\075\052\065\055\126" +
    "\001\002\000\040\035\uffcb\036\uffcb\037\uffcb\040\uffcb\042" +
    "\uffcb\043\uffcb\044\uffcb\045\uffcb\047\uffcb\050\uffcb\051\uffcb" +
    "\052\uffcb\055\uffcb\060\uffcb\061\uffcb\001\002\000\040\035" +
    "\uffc6\036\uffc6\037\uffc6\040\uffc6\042\uffc6\043\uffc6\044\uffc6" +
    "\045\uffc6\047\uffc6\050\uffc6\051\uffc6\052\uffc6\055\uffc6\060" +
    "\uffc6\061\uffc6\001\002\000\026\024\052\025\051\027\046" +
    "\030\050\031\044\032\047\033\057\036\045\053\054\054" +
    "\053\001\002\000\034\035\073\036\063\037\071\040\070" +
    "\042\067\043\072\044\062\045\066\047\076\050\074\051" +
    "\075\052\065\055\132\001\002\000\004\056\133\001\002" +
    "\000\010\016\140\017\143\057\136\001\002\000\040\003" +
    "\uffee\006\uffee\007\uffee\010\uffee\011\uffee\012\uffee\013\uffee" +
    "\015\uffee\016\uffee\017\uffee\020\uffee\023\uffee\026\uffee\033" +
    "\uffee\057\uffee\001\002\000\004\057\uffe9\001\002\000\040" +
    "\003\uffec\006\uffec\007\uffec\010\uffec\011\uffec\012\uffec\013" +
    "\uffec\015\uffec\016\uffec\017\uffec\020\uffec\023\uffec\026\uffec" +
    "\033\uffec\057\uffec\001\002\000\010\016\140\017\143\057" +
    "\uffea\001\002\000\026\024\052\025\051\027\046\030\050" +
    "\031\044\032\047\033\057\036\045\053\054\054\053\001" +
    "\002\000\004\057\147\001\002\000\010\016\uffe7\017\uffe7" +
    "\057\uffe7\001\002\000\004\060\144\001\002\000\036\003" +
    "\031\006\035\007\030\010\033\011\015\012\034\013\025" +
    "\015\024\020\021\023\037\026\012\033\014\056\111\057" +
    "\uffe1\001\002\000\034\003\031\006\035\007\030\010\033" +
    "\011\015\012\034\013\025\015\024\020\021\023\037\026" +
    "\012\033\014\057\uffe3\001\002\000\004\057\uffe2\001\002" +
    "\000\040\003\uffed\006\uffed\007\uffed\010\uffed\011\uffed\012" +
    "\uffed\013\uffed\015\uffed\016\uffed\017\uffed\020\uffed\023\uffed" +
    "\026\uffed\033\uffed\057\uffed\001\002\000\034\035\073\036" +
    "\063\037\071\040\070\042\067\043\072\044\062\045\066" +
    "\047\076\050\074\051\075\052\065\060\151\001\002\000" +
    "\042\003\031\006\035\007\030\010\033\011\015\012\034" +
    "\013\025\015\024\016\uffe4\017\uffe4\020\021\023\037\026" +
    "\012\033\014\056\111\057\uffe4\001\002\000\040\003\031" +
    "\006\035\007\030\010\033\011\015\012\034\013\025\015" +
    "\024\016\uffe6\017\uffe6\020\021\023\037\026\012\033\014" +
    "\057\uffe6\001\002\000\010\016\uffe5\017\uffe5\057\uffe5\001" +
    "\002\000\004\057\uffeb\001\002\000\010\016\uffe8\017\uffe8" +
    "\057\uffe8\001\002\000\014\006\035\007\030\010\033\011" +
    "\015\012\034\001\002\000\004\055\171\001\002\000\004" +
    "\033\161\001\002\000\004\046\162\001\002\000\026\024" +
    "\052\025\051\027\046\030\050\031\044\032\047\033\057" +
    "\036\045\053\054\054\053\001\002\000\034\035\073\036" +
    "\063\037\071\040\070\042\067\043\072\044\062\045\066" +
    "\047\076\050\074\051\075\052\065\061\164\001\002\000" +
    "\026\024\052\025\051\027\046\030\050\031\044\032\047" +
    "\033\057\036\045\053\054\054\053\001\002\000\034\035" +
    "\073\036\063\037\071\040\070\042\067\043\072\044\062" +
    "\045\066\047\076\050\074\051\075\052\065\061\166\001" +
    "\002\000\004\033\167\001\002\000\004\034\170\001\002" +
    "\000\004\055\uffdf\001\002\000\004\056\111\001\002\000" +
    "\040\003\uffe0\006\uffe0\007\uffe0\010\uffe0\011\uffe0\012\uffe0" +
    "\013\uffe0\015\uffe0\016\uffe0\017\uffe0\020\uffe0\023\uffe0\026" +
    "\uffe0\033\uffe0\057\uffe0\001\002\000\006\046\174\061\ufff3" +
    "\001\002\000\026\024\052\025\051\027\046\030\050\031" +
    "\044\032\047\033\057\036\045\053\054\054\053\001\002" +
    "\000\034\035\073\036\063\037\071\040\070\042\067\043" +
    "\072\044\062\045\066\047\076\050\074\051\075\052\065" +
    "\061\ufff4\001\002\000\004\002\000\001\002\000\026\024" +
    "\052\025\051\027\046\030\050\031\044\032\047\033\057" +
    "\036\045\053\054\054\053\001\002\000\034\035\073\036" +
    "\063\037\071\040\070\042\067\043\072\044\062\045\066" +
    "\047\076\050\074\051\075\052\065\061\ufff2\001\002\000" +
    "\030\024\052\025\051\027\046\030\050\031\044\032\047" +
    "\033\057\036\045\053\054\054\053\055\202\001\002\000" +
    "\004\061\206\001\002\000\034\035\073\036\063\037\071" +
    "\040\070\042\067\043\072\044\062\045\066\047\076\050" +
    "\074\051\075\052\065\055\204\001\002\000\004\061\205" +
    "\001\002\000\040\003\uffde\006\uffde\007\uffde\010\uffde\011" +
    "\uffde\012\uffde\013\uffde\015\uffde\016\uffde\017\uffde\020\uffde" +
    "\023\uffde\026\uffde\033\uffde\057\uffde\001\002\000\040\003" +
    "\uffdd\006\uffdd\007\uffdd\010\uffdd\011\uffdd\012\uffdd\013\uffdd" +
    "\015\uffdd\016\uffdd\017\uffdd\020\uffdd\023\uffdd\026\uffdd\033" +
    "\uffdd\057\uffdd\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\205\000\004\002\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\024\003\016\010\026\011\021\012\015\020" +
    "\025\022\031\023\022\024\035\025\017\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\022\010\026\011\021\012\015" +
    "\020\025\022\031\023\120\024\035\025\017\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\004" +
    "\057\005\054\006\055\007\060\001\001\000\002\001\001" +
    "\000\012\004\126\005\054\006\055\007\060\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\004\124\005\054\006" +
    "\055\007\060\001\001\000\012\004\123\005\054\006\055" +
    "\007\060\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\004\122\005\054\006\055\007\060\001\001\000\012\004" +
    "\121\005\054\006\055\007\060\001\001\000\004\026\111" +
    "\001\001\000\012\004\107\005\054\006\055\007\060\001" +
    "\001\000\012\004\106\005\054\006\055\007\060\001\001" +
    "\000\012\004\105\005\054\006\055\007\060\001\001\000" +
    "\012\004\104\005\054\006\055\007\060\001\001\000\012" +
    "\004\103\005\054\006\055\007\060\001\001\000\012\004" +
    "\102\005\054\006\055\007\060\001\001\000\012\004\101" +
    "\005\054\006\055\007\060\001\001\000\012\004\100\005" +
    "\054\006\055\007\060\001\001\000\012\004\077\005\054" +
    "\006\055\007\060\001\001\000\012\004\076\005\054\006" +
    "\055\007\060\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\024\003\116\010\026\011" +
    "\021\012\015\020\025\022\031\023\022\024\035\025\017" +
    "\001\001\000\002\001\001\000\006\011\113\026\114\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\010\026\011\021\012\015\020\025\022\031\023" +
    "\120\024\035\025\017\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\004\130\005\054\006\055\007\060\001\001\000" +
    "\002\001\001\000\004\013\133\001\001\000\012\014\140" +
    "\015\136\016\141\017\134\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\016\154\017\153" +
    "\001\001\000\012\004\147\005\054\006\055\007\060\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\026\003\144\010\026\011\021\012\015\020\025\022" +
    "\031\023\022\024\035\025\017\026\145\001\001\000\022" +
    "\010\026\011\021\012\015\020\025\022\031\023\120\024" +
    "\035\025\017\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\026\003\151\010\026\011\021\012" +
    "\015\020\025\022\031\023\022\024\035\025\017\026\152" +
    "\001\001\000\022\010\026\011\021\012\015\020\025\022" +
    "\031\023\120\024\035\025\017\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\021\156\025" +
    "\157\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\004\162\005\054\006\055\007\060\001" +
    "\001\000\002\001\001\000\012\004\164\005\054\006\055" +
    "\007\060\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\026\171\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\004\174\005" +
    "\054\006\055\007\060\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\004\177\005\054\006\055\007\060\001" +
    "\001\000\002\001\001\000\012\004\202\005\054\006\055" +
    "\007\060\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    ArrayList<Response> errorsS = new ArrayList<>();
    public void syntax_error(Symbol sym) {
        errorsS.add(new Response(new ErrorS(sym.left,sym.right,sym.value,TOK.terminalNames[sym.sym])));
    }
    public void unrecovered_syntax_error(Symbol sym) throws java.lang.Exception {
        errorsS.add(new Response("Error Sintáctico sin recuperar."));
    }
    public String getErrors() {
        return errorsS.stream().map(Object::toString).collect(Collectors.joining("\n-> "));
    }
    public boolean isSuccessExecution() {
        return !(errorsS.size() > 0);
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INIT EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String start_val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INIT ::= RW_void RW_main TK_lpar TK_rpar TK_lbrc INSTRUCTIONS TK_rbrc 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INIT",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INIT ::= RW_void RW_main TK_lpar TK_rpar TK_lbrc TK_rbrc 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INIT",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INSTRUCTIONS ::= INSTRUCTIONS INSTRUCTION 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTIONS",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INSTRUCTIONS ::= INSTRUCTION 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTIONS",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // INSTRUCTION ::= DECLID TK_semicolon 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // INSTRUCTION ::= REASIGN TK_semicolon 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // INSTRUCTION ::= IFSTRUCT 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // INSTRUCTION ::= SWITCHSTRUCT 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // INSTRUCTION ::= LOOPFOR 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // INSTRUCTION ::= PRINT 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // INSTRUCTION ::= RW_break TK_semicolon 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // INSTRUCTION ::= error 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // DECLID ::= TYPE TK_id TK_equal EXP 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLID",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // DECLID ::= TYPE TK_id 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLID",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // REASIGN ::= TK_id TK_equal EXP 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("REASIGN",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // IFSTRUCT ::= RW_if TK_lpar EXP TK_rpar ENV RW_else IFSTRUCT 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IFSTRUCT",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // IFSTRUCT ::= RW_if TK_lpar EXP TK_rpar ENV RW_else ENV 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IFSTRUCT",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // IFSTRUCT ::= RW_if TK_lpar EXP TK_rpar ENV 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IFSTRUCT",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // SWITCHSTRUCT ::= RW_switch TK_lpar EXP TK_rpar ENVS 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String exp = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SWITCHSTRUCT",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // ENVS ::= TK_lbrc CASESDEFAULT TK_rbrc 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ENVS",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // ENVS ::= TK_lbrc TK_rbrc 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ENVS",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // CASESDEFAULT ::= CASES DEFAULT 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CASESDEFAULT",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // CASESDEFAULT ::= CASES 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CASESDEFAULT",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // CASESDEFAULT ::= DEFAULT 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CASESDEFAULT",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // CASES ::= CASES CASE 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CASES",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // CASES ::= CASE 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CASES",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // CASE ::= RW_case EXP TK_colon INSTRUCTIONS 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CASE",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // CASE ::= RW_case EXP TK_colon ENV 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CASE",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // CASE ::= RW_case EXP TK_colon 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CASE",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // DEFAULT ::= RW_default TK_colon INSTRUCTIONS 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DEFAULT",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // DEFAULT ::= RW_default TK_colon ENV 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DEFAULT",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // DEFAULT ::= RW_default TK_colon 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DEFAULT",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // LOOPFOR ::= RW_for TK_lpar ARGSFOR TK_rpar ENV 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LOOPFOR",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // ARGSFOR ::= TYPE TK_id TK_equal EXP TK_semicolon EXP TK_semicolon TK_id TK_inc 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARGSFOR",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // PRINT ::= RW_print TK_lpar EXP TK_rpar TK_semicolon 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PRINT",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // PRINT ::= RW_print TK_lpar TK_rpar TK_semicolon 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PRINT",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // ENV ::= TK_lbrc INSTRUCTIONS TK_rbrc 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ENV",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // ENV ::= TK_lbrc TK_rbrc 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ENV",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // TYPE ::= RW_string 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TYPE",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // TYPE ::= RW_int 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TYPE",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // TYPE ::= RW_bool 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TYPE",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // TYPE ::= RW_char 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TYPE",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // TYPE ::= RW_double 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TYPE",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // EXP ::= ARITHMETICS 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // EXP ::= RELATIONALS 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // EXP ::= LOGICS 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // EXP ::= TK_id 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // EXP ::= TK_string 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // EXP ::= TK_char 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // EXP ::= TK_int 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // EXP ::= TK_double 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // EXP ::= RW_true 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // EXP ::= RW_false 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // EXP ::= TK_lpar EXP TK_rpar 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // ARITHMETICS ::= EXP TK_plus EXP 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARITHMETICS",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // ARITHMETICS ::= EXP TK_minus EXP 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARITHMETICS",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // ARITHMETICS ::= EXP TK_mult EXP 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARITHMETICS",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // ARITHMETICS ::= EXP TK_div EXP 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARITHMETICS",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // ARITHMETICS ::= TK_minus EXP 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARITHMETICS",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // RELATIONALS ::= EXP TK_equequ EXP 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RELATIONALS",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // RELATIONALS ::= EXP TK_notequ EXP 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RELATIONALS",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // RELATIONALS ::= EXP TK_lessequ EXP 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RELATIONALS",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // RELATIONALS ::= EXP TK_moreequ EXP 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RELATIONALS",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // RELATIONALS ::= EXP TK_less EXP 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RELATIONALS",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // RELATIONALS ::= EXP TK_more EXP 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RELATIONALS",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // LOGICS ::= EXP TK_and EXP 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LOGICS",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // LOGICS ::= EXP TK_or EXP 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LOGICS",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // LOGICS ::= TK_not EXP 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LOGICS",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
