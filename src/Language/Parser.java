
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Language;

import java.util.ArrayList;
import java.util.stream.Collectors;
import java_cup.runtime.*;
import Components.Response;
import Components.ErrorS;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return TOK.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\150\000\002\002\004\000\002\002\011\000\002\002" +
    "\010\000\002\003\004\000\002\003\003\000\002\005\004" +
    "\000\002\005\004\000\002\005\003\000\002\005\003\000" +
    "\002\005\003\000\002\005\003\000\002\005\003\000\002" +
    "\005\003\000\002\005\003\000\002\005\004\000\002\005" +
    "\003\000\002\004\004\000\002\004\003\000\002\006\004" +
    "\000\002\006\004\000\002\006\003\000\002\014\006\000" +
    "\002\014\004\000\002\020\006\000\002\020\006\000\002" +
    "\020\006\000\002\020\006\000\002\020\004\000\002\040" +
    "\005\000\002\015\007\000\002\015\007\000\002\015\007" +
    "\000\002\017\012\000\002\021\013\000\002\021\013\000" +
    "\002\022\005\000\002\022\003\000\002\023\003\000\002" +
    "\023\003\000\002\023\003\000\002\043\005\000\002\043" +
    "\004\000\002\016\003\000\002\016\003\000\002\010\003" +
    "\000\002\010\003\000\002\010\003\000\002\010\003\000" +
    "\002\010\005\000\002\024\011\000\002\024\011\000\002" +
    "\024\007\000\002\025\007\000\002\026\005\000\002\026" +
    "\004\000\002\027\004\000\002\027\003\000\002\027\003" +
    "\000\002\030\004\000\002\030\003\000\002\031\006\000" +
    "\002\031\006\000\002\031\005\000\002\032\005\000\002" +
    "\032\005\000\002\032\004\000\002\033\007\000\002\034" +
    "\013\000\002\035\007\000\002\036\011\000\002\037\007" +
    "\000\002\037\006\000\002\042\005\000\002\042\004\000" +
    "\002\041\003\000\002\041\003\000\002\041\003\000\002" +
    "\041\003\000\002\041\003\000\002\007\003\000\002\007" +
    "\003\000\002\007\003\000\002\007\003\000\002\007\003" +
    "\000\002\007\003\000\002\007\003\000\002\007\003\000" +
    "\002\007\003\000\002\007\003\000\002\007\005\000\002" +
    "\011\005\000\002\011\005\000\002\011\005\000\002\011" +
    "\005\000\002\011\004\000\002\012\005\000\002\012\005" +
    "\000\002\012\005\000\002\012\005\000\002\012\005\000" +
    "\002\012\005\000\002\013\005\000\002\013\005\000\002" +
    "\013\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\340\000\004\005\005\001\002\000\004\002\342\001" +
    "\002\000\004\004\006\001\002\000\004\066\007\001\002" +
    "\000\004\067\010\001\002\000\004\070\011\001\002\000" +
    "\042\003\036\005\020\011\043\012\034\013\037\014\016" +
    "\015\040\024\032\026\030\031\024\032\025\033\041\034" +
    "\045\037\012\044\014\071\013\001\002\000\004\066\334" +
    "\001\002\000\004\002\uffff\001\002\000\004\057\332\001" +
    "\002\000\046\003\ufff6\005\ufff6\011\ufff6\012\ufff6\013\ufff6" +
    "\014\ufff6\015\ufff6\024\ufff6\026\ufff6\027\ufff6\030\ufff6\031" +
    "\ufff6\032\ufff6\033\ufff6\034\ufff6\037\ufff6\044\ufff6\071\ufff6" +
    "\001\002\000\004\044\uffb5\001\002\000\046\003\ufff8\005" +
    "\ufff8\011\ufff8\012\ufff8\013\ufff8\014\ufff8\015\ufff8\024\ufff8" +
    "\026\ufff8\027\ufff8\030\ufff8\031\ufff8\032\ufff8\033\ufff8\034" +
    "\ufff8\037\ufff8\044\ufff8\071\ufff8\001\002\000\010\006\217" +
    "\007\221\010\220\001\002\000\042\003\036\005\020\011" +
    "\043\012\034\013\037\014\016\015\040\024\032\026\030" +
    "\031\024\032\025\033\041\034\045\037\012\044\014\071" +
    "\216\001\002\000\004\044\213\001\002\000\046\003\ufff5" +
    "\005\ufff5\011\ufff5\012\ufff5\013\ufff5\014\ufff5\015\ufff5\024" +
    "\ufff5\026\ufff5\027\ufff5\030\ufff5\031\ufff5\032\ufff5\033\ufff5" +
    "\034\ufff5\037\ufff5\044\ufff5\071\ufff5\001\002\000\004\066" +
    "\176\001\002\000\004\066\172\001\002\000\046\003\ufff9" +
    "\005\ufff9\011\ufff9\012\ufff9\013\ufff9\014\ufff9\015\ufff9\024" +
    "\ufff9\026\ufff9\027\ufff9\030\ufff9\031\ufff9\032\ufff9\033\ufff9" +
    "\034\ufff9\037\ufff9\044\ufff9\071\ufff9\001\002\000\046\003" +
    "\ufffd\005\ufffd\011\ufffd\012\ufffd\013\ufffd\014\ufffd\015\ufffd" +
    "\024\ufffd\026\ufffd\027\ufffd\030\ufffd\031\ufffd\032\ufffd\033" +
    "\ufffd\034\ufffd\037\ufffd\044\ufffd\071\ufffd\001\002\000\004" +
    "\066\144\001\002\000\046\003\ufff7\005\ufff7\011\ufff7\012" +
    "\ufff7\013\ufff7\014\ufff7\015\ufff7\024\ufff7\026\ufff7\027\ufff7" +
    "\030\ufff7\031\ufff7\032\ufff7\033\ufff7\034\ufff7\037\ufff7\044" +
    "\ufff7\071\ufff7\001\002\000\004\066\135\001\002\000\004" +
    "\076\134\001\002\000\004\044\uffb3\001\002\000\046\003" +
    "\ufff4\005\ufff4\011\ufff4\012\ufff4\013\ufff4\014\ufff4\015\ufff4" +
    "\024\ufff4\026\ufff4\027\ufff4\030\ufff4\031\ufff4\032\ufff4\033" +
    "\ufff4\034\ufff4\037\ufff4\044\ufff4\071\ufff4\001\002\000\046" +
    "\003\ufff2\005\ufff2\011\ufff2\012\ufff2\013\ufff2\014\ufff2\015" +
    "\ufff2\024\ufff2\026\ufff2\027\ufff2\030\ufff2\031\ufff2\032\ufff2" +
    "\033\ufff2\034\ufff2\037\ufff2\044\ufff2\071\ufff2\001\002\000" +
    "\004\044\uffb4\001\002\000\004\044\uffb7\001\002\000\004" +
    "\070\051\001\002\000\046\003\ufffa\005\ufffa\011\ufffa\012" +
    "\ufffa\013\ufffa\014\ufffa\015\ufffa\024\ufffa\026\ufffa\027\ufffa" +
    "\030\ufffa\031\ufffa\032\ufffa\033\ufffa\034\ufffa\037\ufffa\044" +
    "\ufffa\071\ufffa\001\002\000\004\044\uffb6\001\002\000\004" +
    "\076\047\001\002\000\004\076\046\001\002\000\046\003" +
    "\ufff3\005\ufff3\011\ufff3\012\ufff3\013\ufff3\014\ufff3\015\ufff3" +
    "\024\ufff3\026\ufff3\027\ufff3\030\ufff3\031\ufff3\032\ufff3\033" +
    "\ufff3\034\ufff3\037\ufff3\044\ufff3\071\ufff3\001\002\000\046" +
    "\003\ufffb\005\ufffb\011\ufffb\012\ufffb\013\ufffb\014\ufffb\015" +
    "\ufffb\024\ufffb\026\ufffb\027\ufffb\030\ufffb\031\ufffb\032\ufffb" +
    "\033\ufffb\034\ufffb\037\ufffb\044\ufffb\071\ufffb\001\002\000" +
    "\004\032\056\001\002\000\042\003\036\005\020\011\043" +
    "\012\034\013\037\014\016\015\040\024\032\026\030\031" +
    "\024\032\025\033\041\034\045\037\012\044\014\071\052" +
    "\001\002\000\050\003\uffb8\005\uffb8\011\uffb8\012\uffb8\013" +
    "\uffb8\014\uffb8\015\uffb8\024\uffb8\025\uffb8\026\uffb8\027\uffb8" +
    "\030\uffb8\031\uffb8\032\uffb8\033\uffb8\034\uffb8\037\uffb8\044" +
    "\uffb8\071\uffb8\001\002\000\042\003\036\005\020\011\043" +
    "\012\034\013\037\014\016\015\040\024\032\026\030\031" +
    "\024\032\025\033\041\034\045\037\012\044\014\071\054" +
    "\001\002\000\050\003\uffb9\005\uffb9\011\uffb9\012\uffb9\013" +
    "\uffb9\014\uffb9\015\uffb9\024\uffb9\025\uffb9\026\uffb9\027\uffb9" +
    "\030\uffb9\031\uffb9\032\uffb9\033\uffb9\034\uffb9\037\uffb9\044" +
    "\uffb9\071\uffb9\001\002\000\046\003\ufffe\005\ufffe\011\ufffe" +
    "\012\ufffe\013\ufffe\014\ufffe\015\ufffe\024\ufffe\026\ufffe\027" +
    "\ufffe\030\ufffe\031\ufffe\032\ufffe\033\ufffe\034\ufffe\037\ufffe" +
    "\044\ufffe\071\ufffe\001\002\000\004\066\057\001\002\000" +
    "\026\035\066\036\065\040\062\041\064\042\060\043\063" +
    "\044\073\047\061\064\070\066\067\001\002\000\040\046" +
    "\uffac\047\uffac\050\uffac\051\uffac\053\uffac\054\uffac\055\uffac" +
    "\056\uffac\060\uffac\061\uffac\062\uffac\063\uffac\067\uffac\075" +
    "\uffac\076\uffac\001\002\000\026\035\066\036\065\040\062" +
    "\041\064\042\060\043\063\044\073\047\061\064\070\066" +
    "\067\001\002\000\040\046\uffae\047\uffae\050\uffae\051\uffae" +
    "\053\uffae\054\uffae\055\uffae\056\uffae\060\uffae\061\uffae\062" +
    "\uffae\063\uffae\067\uffae\075\uffae\076\uffae\001\002\000\040" +
    "\046\uffab\047\uffab\050\uffab\051\uffab\053\uffab\054\uffab\055" +
    "\uffab\056\uffab\060\uffab\061\uffab\062\uffab\063\uffab\067\uffab" +
    "\075\uffab\076\uffab\001\002\000\040\046\uffad\047\uffad\050" +
    "\uffad\051\uffad\053\uffad\054\uffad\055\uffad\056\uffad\060\uffad" +
    "\061\uffad\062\uffad\063\uffad\067\uffad\075\uffad\076\uffad\001" +
    "\002\000\040\046\uffa9\047\uffa9\050\uffa9\051\uffa9\053\uffa9" +
    "\054\uffa9\055\uffa9\056\uffa9\060\uffa9\061\uffa9\062\uffa9\063" +
    "\uffa9\067\uffa9\075\uffa9\076\uffa9\001\002\000\040\046\uffaa" +
    "\047\uffaa\050\uffaa\051\uffaa\053\uffaa\054\uffaa\055\uffaa\056" +
    "\uffaa\060\uffaa\061\uffaa\062\uffaa\063\uffaa\067\uffaa\075\uffaa" +
    "\076\uffaa\001\002\000\026\035\066\036\065\040\062\041" +
    "\064\042\060\043\063\044\073\047\061\064\070\066\067" +
    "\001\002\000\026\035\066\036\065\040\062\041\064\042" +
    "\060\043\063\044\073\047\061\064\070\066\067\001\002" +
    "\000\040\046\uffb2\047\uffb2\050\uffb2\051\uffb2\053\uffb2\054" +
    "\uffb2\055\uffb2\056\uffb2\060\uffb2\061\uffb2\062\uffb2\063\uffb2" +
    "\067\uffb2\075\uffb2\076\uffb2\001\002\000\040\046\uffb1\047" +
    "\uffb1\050\uffb1\051\uffb1\053\uffb1\054\uffb1\055\uffb1\056\uffb1" +
    "\060\uffb1\061\uffb1\062\uffb1\063\uffb1\067\uffb1\075\uffb1\076" +
    "\uffb1\001\002\000\040\046\uffaf\047\uffaf\050\uffaf\051\uffaf" +
    "\053\uffaf\054\uffaf\055\uffaf\056\uffaf\060\uffaf\061\uffaf\062" +
    "\uffaf\063\uffaf\067\uffaf\075\uffaf\076\uffaf\001\002\000\034" +
    "\046\107\047\077\050\104\051\105\053\103\054\106\055" +
    "\076\056\102\060\112\061\110\062\111\063\101\067\100" +
    "\001\002\000\040\046\uffb0\047\uffb0\050\uffb0\051\uffb0\053" +
    "\uffb0\054\uffb0\055\uffb0\056\uffb0\060\uffb0\061\uffb0\062\uffb0" +
    "\063\uffb0\067\uffb0\075\uffb0\076\uffb0\001\002\000\026\035" +
    "\066\036\065\040\062\041\064\042\060\043\063\044\073" +
    "\047\061\064\070\066\067\001\002\000\026\035\066\036" +
    "\065\040\062\041\064\042\060\043\063\044\073\047\061" +
    "\064\070\066\067\001\002\000\004\076\125\001\002\000" +
    "\026\035\066\036\065\040\062\041\064\042\060\043\063" +
    "\044\073\047\061\064\070\066\067\001\002\000\026\035" +
    "\066\036\065\040\062\041\064\042\060\043\063\044\073" +
    "\047\061\064\070\066\067\001\002\000\026\035\066\036" +
    "\065\040\062\041\064\042\060\043\063\044\073\047\061" +
    "\064\070\066\067\001\002\000\026\035\066\036\065\040" +
    "\062\041\064\042\060\043\063\044\073\047\061\064\070" +
    "\066\067\001\002\000\026\035\066\036\065\040\062\041" +
    "\064\042\060\043\063\044\073\047\061\064\070\066\067" +
    "\001\002\000\026\035\066\036\065\040\062\041\064\042" +
    "\060\043\063\044\073\047\061\064\070\066\067\001\002" +
    "\000\026\035\066\036\065\040\062\041\064\042\060\043" +
    "\063\044\073\047\061\064\070\066\067\001\002\000\026" +
    "\035\066\036\065\040\062\041\064\042\060\043\063\044" +
    "\073\047\061\064\070\066\067\001\002\000\026\035\066" +
    "\036\065\040\062\041\064\042\060\043\063\044\073\047" +
    "\061\064\070\066\067\001\002\000\026\035\066\036\065" +
    "\040\062\041\064\042\060\043\063\044\073\047\061\064" +
    "\070\066\067\001\002\000\040\046\107\047\077\050\104" +
    "\051\105\053\uff9e\054\uff9e\055\uff9e\056\uff9e\060\uff9e\061" +
    "\uff9e\062\uff9e\063\uff9e\067\uff9e\075\uff9e\076\uff9e\001\002" +
    "\000\040\046\107\047\077\050\104\051\105\053\103\054" +
    "\106\055\076\056\102\060\112\061\110\062\uff9c\063\uff9c" +
    "\067\uff9c\075\uff9c\076\uff9c\001\002\000\040\046\107\047" +
    "\077\050\104\051\105\053\uff9d\054\uff9d\055\uff9d\056\uff9d" +
    "\060\uff9d\061\uff9d\062\uff9d\063\uff9d\067\uff9d\075\uff9d\076" +
    "\uff9d\001\002\000\040\046\uffa7\047\uffa7\050\104\051\105" +
    "\053\uffa7\054\uffa7\055\uffa7\056\uffa7\060\uffa7\061\uffa7\062" +
    "\uffa7\063\uffa7\067\uffa7\075\uffa7\076\uffa7\001\002\000\040" +
    "\046\107\047\077\050\104\051\105\053\uffa1\054\uffa1\055" +
    "\076\056\102\060\112\061\110\062\uffa1\063\uffa1\067\uffa1" +
    "\075\uffa1\076\uffa1\001\002\000\040\046\uffa4\047\uffa4\050" +
    "\uffa4\051\uffa4\053\uffa4\054\uffa4\055\uffa4\056\uffa4\060\uffa4" +
    "\061\uffa4\062\uffa4\063\uffa4\067\uffa4\075\uffa4\076\uffa4\001" +
    "\002\000\040\046\uffa5\047\uffa5\050\uffa5\051\uffa5\053\uffa5" +
    "\054\uffa5\055\uffa5\056\uffa5\060\uffa5\061\uffa5\062\uffa5\063" +
    "\uffa5\067\uffa5\075\uffa5\076\uffa5\001\002\000\040\046\107" +
    "\047\077\050\104\051\105\053\uffa2\054\uffa2\055\076\056" +
    "\102\060\112\061\110\062\uffa2\063\uffa2\067\uffa2\075\uffa2" +
    "\076\uffa2\001\002\000\040\046\107\047\077\050\104\051" +
    "\105\053\uff9f\054\uff9f\055\uff9f\056\uff9f\060\uff9f\061\uff9f" +
    "\062\uff9f\063\uff9f\067\uff9f\075\uff9f\076\uff9f\001\002\000" +
    "\040\046\107\047\077\050\104\051\105\053\103\054\106" +
    "\055\076\056\102\060\112\061\110\062\111\063\uff9b\067" +
    "\uff9b\075\uff9b\076\uff9b\001\002\000\046\003\uffbc\005\uffbc" +
    "\011\uffbc\012\uffbc\013\uffbc\014\uffbc\015\uffbc\024\uffbc\026" +
    "\uffbc\027\uffbc\030\uffbc\031\uffbc\032\uffbc\033\uffbc\034\uffbc" +
    "\037\uffbc\044\uffbc\071\uffbc\001\002\000\040\046\uffa6\047" +
    "\uffa6\050\104\051\105\053\uffa6\054\uffa6\055\uffa6\056\uffa6" +
    "\060\uffa6\061\uffa6\062\uffa6\063\uffa6\067\uffa6\075\uffa6\076" +
    "\uffa6\001\002\000\040\046\107\047\077\050\104\051\105" +
    "\053\uffa0\054\uffa0\055\uffa0\056\uffa0\060\uffa0\061\uffa0\062" +
    "\uffa0\063\uffa0\067\uffa0\075\uffa0\076\uffa0\001\002\000\040" +
    "\046\107\047\077\050\104\051\105\053\103\054\106\055" +
    "\076\056\102\060\112\061\110\062\uff9a\063\uff9a\067\uff9a" +
    "\075\uff9a\076\uff9a\001\002\000\034\046\107\047\077\050" +
    "\104\051\105\053\103\054\106\055\076\056\102\060\112" +
    "\061\110\062\111\063\101\067\132\001\002\000\040\046" +
    "\uffa8\047\uffa8\050\uffa8\051\uffa8\053\uffa8\054\uffa8\055\uffa8" +
    "\056\uffa8\060\uffa8\061\uffa8\062\uffa8\063\uffa8\067\uffa8\075" +
    "\uffa8\076\uffa8\001\002\000\040\046\uffa3\047\uffa3\050\uffa3" +
    "\051\uffa3\053\uffa3\054\uffa3\055\uffa3\056\uffa3\060\uffa3\061" +
    "\uffa3\062\uffa3\063\uffa3\067\uffa3\075\uffa3\076\uffa3\001\002" +
    "\000\046\003\ufffc\005\ufffc\011\ufffc\012\ufffc\013\ufffc\014" +
    "\ufffc\015\ufffc\024\ufffc\026\ufffc\027\ufffc\030\ufffc\031\ufffc" +
    "\032\ufffc\033\ufffc\034\ufffc\037\ufffc\044\ufffc\071\ufffc\001" +
    "\002\000\026\035\066\036\065\040\062\041\064\042\060" +
    "\043\063\044\073\047\061\064\070\066\067\001\002\000" +
    "\034\046\107\047\077\050\104\051\105\053\103\054\106" +
    "\055\076\056\102\060\112\061\110\062\111\063\101\067" +
    "\137\001\002\000\004\070\051\001\002\000\050\003\uffce" +
    "\005\uffce\011\uffce\012\uffce\013\uffce\014\uffce\015\uffce\024" +
    "\uffce\025\141\026\uffce\027\uffce\030\uffce\031\uffce\032\uffce" +
    "\033\uffce\034\uffce\037\uffce\044\uffce\071\uffce\001\002\000" +
    "\006\024\032\070\051\001\002\000\046\003\uffd0\005\uffd0" +
    "\011\uffd0\012\uffd0\013\uffd0\014\uffd0\015\uffd0\024\uffd0\026" +
    "\uffd0\027\uffd0\030\uffd0\031\uffd0\032\uffd0\033\uffd0\034\uffd0" +
    "\037\uffd0\044\uffd0\071\uffd0\001\002\000\046\003\uffcf\005" +
    "\uffcf\011\uffcf\012\uffcf\013\uffcf\014\uffcf\015\uffcf\024\uffcf" +
    "\026\uffcf\027\uffcf\030\uffcf\031\uffcf\032\uffcf\033\uffcf\034" +
    "\uffcf\037\uffcf\044\uffcf\071\uffcf\001\002\000\026\035\066" +
    "\036\065\040\062\041\064\042\060\043\063\044\073\047" +
    "\061\064\070\066\067\001\002\000\034\046\107\047\077" +
    "\050\104\051\105\053\103\054\106\055\076\056\102\060" +
    "\112\061\110\062\111\063\101\067\146\001\002\000\004" +
    "\070\147\001\002\000\010\027\154\030\157\071\153\001" +
    "\002\000\046\003\uffcd\005\uffcd\011\uffcd\012\uffcd\013\uffcd" +
    "\014\uffcd\015\uffcd\024\uffcd\026\uffcd\027\uffcd\030\uffcd\031" +
    "\uffcd\032\uffcd\033\uffcd\034\uffcd\037\uffcd\044\uffcd\071\uffcd" +
    "\001\002\000\004\071\uffc8\001\002\000\010\027\154\030" +
    "\157\071\uffc9\001\002\000\046\003\uffcb\005\uffcb\011\uffcb" +
    "\012\uffcb\013\uffcb\014\uffcb\015\uffcb\024\uffcb\026\uffcb\027" +
    "\uffcb\030\uffcb\031\uffcb\032\uffcb\033\uffcb\034\uffcb\037\uffcb" +
    "\044\uffcb\071\uffcb\001\002\000\026\035\066\036\065\040" +
    "\062\041\064\042\060\043\063\044\073\047\061\064\070" +
    "\066\067\001\002\000\004\071\163\001\002\000\010\027" +
    "\uffc6\030\uffc6\071\uffc6\001\002\000\004\075\160\001\002" +
    "\000\044\003\036\005\020\011\043\012\034\013\037\014" +
    "\016\015\040\024\032\026\030\031\024\032\025\033\041" +
    "\034\045\037\012\044\014\070\051\071\uffc0\001\002\000" +
    "\042\003\036\005\020\011\043\012\034\013\037\014\016" +
    "\015\040\024\032\026\030\031\024\032\025\033\041\034" +
    "\045\037\012\044\014\071\uffc2\001\002\000\004\071\uffc1" +
    "\001\002\000\046\003\uffcc\005\uffcc\011\uffcc\012\uffcc\013" +
    "\uffcc\014\uffcc\015\uffcc\024\uffcc\026\uffcc\027\uffcc\030\uffcc" +
    "\031\uffcc\032\uffcc\033\uffcc\034\uffcc\037\uffcc\044\uffcc\071" +
    "\uffcc\001\002\000\034\046\107\047\077\050\104\051\105" +
    "\053\103\054\106\055\076\056\102\060\112\061\110\062" +
    "\111\063\101\075\165\001\002\000\050\003\036\005\020" +
    "\011\043\012\034\013\037\014\016\015\040\024\032\026" +
    "\030\027\uffc3\030\uffc3\031\024\032\025\033\041\034\045" +
    "\037\012\044\014\070\051\071\uffc3\001\002\000\046\003" +
    "\036\005\020\011\043\012\034\013\037\014\016\015\040" +
    "\024\032\026\030\027\uffc5\030\uffc5\031\024\032\025\033" +
    "\041\034\045\037\012\044\014\071\uffc5\001\002\000\010" +
    "\027\uffc4\030\uffc4\071\uffc4\001\002\000\004\071\uffca\001" +
    "\002\000\010\027\uffc7\030\uffc7\071\uffc7\001\002\000\026" +
    "\035\066\036\065\040\062\041\064\042\060\043\063\044" +
    "\073\047\061\064\070\066\067\001\002\000\034\046\107" +
    "\047\077\050\104\051\105\053\103\054\106\055\076\056" +
    "\102\060\112\061\110\062\111\063\101\067\174\001\002" +
    "\000\004\070\051\001\002\000\046\003\uffbd\005\uffbd\011" +
    "\uffbd\012\uffbd\013\uffbd\014\uffbd\015\uffbd\024\uffbd\026\uffbd" +
    "\027\uffbd\030\uffbd\031\uffbd\032\uffbd\033\uffbd\034\uffbd\037" +
    "\uffbd\044\uffbd\071\uffbd\001\002\000\014\011\043\012\034" +
    "\013\037\014\016\015\040\001\002\000\004\067\211\001" +
    "\002\000\004\044\201\001\002\000\004\057\202\001\002" +
    "\000\026\035\066\036\065\040\062\041\064\042\060\043" +
    "\063\044\073\047\061\064\070\066\067\001\002\000\034" +
    "\046\107\047\077\050\104\051\105\053\103\054\106\055" +
    "\076\056\102\060\112\061\110\062\111\063\101\076\204" +
    "\001\002\000\026\035\066\036\065\040\062\041\064\042" +
    "\060\043\063\044\073\047\061\064\070\066\067\001\002" +
    "\000\034\046\107\047\077\050\104\051\105\053\103\054" +
    "\106\055\076\056\102\060\112\061\110\062\111\063\101" +
    "\076\206\001\002\000\004\044\207\001\002\000\004\045" +
    "\210\001\002\000\004\067\uffbe\001\002\000\004\070\051" +
    "\001\002\000\046\003\uffbf\005\uffbf\011\uffbf\012\uffbf\013" +
    "\uffbf\014\uffbf\015\uffbf\024\uffbf\026\uffbf\027\uffbf\030\uffbf" +
    "\031\uffbf\032\uffbf\033\uffbf\034\uffbf\037\uffbf\044\uffbf\071" +
    "\uffbf\001\002\000\006\057\214\076\uffeb\001\002\000\026" +
    "\035\066\036\065\040\062\041\064\042\060\043\063\044" +
    "\073\047\061\064\070\066\067\001\002\000\034\046\107" +
    "\047\077\050\104\051\105\053\103\054\106\055\076\056" +
    "\102\060\112\061\110\062\111\063\101\076\uffec\001\002" +
    "\000\004\002\000\001\002\000\004\066\327\001\002\000" +
    "\004\066\324\001\002\000\004\066\222\001\002\000\004" +
    "\067\223\001\002\000\004\070\225\001\002\000\046\003" +
    "\uffe3\005\uffe3\011\uffe3\012\uffe3\013\uffe3\014\uffe3\015\uffe3" +
    "\024\uffe3\026\uffe3\027\uffe3\030\uffe3\031\uffe3\032\uffe3\033" +
    "\uffe3\034\uffe3\037\uffe3\044\uffe3\071\uffe3\001\002\000\012" +
    "\012\232\015\235\044\014\071\234\001\002\000\004\076" +
    "\323\001\002\000\012\012\uffed\015\uffed\044\uffed\071\uffed" +
    "\001\002\000\012\012\ufff0\015\ufff0\044\ufff0\071\ufff0\001" +
    "\002\000\004\044\320\001\002\000\006\044\uffd6\072\310" +
    "\001\002\000\012\012\232\015\235\044\014\071\307\001" +
    "\002\000\046\003\uffd8\005\uffd8\011\uffd8\012\uffd8\013\uffd8" +
    "\014\uffd8\015\uffd8\024\uffd8\026\uffd8\027\uffd8\030\uffd8\031" +
    "\uffd8\032\uffd8\033\uffd8\034\uffd8\037\uffd8\044\uffd8\071\uffd8" +
    "\001\002\000\014\017\243\022\242\023\241\044\uffd7\072" +
    "\240\001\002\000\004\076\237\001\002\000\012\012\uffee" +
    "\015\uffee\044\uffee\071\uffee\001\002\000\004\073\271\001" +
    "\002\000\004\057\267\001\002\000\004\057\265\001\002" +
    "\000\004\057\244\001\002\000\014\040\246\043\245\044" +
    "\253\065\252\066\251\001\002\000\004\076\uffd2\001\002" +
    "\000\004\076\uffd3\001\002\000\004\076\uffd5\001\002\000" +
    "\004\076\uffea\001\002\000\026\035\066\036\065\040\062" +
    "\041\064\042\060\043\063\044\073\047\061\064\070\066" +
    "\067\001\002\000\004\070\254\001\002\000\004\076\uffd4" +
    "\001\002\000\004\016\255\001\002\000\004\074\256\001" +
    "\002\000\004\040\257\001\002\000\004\074\260\001\002" +
    "\000\004\040\261\001\002\000\004\071\262\001\002\000" +
    "\010\071\uffe1\074\uffe1\076\uffe1\001\002\000\034\046\107" +
    "\047\077\050\104\051\105\053\103\054\106\055\076\056" +
    "\102\060\112\061\110\062\111\063\101\067\264\001\002" +
    "\000\004\076\uffd1\001\002\000\014\040\246\043\245\044" +
    "\253\065\252\066\251\001\002\000\004\076\uffe9\001\002" +
    "\000\014\040\246\043\245\044\253\065\252\066\251\001" +
    "\002\000\004\076\uffe8\001\002\000\004\020\272\001\002" +
    "\000\004\057\273\001\002\000\004\070\274\001\002\000" +
    "\010\040\275\044\301\065\252\001\002\000\006\071\uffdb" +
    "\074\uffdb\001\002\000\006\071\uffdc\074\uffdc\001\002\000" +
    "\006\071\302\074\303\001\002\000\006\071\uffdd\074\uffdd" +
    "\001\002\000\006\071\uffda\074\uffda\001\002\000\004\076" +
    "\305\001\002\000\010\040\275\044\301\065\252\001\002" +
    "\000\006\071\uffde\074\uffde\001\002\000\012\012\uffe0\015" +
    "\uffe0\044\uffe0\071\uffe0\001\002\000\012\012\ufff1\015\ufff1" +
    "\044\ufff1\071\ufff1\001\002\000\046\003\uffd9\005\uffd9\011" +
    "\uffd9\012\uffd9\013\uffd9\014\uffd9\015\uffd9\024\uffd9\026\uffd9" +
    "\027\uffd9\030\uffd9\031\uffd9\032\uffd9\033\uffd9\034\uffd9\037" +
    "\uffd9\044\uffd9\071\uffd9\001\002\000\004\073\311\001\002" +
    "\000\004\021\312\001\002\000\004\057\313\001\002\000" +
    "\004\070\314\001\002\000\010\040\275\044\301\065\252" +
    "\001\002\000\006\071\316\074\303\001\002\000\004\076" +
    "\317\001\002\000\012\012\uffdf\015\uffdf\044\uffdf\071\uffdf" +
    "\001\002\000\006\057\321\076\uffe6\001\002\000\014\040" +
    "\246\043\245\044\253\065\252\066\251\001\002\000\004" +
    "\076\uffe7\001\002\000\012\012\uffef\015\uffef\044\uffef\071" +
    "\uffef\001\002\000\004\067\325\001\002\000\004\070\225" +
    "\001\002\000\046\003\uffe2\005\uffe2\011\uffe2\012\uffe2\013" +
    "\uffe2\014\uffe2\015\uffe2\024\uffe2\026\uffe2\027\uffe2\030\uffe2" +
    "\031\uffe2\032\uffe2\033\uffe2\034\uffe2\037\uffe2\044\uffe2\071" +
    "\uffe2\001\002\000\004\067\330\001\002\000\004\070\225" +
    "\001\002\000\046\003\uffe4\005\uffe4\011\uffe4\012\uffe4\013" +
    "\uffe4\014\uffe4\015\uffe4\024\uffe4\026\uffe4\027\uffe4\030\uffe4" +
    "\031\uffe4\032\uffe4\033\uffe4\034\uffe4\037\uffe4\044\uffe4\071" +
    "\uffe4\001\002\000\026\035\066\036\065\040\062\041\064" +
    "\042\060\043\063\044\073\047\061\064\070\066\067\001" +
    "\002\000\034\046\107\047\077\050\104\051\105\053\103" +
    "\054\106\055\076\056\102\060\112\061\110\062\111\063" +
    "\101\076\uffe5\001\002\000\030\035\066\036\065\040\062" +
    "\041\064\042\060\043\063\044\073\047\061\064\070\066" +
    "\067\067\335\001\002\000\004\076\341\001\002\000\034" +
    "\046\107\047\077\050\104\051\105\053\103\054\106\055" +
    "\076\056\102\060\112\061\110\062\111\063\101\067\337" +
    "\001\002\000\004\076\340\001\002\000\046\003\uffbb\005" +
    "\uffbb\011\uffbb\012\uffbb\013\uffbb\014\uffbb\015\uffbb\024\uffbb" +
    "\026\uffbb\027\uffbb\030\uffbb\031\uffbb\032\uffbb\033\uffbb\034" +
    "\uffbb\037\uffbb\044\uffbb\071\uffbb\001\002\000\046\003\uffba" +
    "\005\uffba\011\uffba\012\uffba\013\uffba\014\uffba\015\uffba\024" +
    "\uffba\026\uffba\027\uffba\030\uffba\031\uffba\032\uffba\033\uffba" +
    "\034\uffba\037\uffba\044\uffba\071\uffba\001\002\000\004\002" +
    "\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\340\000\004\002\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\032\003\020\005\026\014\032\015\041\024" +
    "\025\025\016\033\030\035\014\036\022\037\034\040\043" +
    "\041\021\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\030\005\054\014\032\015" +
    "\041\024\025\025\016\033\030\035\014\036\022\037\034" +
    "\040\043\041\021\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\042\047\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\032\003\052" +
    "\005\026\014\032\015\041\024\025\025\016\033\030\035" +
    "\014\036\022\037\034\040\043\041\021\001\001\000\002" +
    "\001\001\000\030\005\054\014\032\015\041\024\025\025" +
    "\016\033\030\035\014\036\022\037\034\040\043\041\021" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\007\073\011\070\012\071\013\074\001\001" +
    "\000\002\001\001\000\012\007\132\011\070\012\071\013" +
    "\074\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\007" +
    "\130\011\070\012\071\013\074\001\001\000\012\007\127" +
    "\011\070\012\071\013\074\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\007\126\011\070\012\071\013\074\001" +
    "\001\000\012\007\125\011\070\012\071\013\074\001\001" +
    "\000\002\001\001\000\012\007\123\011\070\012\071\013" +
    "\074\001\001\000\012\007\122\011\070\012\071\013\074" +
    "\001\001\000\012\007\121\011\070\012\071\013\074\001" +
    "\001\000\012\007\120\011\070\012\071\013\074\001\001" +
    "\000\012\007\117\011\070\012\071\013\074\001\001\000" +
    "\012\007\116\011\070\012\071\013\074\001\001\000\012" +
    "\007\115\011\070\012\071\013\074\001\001\000\012\007" +
    "\114\011\070\012\071\013\074\001\001\000\012\007\113" +
    "\011\070\012\071\013\074\001\001\000\012\007\112\011" +
    "\070\012\071\013\074\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\007\135\011\070\012\071\013\074\001\001" +
    "\000\002\001\001\000\004\042\137\001\001\000\002\001" +
    "\001\000\006\024\141\042\142\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\007\144\011\070\012\071\013" +
    "\074\001\001\000\002\001\001\000\004\026\147\001\001" +
    "\000\012\027\154\030\151\031\155\032\150\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\031\170\032\167" +
    "\001\001\000\002\001\001\000\012\007\163\011\070\012" +
    "\071\013\074\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\034\003\160\005\026\014\032\015" +
    "\041\024\025\025\016\033\030\035\014\036\022\037\034" +
    "\040\043\041\021\042\161\001\001\000\030\005\054\014" +
    "\032\015\041\024\025\025\016\033\030\035\014\036\022" +
    "\037\034\040\043\041\021\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\034\003\165\005\026" +
    "\014\032\015\041\024\025\025\016\033\030\035\014\036" +
    "\022\037\034\040\043\041\021\042\166\001\001\000\030" +
    "\005\054\014\032\015\041\024\025\025\016\033\030\035" +
    "\014\036\022\037\034\040\043\041\021\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\007" +
    "\172\011\070\012\071\013\074\001\001\000\002\001\001" +
    "\000\004\042\174\001\001\000\002\001\001\000\006\034" +
    "\176\041\177\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\007\202\011\070\012\071\013" +
    "\074\001\001\000\002\001\001\000\012\007\204\011\070" +
    "\012\071\013\074\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\042\211" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\007" +
    "\214\011\070\012\071\013\074\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\043\223\001\001" +
    "\000\002\001\001\000\016\004\232\006\227\016\230\020" +
    "\225\021\226\040\235\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\006\305\016\230\020\225\021\226\040\235" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\010\247\017" +
    "\246\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\007\262\011\070\012" +
    "\071\013\074\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\010" +
    "\265\017\246\001\001\000\002\001\001\000\006\010\267" +
    "\017\246\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\017\275\022\276" +
    "\023\277\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\017\275\023\303\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\017\275\022\314\023\277\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\010\321\017\246\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\043" +
    "\325\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\043\330\001\001\000\002\001\001\000\012\007\332\011" +
    "\070\012\071\013\074\001\001\000\002\001\001\000\012" +
    "\007\335\011\070\012\071\013\074\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    ArrayList<Response> errorsS = new ArrayList<>();
    public void syntax_error(Symbol sym) {
        errorsS.add(new Response(new ErrorS(sym.left,sym.right,sym.value,TOK.terminalNames[sym.sym])));
    }
    public void unrecovered_syntax_error(Symbol sym) throws java.lang.Exception {
        errorsS.add(new Response("Error Sintáctico sin recuperar."));
    }
    public String getErrors() {
        return errorsS.stream().map(Object::toString).collect(Collectors.joining("\n-> "));
    }
    public boolean isSuccessExecution() {
        return !(errorsS.size() > 0);
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INIT EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String start_val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INIT ::= RW_void RW_main TK_lpar TK_rpar TK_lbrc INSTRUCTIONS TK_rbrc 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INIT",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INIT ::= RW_void RW_main TK_lpar TK_rpar TK_lbrc TK_rbrc 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INIT",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INSTRUCTIONS ::= INSTRUCTIONS INSTRUCTION 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTIONS",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INSTRUCTIONS ::= INSTRUCTION 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTIONS",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // INSTRUCTION ::= DECLID TK_semicolon 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // INSTRUCTION ::= REASIGN TK_semicolon 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // INSTRUCTION ::= DECFUNC 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // INSTRUCTION ::= IFSTRUCT 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // INSTRUCTION ::= SWITCHSTRUCT 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // INSTRUCTION ::= LOOPFOR 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // INSTRUCTION ::= LOOPWHILE 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // INSTRUCTION ::= LOOPDOWHILE 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // INSTRUCTION ::= PRINT 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // INSTRUCTION ::= RW_break TK_semicolon 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // INSTRUCTION ::= error 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // INSTRUCTIONSEST ::= INSTRUCTIONSEST INSTRUCTIONEST 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTIONSEST",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // INSTRUCTIONSEST ::= INSTRUCTIONEST 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTIONSEST",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // INSTRUCTIONEST ::= DECLIDEST TK_semicolon 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTIONEST",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // INSTRUCTIONEST ::= REASIGN TK_semicolon 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTIONEST",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // INSTRUCTIONEST ::= ARRAYSDEF 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTIONEST",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // DECLID ::= TYPE TK_id TK_equal EXP 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLID",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // DECLID ::= TYPE TK_id 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLID",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // DECLIDEST ::= RW_string RW_title TK_equal EXPEST 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLIDEST",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // DECLIDEST ::= RW_string RW_titleX TK_equal EXPEST 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLIDEST",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // DECLIDEST ::= RW_string RW_titleY TK_equal EXPEST 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLIDEST",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // DECLIDEST ::= TYPEEST TK_id TK_equal EXPEST 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLIDEST",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // DECLIDEST ::= TYPEEST TK_id 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLIDEST",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // REASIGN ::= TK_id TK_equal EXP 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("REASIGN",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // DECFUNC ::= RW_void RW_defG TK_lpar TK_rpar ENVEST 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECFUNC",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // DECFUNC ::= RW_void RW_barG TK_lpar TK_rpar ENVEST 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECFUNC",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // DECFUNC ::= RW_void RW_pieG TK_lpar TK_rpar ENVEST 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECFUNC",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // SYMBSTAT ::= TK_dollar TK_lbrc RW_newVal TK_comma TK_string TK_comma TK_string TK_rbrc 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SYMBSTAT",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // ARRAYSDEF ::= RW_string TK_lbrk TK_rbrk RW_xAxis TK_equal TK_lbrc VALUES TK_rbrc TK_semicolon 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARRAYSDEF",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // ARRAYSDEF ::= RW_double TK_lbrk TK_rbrk RW_values TK_equal TK_lbrc VALUES TK_rbrc TK_semicolon 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARRAYSDEF",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // VALUES ::= VALUES TK_comma VALUE 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VALUES",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // VALUES ::= VALUE 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VALUES",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // VALUE ::= SYMBSTAT 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VALUE",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // VALUE ::= TK_string 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VALUE",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // VALUE ::= TK_id 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VALUE",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // ENVEST ::= TK_lbrc INSTRUCTIONSEST TK_rbrc 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ENVEST",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // ENVEST ::= TK_lbrc TK_rbrc 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ENVEST",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // TYPEEST ::= RW_string 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TYPEEST",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // TYPEEST ::= RW_double 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TYPEEST",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // EXPEST ::= SYMBSTAT 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPEST",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // EXPEST ::= TK_id 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPEST",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // EXPEST ::= TK_string 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPEST",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // EXPEST ::= TK_double 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPEST",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // EXPEST ::= TK_lpar EXP TK_rpar 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPEST",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // IFSTRUCT ::= RW_if TK_lpar EXP TK_rpar ENV RW_else IFSTRUCT 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IFSTRUCT",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // IFSTRUCT ::= RW_if TK_lpar EXP TK_rpar ENV RW_else ENV 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IFSTRUCT",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // IFSTRUCT ::= RW_if TK_lpar EXP TK_rpar ENV 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IFSTRUCT",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // SWITCHSTRUCT ::= RW_switch TK_lpar EXP TK_rpar ENVS 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String exp = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SWITCHSTRUCT",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // ENVS ::= TK_lbrc CASESDEFAULT TK_rbrc 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ENVS",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // ENVS ::= TK_lbrc TK_rbrc 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ENVS",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // CASESDEFAULT ::= CASES DEFAULT 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CASESDEFAULT",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // CASESDEFAULT ::= CASES 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CASESDEFAULT",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // CASESDEFAULT ::= DEFAULT 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CASESDEFAULT",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // CASES ::= CASES CASE 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CASES",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // CASES ::= CASE 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CASES",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // CASE ::= RW_case EXP TK_colon INSTRUCTIONS 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CASE",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // CASE ::= RW_case EXP TK_colon ENV 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CASE",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // CASE ::= RW_case EXP TK_colon 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CASE",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // DEFAULT ::= RW_default TK_colon INSTRUCTIONS 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DEFAULT",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // DEFAULT ::= RW_default TK_colon ENV 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DEFAULT",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // DEFAULT ::= RW_default TK_colon 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DEFAULT",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // LOOPFOR ::= RW_for TK_lpar ARGSFOR TK_rpar ENV 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LOOPFOR",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // ARGSFOR ::= TYPE TK_id TK_equal EXP TK_semicolon EXP TK_semicolon TK_id TK_inc 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARGSFOR",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // LOOPWHILE ::= RW_while TK_lpar EXP TK_rpar ENV 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LOOPWHILE",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // LOOPDOWHILE ::= RW_do ENV RW_while TK_lpar EXP TK_rpar TK_semicolon 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LOOPDOWHILE",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // PRINT ::= RW_print TK_lpar EXP TK_rpar TK_semicolon 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PRINT",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // PRINT ::= RW_print TK_lpar TK_rpar TK_semicolon 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PRINT",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // ENV ::= TK_lbrc INSTRUCTIONS TK_rbrc 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ENV",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // ENV ::= TK_lbrc TK_rbrc 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ENV",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // TYPE ::= RW_string 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TYPE",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // TYPE ::= RW_int 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TYPE",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // TYPE ::= RW_bool 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TYPE",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // TYPE ::= RW_char 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TYPE",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // TYPE ::= RW_double 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TYPE",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // EXP ::= ARITHMETICS 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // EXP ::= RELATIONALS 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // EXP ::= LOGICS 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // EXP ::= TK_id 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // EXP ::= TK_string 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // EXP ::= TK_char 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // EXP ::= TK_int 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // EXP ::= TK_double 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // EXP ::= RW_true 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // EXP ::= RW_false 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // EXP ::= TK_lpar EXP TK_rpar 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // ARITHMETICS ::= EXP TK_plus EXP 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARITHMETICS",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // ARITHMETICS ::= EXP TK_minus EXP 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARITHMETICS",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // ARITHMETICS ::= EXP TK_mult EXP 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARITHMETICS",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // ARITHMETICS ::= EXP TK_div EXP 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARITHMETICS",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // ARITHMETICS ::= TK_minus EXP 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARITHMETICS",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // RELATIONALS ::= EXP TK_equequ EXP 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RELATIONALS",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // RELATIONALS ::= EXP TK_notequ EXP 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RELATIONALS",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // RELATIONALS ::= EXP TK_lessequ EXP 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RELATIONALS",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // RELATIONALS ::= EXP TK_moreequ EXP 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RELATIONALS",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // RELATIONALS ::= EXP TK_less EXP 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RELATIONALS",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // RELATIONALS ::= EXP TK_more EXP 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RELATIONALS",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // LOGICS ::= EXP TK_and EXP 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LOGICS",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // LOGICS ::= EXP TK_or EXP 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LOGICS",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // LOGICS ::= TK_not EXP 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LOGICS",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
