
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Language;

import java.util.ArrayList;
import java.util.stream.Collectors;
import java_cup.runtime.*;
import Components.Response;
import Components.ErrorS;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return TOK.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\145\000\002\002\004\000\002\002\011\000\002\002" +
    "\010\000\002\003\004\000\002\003\003\000\002\005\004" +
    "\000\002\005\004\000\002\005\003\000\002\005\003\000" +
    "\002\005\003\000\002\005\003\000\002\005\003\000\002" +
    "\005\003\000\002\005\003\000\002\005\004\000\002\005" +
    "\003\000\002\004\004\000\002\004\003\000\002\006\004" +
    "\000\002\006\004\000\002\006\003\000\002\014\006\000" +
    "\002\014\004\000\002\020\006\000\002\020\004\000\002" +
    "\040\005\000\002\015\007\000\002\015\007\000\002\015" +
    "\007\000\002\017\012\000\002\021\013\000\002\021\013" +
    "\000\002\022\005\000\002\022\003\000\002\023\003\000" +
    "\002\023\003\000\002\023\003\000\002\043\005\000\002" +
    "\043\004\000\002\016\003\000\002\016\003\000\002\010" +
    "\003\000\002\010\003\000\002\010\003\000\002\010\003" +
    "\000\002\010\005\000\002\024\011\000\002\024\011\000" +
    "\002\024\007\000\002\025\007\000\002\026\005\000\002" +
    "\026\004\000\002\027\004\000\002\027\003\000\002\027" +
    "\003\000\002\030\004\000\002\030\003\000\002\031\006" +
    "\000\002\031\006\000\002\031\005\000\002\032\005\000" +
    "\002\032\005\000\002\032\004\000\002\033\007\000\002" +
    "\034\013\000\002\035\007\000\002\036\011\000\002\037" +
    "\007\000\002\037\006\000\002\042\005\000\002\042\004" +
    "\000\002\041\003\000\002\041\003\000\002\041\003\000" +
    "\002\041\003\000\002\041\003\000\002\007\003\000\002" +
    "\007\003\000\002\007\003\000\002\007\003\000\002\007" +
    "\003\000\002\007\003\000\002\007\003\000\002\007\003" +
    "\000\002\007\003\000\002\007\003\000\002\007\005\000" +
    "\002\011\005\000\002\011\005\000\002\011\005\000\002" +
    "\011\005\000\002\011\004\000\002\012\005\000\002\012" +
    "\005\000\002\012\005\000\002\012\005\000\002\012\005" +
    "\000\002\012\005\000\002\013\005\000\002\013\005\000" +
    "\002\013\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\327\000\004\005\005\001\002\000\004\002\331\001" +
    "\002\000\004\004\006\001\002\000\004\061\007\001\002" +
    "\000\004\062\010\001\002\000\004\063\011\001\002\000" +
    "\042\003\036\005\020\011\043\012\034\013\037\014\016" +
    "\015\040\017\032\021\027\024\024\025\025\026\042\027" +
    "\045\032\012\037\014\064\013\001\002\000\004\061\323" +
    "\001\002\000\004\002\uffff\001\002\000\004\052\321\001" +
    "\002\000\046\003\ufff6\005\ufff6\011\ufff6\012\ufff6\013\ufff6" +
    "\014\ufff6\015\ufff6\017\ufff6\021\ufff6\022\ufff6\023\ufff6\024" +
    "\ufff6\025\ufff6\026\ufff6\027\ufff6\032\ufff6\037\ufff6\064\ufff6" +
    "\001\002\000\004\037\uffb8\001\002\000\046\003\ufff8\005" +
    "\ufff8\011\ufff8\012\ufff8\013\ufff8\014\ufff8\015\ufff8\017\ufff8" +
    "\021\ufff8\022\ufff8\023\ufff8\024\ufff8\025\ufff8\026\ufff8\027" +
    "\ufff8\032\ufff8\037\ufff8\064\ufff8\001\002\000\010\006\217" +
    "\007\221\010\220\001\002\000\042\003\036\005\020\011" +
    "\043\012\034\013\037\014\016\015\040\017\032\021\027" +
    "\024\024\025\025\026\042\027\045\032\012\037\014\064" +
    "\216\001\002\000\004\037\213\001\002\000\046\003\ufff5" +
    "\005\ufff5\011\ufff5\012\ufff5\013\ufff5\014\ufff5\015\ufff5\017" +
    "\ufff5\021\ufff5\022\ufff5\023\ufff5\024\ufff5\025\ufff5\026\ufff5" +
    "\027\ufff5\032\ufff5\037\ufff5\064\ufff5\001\002\000\004\061" +
    "\176\001\002\000\004\061\172\001\002\000\046\003\ufff9" +
    "\005\ufff9\011\ufff9\012\ufff9\013\ufff9\014\ufff9\015\ufff9\017" +
    "\ufff9\021\ufff9\022\ufff9\023\ufff9\024\ufff9\025\ufff9\026\ufff9" +
    "\027\ufff9\032\ufff9\037\ufff9\064\ufff9\001\002\000\004\061" +
    "\144\001\002\000\046\003\ufffd\005\ufffd\011\ufffd\012\ufffd" +
    "\013\ufffd\014\ufffd\015\ufffd\017\ufffd\021\ufffd\022\ufffd\023" +
    "\ufffd\024\ufffd\025\ufffd\026\ufffd\027\ufffd\032\ufffd\037\ufffd" +
    "\064\ufffd\001\002\000\046\003\ufff7\005\ufff7\011\ufff7\012" +
    "\ufff7\013\ufff7\014\ufff7\015\ufff7\017\ufff7\021\ufff7\022\ufff7" +
    "\023\ufff7\024\ufff7\025\ufff7\026\ufff7\027\ufff7\032\ufff7\037" +
    "\ufff7\064\ufff7\001\002\000\004\061\135\001\002\000\004" +
    "\071\134\001\002\000\004\037\uffb6\001\002\000\046\003" +
    "\ufff4\005\ufff4\011\ufff4\012\ufff4\013\ufff4\014\ufff4\015\ufff4" +
    "\017\ufff4\021\ufff4\022\ufff4\023\ufff4\024\ufff4\025\ufff4\026" +
    "\ufff4\027\ufff4\032\ufff4\037\ufff4\064\ufff4\001\002\000\046" +
    "\003\ufff2\005\ufff2\011\ufff2\012\ufff2\013\ufff2\014\ufff2\015" +
    "\ufff2\017\ufff2\021\ufff2\022\ufff2\023\ufff2\024\ufff2\025\ufff2" +
    "\026\ufff2\027\ufff2\032\ufff2\037\ufff2\064\ufff2\001\002\000" +
    "\004\037\uffb7\001\002\000\004\037\uffba\001\002\000\046" +
    "\003\ufffa\005\ufffa\011\ufffa\012\ufffa\013\ufffa\014\ufffa\015" +
    "\ufffa\017\ufffa\021\ufffa\022\ufffa\023\ufffa\024\ufffa\025\ufffa" +
    "\026\ufffa\027\ufffa\032\ufffa\037\ufffa\064\ufffa\001\002\000" +
    "\004\063\051\001\002\000\004\037\uffb9\001\002\000\004" +
    "\071\047\001\002\000\004\071\046\001\002\000\046\003" +
    "\ufff3\005\ufff3\011\ufff3\012\ufff3\013\ufff3\014\ufff3\015\ufff3" +
    "\017\ufff3\021\ufff3\022\ufff3\023\ufff3\024\ufff3\025\ufff3\026" +
    "\ufff3\027\ufff3\032\ufff3\037\ufff3\064\ufff3\001\002\000\046" +
    "\003\ufffb\005\ufffb\011\ufffb\012\ufffb\013\ufffb\014\ufffb\015" +
    "\ufffb\017\ufffb\021\ufffb\022\ufffb\023\ufffb\024\ufffb\025\ufffb" +
    "\026\ufffb\027\ufffb\032\ufffb\037\ufffb\064\ufffb\001\002\000" +
    "\004\025\056\001\002\000\042\003\036\005\020\011\043" +
    "\012\034\013\037\014\016\015\040\017\032\021\027\024" +
    "\024\025\025\026\042\027\045\032\012\037\014\064\052" +
    "\001\002\000\050\003\uffbb\005\uffbb\011\uffbb\012\uffbb\013" +
    "\uffbb\014\uffbb\015\uffbb\017\uffbb\020\uffbb\021\uffbb\022\uffbb" +
    "\023\uffbb\024\uffbb\025\uffbb\026\uffbb\027\uffbb\032\uffbb\037" +
    "\uffbb\064\uffbb\001\002\000\042\003\036\005\020\011\043" +
    "\012\034\013\037\014\016\015\040\017\032\021\027\024" +
    "\024\025\025\026\042\027\045\032\012\037\014\064\054" +
    "\001\002\000\050\003\uffbc\005\uffbc\011\uffbc\012\uffbc\013" +
    "\uffbc\014\uffbc\015\uffbc\017\uffbc\020\uffbc\021\uffbc\022\uffbc" +
    "\023\uffbc\024\uffbc\025\uffbc\026\uffbc\027\uffbc\032\uffbc\037" +
    "\uffbc\064\uffbc\001\002\000\046\003\ufffe\005\ufffe\011\ufffe" +
    "\012\ufffe\013\ufffe\014\ufffe\015\ufffe\017\ufffe\021\ufffe\022" +
    "\ufffe\023\ufffe\024\ufffe\025\ufffe\026\ufffe\027\ufffe\032\ufffe" +
    "\037\ufffe\064\ufffe\001\002\000\004\061\057\001\002\000" +
    "\026\030\065\031\066\033\062\034\064\035\060\036\063" +
    "\037\073\042\061\057\070\061\067\001\002\000\040\041" +
    "\uffaf\042\uffaf\043\uffaf\044\uffaf\046\uffaf\047\uffaf\050\uffaf" +
    "\051\uffaf\053\uffaf\054\uffaf\055\uffaf\056\uffaf\062\uffaf\070" +
    "\uffaf\071\uffaf\001\002\000\026\030\065\031\066\033\062" +
    "\034\064\035\060\036\063\037\073\042\061\057\070\061" +
    "\067\001\002\000\040\041\uffb1\042\uffb1\043\uffb1\044\uffb1" +
    "\046\uffb1\047\uffb1\050\uffb1\051\uffb1\053\uffb1\054\uffb1\055" +
    "\uffb1\056\uffb1\062\uffb1\070\uffb1\071\uffb1\001\002\000\040" +
    "\041\uffae\042\uffae\043\uffae\044\uffae\046\uffae\047\uffae\050" +
    "\uffae\051\uffae\053\uffae\054\uffae\055\uffae\056\uffae\062\uffae" +
    "\070\uffae\071\uffae\001\002\000\040\041\uffb0\042\uffb0\043" +
    "\uffb0\044\uffb0\046\uffb0\047\uffb0\050\uffb0\051\uffb0\053\uffb0" +
    "\054\uffb0\055\uffb0\056\uffb0\062\uffb0\070\uffb0\071\uffb0\001" +
    "\002\000\040\041\uffad\042\uffad\043\uffad\044\uffad\046\uffad" +
    "\047\uffad\050\uffad\051\uffad\053\uffad\054\uffad\055\uffad\056" +
    "\uffad\062\uffad\070\uffad\071\uffad\001\002\000\040\041\uffac" +
    "\042\uffac\043\uffac\044\uffac\046\uffac\047\uffac\050\uffac\051" +
    "\uffac\053\uffac\054\uffac\055\uffac\056\uffac\062\uffac\070\uffac" +
    "\071\uffac\001\002\000\026\030\065\031\066\033\062\034" +
    "\064\035\060\036\063\037\073\042\061\057\070\061\067" +
    "\001\002\000\026\030\065\031\066\033\062\034\064\035" +
    "\060\036\063\037\073\042\061\057\070\061\067\001\002" +
    "\000\040\041\uffb5\042\uffb5\043\uffb5\044\uffb5\046\uffb5\047" +
    "\uffb5\050\uffb5\051\uffb5\053\uffb5\054\uffb5\055\uffb5\056\uffb5" +
    "\062\uffb5\070\uffb5\071\uffb5\001\002\000\040\041\uffb4\042" +
    "\uffb4\043\uffb4\044\uffb4\046\uffb4\047\uffb4\050\uffb4\051\uffb4" +
    "\053\uffb4\054\uffb4\055\uffb4\056\uffb4\062\uffb4\070\uffb4\071" +
    "\uffb4\001\002\000\040\041\uffb2\042\uffb2\043\uffb2\044\uffb2" +
    "\046\uffb2\047\uffb2\050\uffb2\051\uffb2\053\uffb2\054\uffb2\055" +
    "\uffb2\056\uffb2\062\uffb2\070\uffb2\071\uffb2\001\002\000\034" +
    "\041\107\042\077\043\104\044\105\046\103\047\106\050" +
    "\076\051\102\053\112\054\110\055\111\056\101\062\100" +
    "\001\002\000\040\041\uffb3\042\uffb3\043\uffb3\044\uffb3\046" +
    "\uffb3\047\uffb3\050\uffb3\051\uffb3\053\uffb3\054\uffb3\055\uffb3" +
    "\056\uffb3\062\uffb3\070\uffb3\071\uffb3\001\002\000\026\030" +
    "\065\031\066\033\062\034\064\035\060\036\063\037\073" +
    "\042\061\057\070\061\067\001\002\000\026\030\065\031" +
    "\066\033\062\034\064\035\060\036\063\037\073\042\061" +
    "\057\070\061\067\001\002\000\004\071\125\001\002\000" +
    "\026\030\065\031\066\033\062\034\064\035\060\036\063" +
    "\037\073\042\061\057\070\061\067\001\002\000\026\030" +
    "\065\031\066\033\062\034\064\035\060\036\063\037\073" +
    "\042\061\057\070\061\067\001\002\000\026\030\065\031" +
    "\066\033\062\034\064\035\060\036\063\037\073\042\061" +
    "\057\070\061\067\001\002\000\026\030\065\031\066\033" +
    "\062\034\064\035\060\036\063\037\073\042\061\057\070" +
    "\061\067\001\002\000\026\030\065\031\066\033\062\034" +
    "\064\035\060\036\063\037\073\042\061\057\070\061\067" +
    "\001\002\000\026\030\065\031\066\033\062\034\064\035" +
    "\060\036\063\037\073\042\061\057\070\061\067\001\002" +
    "\000\026\030\065\031\066\033\062\034\064\035\060\036" +
    "\063\037\073\042\061\057\070\061\067\001\002\000\026" +
    "\030\065\031\066\033\062\034\064\035\060\036\063\037" +
    "\073\042\061\057\070\061\067\001\002\000\026\030\065" +
    "\031\066\033\062\034\064\035\060\036\063\037\073\042" +
    "\061\057\070\061\067\001\002\000\026\030\065\031\066" +
    "\033\062\034\064\035\060\036\063\037\073\042\061\057" +
    "\070\061\067\001\002\000\040\041\107\042\077\043\104" +
    "\044\105\046\uffa1\047\uffa1\050\uffa1\051\uffa1\053\uffa1\054" +
    "\uffa1\055\uffa1\056\uffa1\062\uffa1\070\uffa1\071\uffa1\001\002" +
    "\000\040\041\107\042\077\043\104\044\105\046\103\047" +
    "\106\050\076\051\102\053\112\054\110\055\uff9f\056\uff9f" +
    "\062\uff9f\070\uff9f\071\uff9f\001\002\000\040\041\107\042" +
    "\077\043\104\044\105\046\uffa0\047\uffa0\050\uffa0\051\uffa0" +
    "\053\uffa0\054\uffa0\055\uffa0\056\uffa0\062\uffa0\070\uffa0\071" +
    "\uffa0\001\002\000\040\041\uffaa\042\uffaa\043\104\044\105" +
    "\046\uffaa\047\uffaa\050\uffaa\051\uffaa\053\uffaa\054\uffaa\055" +
    "\uffaa\056\uffaa\062\uffaa\070\uffaa\071\uffaa\001\002\000\040" +
    "\041\107\042\077\043\104\044\105\046\uffa4\047\uffa4\050" +
    "\076\051\102\053\112\054\110\055\uffa4\056\uffa4\062\uffa4" +
    "\070\uffa4\071\uffa4\001\002\000\040\041\uffa7\042\uffa7\043" +
    "\uffa7\044\uffa7\046\uffa7\047\uffa7\050\uffa7\051\uffa7\053\uffa7" +
    "\054\uffa7\055\uffa7\056\uffa7\062\uffa7\070\uffa7\071\uffa7\001" +
    "\002\000\040\041\uffa8\042\uffa8\043\uffa8\044\uffa8\046\uffa8" +
    "\047\uffa8\050\uffa8\051\uffa8\053\uffa8\054\uffa8\055\uffa8\056" +
    "\uffa8\062\uffa8\070\uffa8\071\uffa8\001\002\000\040\041\107" +
    "\042\077\043\104\044\105\046\uffa5\047\uffa5\050\076\051" +
    "\102\053\112\054\110\055\uffa5\056\uffa5\062\uffa5\070\uffa5" +
    "\071\uffa5\001\002\000\040\041\107\042\077\043\104\044" +
    "\105\046\uffa2\047\uffa2\050\uffa2\051\uffa2\053\uffa2\054\uffa2" +
    "\055\uffa2\056\uffa2\062\uffa2\070\uffa2\071\uffa2\001\002\000" +
    "\040\041\107\042\077\043\104\044\105\046\103\047\106" +
    "\050\076\051\102\053\112\054\110\055\111\056\uff9e\062" +
    "\uff9e\070\uff9e\071\uff9e\001\002\000\046\003\uffbf\005\uffbf" +
    "\011\uffbf\012\uffbf\013\uffbf\014\uffbf\015\uffbf\017\uffbf\021" +
    "\uffbf\022\uffbf\023\uffbf\024\uffbf\025\uffbf\026\uffbf\027\uffbf" +
    "\032\uffbf\037\uffbf\064\uffbf\001\002\000\040\041\uffa9\042" +
    "\uffa9\043\104\044\105\046\uffa9\047\uffa9\050\uffa9\051\uffa9" +
    "\053\uffa9\054\uffa9\055\uffa9\056\uffa9\062\uffa9\070\uffa9\071" +
    "\uffa9\001\002\000\040\041\107\042\077\043\104\044\105" +
    "\046\uffa3\047\uffa3\050\uffa3\051\uffa3\053\uffa3\054\uffa3\055" +
    "\uffa3\056\uffa3\062\uffa3\070\uffa3\071\uffa3\001\002\000\040" +
    "\041\107\042\077\043\104\044\105\046\103\047\106\050" +
    "\076\051\102\053\112\054\110\055\uff9d\056\uff9d\062\uff9d" +
    "\070\uff9d\071\uff9d\001\002\000\034\041\107\042\077\043" +
    "\104\044\105\046\103\047\106\050\076\051\102\053\112" +
    "\054\110\055\111\056\101\062\132\001\002\000\040\041" +
    "\uffab\042\uffab\043\uffab\044\uffab\046\uffab\047\uffab\050\uffab" +
    "\051\uffab\053\uffab\054\uffab\055\uffab\056\uffab\062\uffab\070" +
    "\uffab\071\uffab\001\002\000\040\041\uffa6\042\uffa6\043\uffa6" +
    "\044\uffa6\046\uffa6\047\uffa6\050\uffa6\051\uffa6\053\uffa6\054" +
    "\uffa6\055\uffa6\056\uffa6\062\uffa6\070\uffa6\071\uffa6\001\002" +
    "\000\046\003\ufffc\005\ufffc\011\ufffc\012\ufffc\013\ufffc\014" +
    "\ufffc\015\ufffc\017\ufffc\021\ufffc\022\ufffc\023\ufffc\024\ufffc" +
    "\025\ufffc\026\ufffc\027\ufffc\032\ufffc\037\ufffc\064\ufffc\001" +
    "\002\000\026\030\065\031\066\033\062\034\064\035\060" +
    "\036\063\037\073\042\061\057\070\061\067\001\002\000" +
    "\034\041\107\042\077\043\104\044\105\046\103\047\106" +
    "\050\076\051\102\053\112\054\110\055\111\056\101\062" +
    "\137\001\002\000\004\063\051\001\002\000\050\003\uffd1" +
    "\005\uffd1\011\uffd1\012\uffd1\013\uffd1\014\uffd1\015\uffd1\017" +
    "\uffd1\020\141\021\uffd1\022\uffd1\023\uffd1\024\uffd1\025\uffd1" +
    "\026\uffd1\027\uffd1\032\uffd1\037\uffd1\064\uffd1\001\002\000" +
    "\006\017\032\063\051\001\002\000\046\003\uffd3\005\uffd3" +
    "\011\uffd3\012\uffd3\013\uffd3\014\uffd3\015\uffd3\017\uffd3\021" +
    "\uffd3\022\uffd3\023\uffd3\024\uffd3\025\uffd3\026\uffd3\027\uffd3" +
    "\032\uffd3\037\uffd3\064\uffd3\001\002\000\046\003\uffd2\005" +
    "\uffd2\011\uffd2\012\uffd2\013\uffd2\014\uffd2\015\uffd2\017\uffd2" +
    "\021\uffd2\022\uffd2\023\uffd2\024\uffd2\025\uffd2\026\uffd2\027" +
    "\uffd2\032\uffd2\037\uffd2\064\uffd2\001\002\000\026\030\065" +
    "\031\066\033\062\034\064\035\060\036\063\037\073\042" +
    "\061\057\070\061\067\001\002\000\034\041\107\042\077" +
    "\043\104\044\105\046\103\047\106\050\076\051\102\053" +
    "\112\054\110\055\111\056\101\062\146\001\002\000\004" +
    "\063\147\001\002\000\010\022\154\023\157\064\153\001" +
    "\002\000\046\003\uffd0\005\uffd0\011\uffd0\012\uffd0\013\uffd0" +
    "\014\uffd0\015\uffd0\017\uffd0\021\uffd0\022\uffd0\023\uffd0\024" +
    "\uffd0\025\uffd0\026\uffd0\027\uffd0\032\uffd0\037\uffd0\064\uffd0" +
    "\001\002\000\004\064\uffcb\001\002\000\010\022\154\023" +
    "\157\064\uffcc\001\002\000\046\003\uffce\005\uffce\011\uffce" +
    "\012\uffce\013\uffce\014\uffce\015\uffce\017\uffce\021\uffce\022" +
    "\uffce\023\uffce\024\uffce\025\uffce\026\uffce\027\uffce\032\uffce" +
    "\037\uffce\064\uffce\001\002\000\026\030\065\031\066\033" +
    "\062\034\064\035\060\036\063\037\073\042\061\057\070" +
    "\061\067\001\002\000\004\064\163\001\002\000\010\022" +
    "\uffc9\023\uffc9\064\uffc9\001\002\000\004\070\160\001\002" +
    "\000\044\003\036\005\020\011\043\012\034\013\037\014" +
    "\016\015\040\017\032\021\027\024\024\025\025\026\042" +
    "\027\045\032\012\037\014\063\051\064\uffc3\001\002\000" +
    "\042\003\036\005\020\011\043\012\034\013\037\014\016" +
    "\015\040\017\032\021\027\024\024\025\025\026\042\027" +
    "\045\032\012\037\014\064\uffc5\001\002\000\004\064\uffc4" +
    "\001\002\000\046\003\uffcf\005\uffcf\011\uffcf\012\uffcf\013" +
    "\uffcf\014\uffcf\015\uffcf\017\uffcf\021\uffcf\022\uffcf\023\uffcf" +
    "\024\uffcf\025\uffcf\026\uffcf\027\uffcf\032\uffcf\037\uffcf\064" +
    "\uffcf\001\002\000\034\041\107\042\077\043\104\044\105" +
    "\046\103\047\106\050\076\051\102\053\112\054\110\055" +
    "\111\056\101\070\165\001\002\000\050\003\036\005\020" +
    "\011\043\012\034\013\037\014\016\015\040\017\032\021" +
    "\027\022\uffc6\023\uffc6\024\024\025\025\026\042\027\045" +
    "\032\012\037\014\063\051\064\uffc6\001\002\000\046\003" +
    "\036\005\020\011\043\012\034\013\037\014\016\015\040" +
    "\017\032\021\027\022\uffc8\023\uffc8\024\024\025\025\026" +
    "\042\027\045\032\012\037\014\064\uffc8\001\002\000\010" +
    "\022\uffc7\023\uffc7\064\uffc7\001\002\000\004\064\uffcd\001" +
    "\002\000\010\022\uffca\023\uffca\064\uffca\001\002\000\026" +
    "\030\065\031\066\033\062\034\064\035\060\036\063\037" +
    "\073\042\061\057\070\061\067\001\002\000\034\041\107" +
    "\042\077\043\104\044\105\046\103\047\106\050\076\051" +
    "\102\053\112\054\110\055\111\056\101\062\174\001\002" +
    "\000\004\063\051\001\002\000\046\003\uffc0\005\uffc0\011" +
    "\uffc0\012\uffc0\013\uffc0\014\uffc0\015\uffc0\017\uffc0\021\uffc0" +
    "\022\uffc0\023\uffc0\024\uffc0\025\uffc0\026\uffc0\027\uffc0\032" +
    "\uffc0\037\uffc0\064\uffc0\001\002\000\014\011\043\012\034" +
    "\013\037\014\016\015\040\001\002\000\004\062\211\001" +
    "\002\000\004\037\201\001\002\000\004\052\202\001\002" +
    "\000\026\030\065\031\066\033\062\034\064\035\060\036" +
    "\063\037\073\042\061\057\070\061\067\001\002\000\034" +
    "\041\107\042\077\043\104\044\105\046\103\047\106\050" +
    "\076\051\102\053\112\054\110\055\111\056\101\071\204" +
    "\001\002\000\026\030\065\031\066\033\062\034\064\035" +
    "\060\036\063\037\073\042\061\057\070\061\067\001\002" +
    "\000\034\041\107\042\077\043\104\044\105\046\103\047" +
    "\106\050\076\051\102\053\112\054\110\055\111\056\101" +
    "\071\206\001\002\000\004\037\207\001\002\000\004\040" +
    "\210\001\002\000\004\062\uffc1\001\002\000\004\063\051" +
    "\001\002\000\046\003\uffc2\005\uffc2\011\uffc2\012\uffc2\013" +
    "\uffc2\014\uffc2\015\uffc2\017\uffc2\021\uffc2\022\uffc2\023\uffc2" +
    "\024\uffc2\025\uffc2\026\uffc2\027\uffc2\032\uffc2\037\uffc2\064" +
    "\uffc2\001\002\000\006\052\214\071\uffeb\001\002\000\026" +
    "\030\065\031\066\033\062\034\064\035\060\036\063\037" +
    "\073\042\061\057\070\061\067\001\002\000\034\041\107" +
    "\042\077\043\104\044\105\046\103\047\106\050\076\051" +
    "\102\053\112\054\110\055\111\056\101\071\uffec\001\002" +
    "\000\004\002\000\001\002\000\004\061\316\001\002\000" +
    "\004\061\313\001\002\000\004\061\222\001\002\000\004" +
    "\062\223\001\002\000\004\063\225\001\002\000\046\003" +
    "\uffe6\005\uffe6\011\uffe6\012\uffe6\013\uffe6\014\uffe6\015\uffe6" +
    "\017\uffe6\021\uffe6\022\uffe6\023\uffe6\024\uffe6\025\uffe6\026" +
    "\uffe6\027\uffe6\032\uffe6\037\uffe6\064\uffe6\001\002\000\012" +
    "\012\232\015\235\037\014\064\234\001\002\000\004\071" +
    "\312\001\002\000\012\012\uffed\015\uffed\037\uffed\064\uffed" +
    "\001\002\000\012\012\ufff0\015\ufff0\037\ufff0\064\ufff0\001" +
    "\002\000\004\037\300\001\002\000\006\037\uffd9\065\270" +
    "\001\002\000\012\012\232\015\235\037\014\064\267\001" +
    "\002\000\046\003\uffdb\005\uffdb\011\uffdb\012\uffdb\013\uffdb" +
    "\014\uffdb\015\uffdb\017\uffdb\021\uffdb\022\uffdb\023\uffdb\024" +
    "\uffdb\025\uffdb\026\uffdb\027\uffdb\032\uffdb\037\uffdb\064\uffdb" +
    "\001\002\000\006\037\uffda\065\240\001\002\000\004\071" +
    "\237\001\002\000\012\012\uffee\015\uffee\037\uffee\064\uffee" +
    "\001\002\000\004\066\241\001\002\000\004\037\242\001" +
    "\002\000\004\052\243\001\002\000\004\063\244\001\002" +
    "\000\010\033\245\037\252\060\251\001\002\000\006\064" +
    "\uffde\067\uffde\001\002\000\006\064\uffdf\067\uffdf\001\002" +
    "\000\006\064\262\067\263\001\002\000\006\064\uffe0\067" +
    "\uffe0\001\002\000\004\063\253\001\002\000\006\064\uffdd" +
    "\067\uffdd\001\002\000\004\016\254\001\002\000\004\067" +
    "\255\001\002\000\004\033\256\001\002\000\004\067\257" +
    "\001\002\000\004\033\260\001\002\000\004\064\261\001" +
    "\002\000\010\064\uffe4\067\uffe4\071\uffe4\001\002\000\004" +
    "\071\265\001\002\000\010\033\245\037\252\060\251\001" +
    "\002\000\006\064\uffe1\067\uffe1\001\002\000\012\012\uffe3" +
    "\015\uffe3\037\uffe3\064\uffe3\001\002\000\012\012\ufff1\015" +
    "\ufff1\037\ufff1\064\ufff1\001\002\000\046\003\uffdc\005\uffdc" +
    "\011\uffdc\012\uffdc\013\uffdc\014\uffdc\015\uffdc\017\uffdc\021" +
    "\uffdc\022\uffdc\023\uffdc\024\uffdc\025\uffdc\026\uffdc\027\uffdc" +
    "\032\uffdc\037\uffdc\064\uffdc\001\002\000\004\066\271\001" +
    "\002\000\004\037\272\001\002\000\004\052\273\001\002" +
    "\000\004\063\274\001\002\000\010\033\245\037\252\060" +
    "\251\001\002\000\006\064\276\067\263\001\002\000\004" +
    "\071\277\001\002\000\012\012\uffe2\015\uffe2\037\uffe2\064" +
    "\uffe2\001\002\000\006\052\301\071\uffe9\001\002\000\014" +
    "\033\303\036\302\037\307\060\251\061\306\001\002\000" +
    "\004\071\uffd5\001\002\000\004\071\uffd6\001\002\000\004" +
    "\071\uffd8\001\002\000\004\071\uffea\001\002\000\026\030" +
    "\065\031\066\033\062\034\064\035\060\036\063\037\073" +
    "\042\061\057\070\061\067\001\002\000\004\071\uffd7\001" +
    "\002\000\034\041\107\042\077\043\104\044\105\046\103" +
    "\047\106\050\076\051\102\053\112\054\110\055\111\056" +
    "\101\062\311\001\002\000\004\071\uffd4\001\002\000\012" +
    "\012\uffef\015\uffef\037\uffef\064\uffef\001\002\000\004\062" +
    "\314\001\002\000\004\063\225\001\002\000\046\003\uffe5" +
    "\005\uffe5\011\uffe5\012\uffe5\013\uffe5\014\uffe5\015\uffe5\017" +
    "\uffe5\021\uffe5\022\uffe5\023\uffe5\024\uffe5\025\uffe5\026\uffe5" +
    "\027\uffe5\032\uffe5\037\uffe5\064\uffe5\001\002\000\004\062" +
    "\317\001\002\000\004\063\225\001\002\000\046\003\uffe7" +
    "\005\uffe7\011\uffe7\012\uffe7\013\uffe7\014\uffe7\015\uffe7\017" +
    "\uffe7\021\uffe7\022\uffe7\023\uffe7\024\uffe7\025\uffe7\026\uffe7" +
    "\027\uffe7\032\uffe7\037\uffe7\064\uffe7\001\002\000\026\030" +
    "\065\031\066\033\062\034\064\035\060\036\063\037\073" +
    "\042\061\057\070\061\067\001\002\000\034\041\107\042" +
    "\077\043\104\044\105\046\103\047\106\050\076\051\102" +
    "\053\112\054\110\055\111\056\101\071\uffe8\001\002\000" +
    "\030\030\065\031\066\033\062\034\064\035\060\036\063" +
    "\037\073\042\061\057\070\061\067\062\324\001\002\000" +
    "\004\071\330\001\002\000\034\041\107\042\077\043\104" +
    "\044\105\046\103\047\106\050\076\051\102\053\112\054" +
    "\110\055\111\056\101\062\326\001\002\000\004\071\327" +
    "\001\002\000\046\003\uffbe\005\uffbe\011\uffbe\012\uffbe\013" +
    "\uffbe\014\uffbe\015\uffbe\017\uffbe\021\uffbe\022\uffbe\023\uffbe" +
    "\024\uffbe\025\uffbe\026\uffbe\027\uffbe\032\uffbe\037\uffbe\064" +
    "\uffbe\001\002\000\046\003\uffbd\005\uffbd\011\uffbd\012\uffbd" +
    "\013\uffbd\014\uffbd\015\uffbd\017\uffbd\021\uffbd\022\uffbd\023" +
    "\uffbd\024\uffbd\025\uffbd\026\uffbd\027\uffbd\032\uffbd\037\uffbd" +
    "\064\uffbd\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\327\000\004\002\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\032\003\020\005\027\014\032\015\040\024" +
    "\025\025\016\033\030\035\014\036\022\037\034\040\043" +
    "\041\021\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\030\005\054\014\032\015" +
    "\040\024\025\025\016\033\030\035\014\036\022\037\034" +
    "\040\043\041\021\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\042\047\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\032\003\052" +
    "\005\027\014\032\015\040\024\025\025\016\033\030\035" +
    "\014\036\022\037\034\040\043\041\021\001\001\000\002" +
    "\001\001\000\030\005\054\014\032\015\040\024\025\025" +
    "\016\033\030\035\014\036\022\037\034\040\043\041\021" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\007\073\011\070\012\071\013\074\001\001" +
    "\000\002\001\001\000\012\007\132\011\070\012\071\013" +
    "\074\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\007" +
    "\130\011\070\012\071\013\074\001\001\000\012\007\127" +
    "\011\070\012\071\013\074\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\012\007\126\011\070\012\071\013\074\001" +
    "\001\000\012\007\125\011\070\012\071\013\074\001\001" +
    "\000\002\001\001\000\012\007\123\011\070\012\071\013" +
    "\074\001\001\000\012\007\122\011\070\012\071\013\074" +
    "\001\001\000\012\007\121\011\070\012\071\013\074\001" +
    "\001\000\012\007\120\011\070\012\071\013\074\001\001" +
    "\000\012\007\117\011\070\012\071\013\074\001\001\000" +
    "\012\007\116\011\070\012\071\013\074\001\001\000\012" +
    "\007\115\011\070\012\071\013\074\001\001\000\012\007" +
    "\114\011\070\012\071\013\074\001\001\000\012\007\113" +
    "\011\070\012\071\013\074\001\001\000\012\007\112\011" +
    "\070\012\071\013\074\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\007\135\011\070\012\071\013\074\001\001" +
    "\000\002\001\001\000\004\042\137\001\001\000\002\001" +
    "\001\000\006\024\141\042\142\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\007\144\011\070\012\071\013" +
    "\074\001\001\000\002\001\001\000\004\026\147\001\001" +
    "\000\012\027\154\030\151\031\155\032\150\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\031\170\032\167" +
    "\001\001\000\002\001\001\000\012\007\163\011\070\012" +
    "\071\013\074\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\034\003\160\005\027\014\032\015" +
    "\040\024\025\025\016\033\030\035\014\036\022\037\034" +
    "\040\043\041\021\042\161\001\001\000\030\005\054\014" +
    "\032\015\040\024\025\025\016\033\030\035\014\036\022" +
    "\037\034\040\043\041\021\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\034\003\165\005\027" +
    "\014\032\015\040\024\025\025\016\033\030\035\014\036" +
    "\022\037\034\040\043\041\021\042\166\001\001\000\030" +
    "\005\054\014\032\015\040\024\025\025\016\033\030\035" +
    "\014\036\022\037\034\040\043\041\021\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\007" +
    "\172\011\070\012\071\013\074\001\001\000\002\001\001" +
    "\000\004\042\174\001\001\000\002\001\001\000\006\034" +
    "\176\041\177\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\007\202\011\070\012\071\013" +
    "\074\001\001\000\002\001\001\000\012\007\204\011\070" +
    "\012\071\013\074\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\042\211" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\007" +
    "\214\011\070\012\071\013\074\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\043\223\001\001" +
    "\000\002\001\001\000\016\004\232\006\227\016\230\020" +
    "\225\021\226\040\235\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\006\265\016\230\020\225\021\226\040\235" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\017\245\022" +
    "\246\023\247\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\017\245" +
    "\023\263\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\017" +
    "\245\022\274\023\247\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\010" +
    "\304\017\303\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\007\307\011" +
    "\070\012\071\013\074\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\043\314\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\043\317\001\001\000\002\001\001\000" +
    "\012\007\321\011\070\012\071\013\074\001\001\000\002" +
    "\001\001\000\012\007\324\011\070\012\071\013\074\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    ArrayList<Response> errorsS = new ArrayList<>();
    public void syntax_error(Symbol sym) {
        errorsS.add(new Response(new ErrorS(sym.left,sym.right,sym.value,TOK.terminalNames[sym.sym])));
    }
    public void unrecovered_syntax_error(Symbol sym) throws java.lang.Exception {
        errorsS.add(new Response("Error Sintáctico sin recuperar."));
    }
    public String getErrors() {
        return errorsS.stream().map(Object::toString).collect(Collectors.joining("\n-> "));
    }
    public boolean isSuccessExecution() {
        return !(errorsS.size() > 0);
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INIT EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String start_val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INIT ::= RW_void RW_main TK_lpar TK_rpar TK_lbrc INSTRUCTIONS TK_rbrc 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INIT",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INIT ::= RW_void RW_main TK_lpar TK_rpar TK_lbrc TK_rbrc 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INIT",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INSTRUCTIONS ::= INSTRUCTIONS INSTRUCTION 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTIONS",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INSTRUCTIONS ::= INSTRUCTION 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTIONS",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // INSTRUCTION ::= DECLID TK_semicolon 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // INSTRUCTION ::= REASIGN TK_semicolon 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // INSTRUCTION ::= DECFUNC 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // INSTRUCTION ::= IFSTRUCT 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // INSTRUCTION ::= SWITCHSTRUCT 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // INSTRUCTION ::= LOOPFOR 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // INSTRUCTION ::= LOOPWHILE 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // INSTRUCTION ::= LOOPDOWHILE 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // INSTRUCTION ::= PRINT 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // INSTRUCTION ::= RW_break TK_semicolon 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // INSTRUCTION ::= error 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // INSTRUCTIONSEST ::= INSTRUCTIONSEST INSTRUCTIONEST 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTIONSEST",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // INSTRUCTIONSEST ::= INSTRUCTIONEST 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTIONSEST",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // INSTRUCTIONEST ::= DECLIDEST TK_semicolon 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTIONEST",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // INSTRUCTIONEST ::= REASIGN TK_semicolon 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTIONEST",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // INSTRUCTIONEST ::= ARRAYSDEF 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTIONEST",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // DECLID ::= TYPE TK_id TK_equal EXP 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLID",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // DECLID ::= TYPE TK_id 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLID",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // DECLIDEST ::= TYPEEST TK_id TK_equal EXPEST 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLIDEST",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // DECLIDEST ::= TYPEEST TK_id 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLIDEST",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // REASIGN ::= TK_id TK_equal EXP 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("REASIGN",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // DECFUNC ::= RW_void RW_defG TK_lpar TK_rpar ENVEST 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECFUNC",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // DECFUNC ::= RW_void RW_barG TK_lpar TK_rpar ENVEST 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECFUNC",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // DECFUNC ::= RW_void RW_pieG TK_lpar TK_rpar ENVEST 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECFUNC",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // SYMBSTAT ::= TK_dollar TK_lbrc RW_newVal TK_comma TK_string TK_comma TK_string TK_rbrc 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SYMBSTAT",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // ARRAYSDEF ::= RW_string TK_lbrk TK_rbrk TK_id TK_equal TK_lbrc VALUES TK_rbrc TK_semicolon 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARRAYSDEF",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // ARRAYSDEF ::= RW_double TK_lbrk TK_rbrk TK_id TK_equal TK_lbrc VALUES TK_rbrc TK_semicolon 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARRAYSDEF",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // VALUES ::= VALUES TK_comma VALUE 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VALUES",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // VALUES ::= VALUE 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VALUES",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // VALUE ::= SYMBSTAT 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VALUE",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // VALUE ::= TK_string 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VALUE",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // VALUE ::= TK_id 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("VALUE",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // ENVEST ::= TK_lbrc INSTRUCTIONSEST TK_rbrc 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ENVEST",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // ENVEST ::= TK_lbrc TK_rbrc 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ENVEST",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // TYPEEST ::= RW_string 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TYPEEST",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // TYPEEST ::= RW_double 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TYPEEST",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // EXPEST ::= SYMBSTAT 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPEST",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // EXPEST ::= TK_id 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPEST",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // EXPEST ::= TK_string 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPEST",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // EXPEST ::= TK_double 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPEST",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // EXPEST ::= TK_lpar EXP TK_rpar 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPEST",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // IFSTRUCT ::= RW_if TK_lpar EXP TK_rpar ENV RW_else IFSTRUCT 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IFSTRUCT",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // IFSTRUCT ::= RW_if TK_lpar EXP TK_rpar ENV RW_else ENV 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IFSTRUCT",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // IFSTRUCT ::= RW_if TK_lpar EXP TK_rpar ENV 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IFSTRUCT",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // SWITCHSTRUCT ::= RW_switch TK_lpar EXP TK_rpar ENVS 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String exp = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SWITCHSTRUCT",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // ENVS ::= TK_lbrc CASESDEFAULT TK_rbrc 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ENVS",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // ENVS ::= TK_lbrc TK_rbrc 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ENVS",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // CASESDEFAULT ::= CASES DEFAULT 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CASESDEFAULT",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // CASESDEFAULT ::= CASES 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CASESDEFAULT",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // CASESDEFAULT ::= DEFAULT 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CASESDEFAULT",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // CASES ::= CASES CASE 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CASES",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // CASES ::= CASE 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CASES",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // CASE ::= RW_case EXP TK_colon INSTRUCTIONS 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CASE",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // CASE ::= RW_case EXP TK_colon ENV 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CASE",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // CASE ::= RW_case EXP TK_colon 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CASE",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // DEFAULT ::= RW_default TK_colon INSTRUCTIONS 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DEFAULT",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // DEFAULT ::= RW_default TK_colon ENV 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DEFAULT",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // DEFAULT ::= RW_default TK_colon 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DEFAULT",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // LOOPFOR ::= RW_for TK_lpar ARGSFOR TK_rpar ENV 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LOOPFOR",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // ARGSFOR ::= TYPE TK_id TK_equal EXP TK_semicolon EXP TK_semicolon TK_id TK_inc 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARGSFOR",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // LOOPWHILE ::= RW_while TK_lpar EXP TK_rpar ENV 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LOOPWHILE",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // LOOPDOWHILE ::= RW_do ENV RW_while TK_lpar EXP TK_rpar TK_semicolon 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LOOPDOWHILE",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // PRINT ::= RW_print TK_lpar EXP TK_rpar TK_semicolon 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PRINT",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // PRINT ::= RW_print TK_lpar TK_rpar TK_semicolon 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PRINT",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // ENV ::= TK_lbrc INSTRUCTIONS TK_rbrc 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ENV",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // ENV ::= TK_lbrc TK_rbrc 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ENV",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // TYPE ::= RW_string 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TYPE",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // TYPE ::= RW_int 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TYPE",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // TYPE ::= RW_bool 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TYPE",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // TYPE ::= RW_char 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TYPE",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // TYPE ::= RW_double 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TYPE",31, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // EXP ::= ARITHMETICS 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // EXP ::= RELATIONALS 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // EXP ::= LOGICS 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // EXP ::= TK_id 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // EXP ::= TK_string 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // EXP ::= TK_char 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // EXP ::= TK_int 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // EXP ::= TK_double 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // EXP ::= RW_true 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // EXP ::= RW_false 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // EXP ::= TK_lpar EXP TK_rpar 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // ARITHMETICS ::= EXP TK_plus EXP 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARITHMETICS",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // ARITHMETICS ::= EXP TK_minus EXP 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARITHMETICS",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // ARITHMETICS ::= EXP TK_mult EXP 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARITHMETICS",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // ARITHMETICS ::= EXP TK_div EXP 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARITHMETICS",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // ARITHMETICS ::= TK_minus EXP 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARITHMETICS",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // RELATIONALS ::= EXP TK_equequ EXP 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RELATIONALS",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // RELATIONALS ::= EXP TK_notequ EXP 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RELATIONALS",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // RELATIONALS ::= EXP TK_lessequ EXP 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RELATIONALS",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // RELATIONALS ::= EXP TK_moreequ EXP 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RELATIONALS",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // RELATIONALS ::= EXP TK_less EXP 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RELATIONALS",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // RELATIONALS ::= EXP TK_more EXP 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RELATIONALS",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // LOGICS ::= EXP TK_and EXP 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LOGICS",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // LOGICS ::= EXP TK_or EXP 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LOGICS",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // LOGICS ::= TK_not EXP 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LOGICS",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
