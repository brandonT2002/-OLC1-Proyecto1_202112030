
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Language;

import java.util.ArrayList;
import java.util.stream.Collectors;
import java_cup.runtime.*;
import Components.Response;
import Components.ErrorS;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return TOK.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\111\000\002\002\004\000\002\002\011\000\002\002" +
    "\010\000\002\003\004\000\002\003\003\000\002\025\004" +
    "\000\002\025\004\000\002\025\003\000\002\025\003\000" +
    "\002\025\003\000\002\025\003\000\002\025\003\000\002" +
    "\025\003\000\002\025\004\000\002\025\003\000\002\010" +
    "\006\000\002\010\004\000\002\026\005\000\002\011\011" +
    "\000\002\011\011\000\002\011\007\000\002\012\007\000" +
    "\002\013\005\000\002\013\004\000\002\014\004\000\002" +
    "\014\003\000\002\014\003\000\002\015\004\000\002\015" +
    "\003\000\002\016\006\000\002\016\006\000\002\016\005" +
    "\000\002\017\005\000\002\017\005\000\002\017\004\000" +
    "\002\020\007\000\002\021\013\000\002\022\007\000\002" +
    "\023\011\000\002\024\007\000\002\024\006\000\002\030" +
    "\005\000\002\030\004\000\002\027\003\000\002\027\003" +
    "\000\002\027\003\000\002\027\003\000\002\027\003\000" +
    "\002\004\003\000\002\004\003\000\002\004\003\000\002" +
    "\004\003\000\002\004\003\000\002\004\003\000\002\004" +
    "\003\000\002\004\003\000\002\004\003\000\002\004\003" +
    "\000\002\004\005\000\002\005\005\000\002\005\005\000" +
    "\002\005\005\000\002\005\005\000\002\005\004\000\002" +
    "\006\005\000\002\006\005\000\002\006\005\000\002\006" +
    "\005\000\002\006\005\000\002\006\005\000\002\007\005" +
    "\000\002\007\005\000\002\007\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\223\000\004\005\005\001\002\000\004\002\225\001" +
    "\002\000\004\004\006\001\002\000\004\054\007\001\002" +
    "\000\004\055\010\001\002\000\004\056\011\001\002\000" +
    "\040\003\035\006\041\007\033\010\036\011\016\012\037" +
    "\013\031\015\027\020\022\021\024\022\040\023\043\026" +
    "\012\033\014\057\013\001\002\000\004\054\217\001\002" +
    "\000\004\002\uffff\001\002\000\004\046\215\001\002\000" +
    "\044\003\ufff7\006\ufff7\007\ufff7\010\ufff7\011\ufff7\012\ufff7" +
    "\013\ufff7\015\ufff7\016\ufff7\017\ufff7\020\ufff7\021\ufff7\022" +
    "\ufff7\023\ufff7\026\ufff7\033\ufff7\057\ufff7\001\002\000\004" +
    "\033\uffd4\001\002\000\044\003\ufff9\006\ufff9\007\ufff9\010" +
    "\ufff9\011\ufff9\012\ufff9\013\ufff9\015\ufff9\016\ufff9\017\ufff9" +
    "\020\ufff9\021\ufff9\022\ufff9\023\ufff9\026\ufff9\033\ufff9\057" +
    "\ufff9\001\002\000\040\003\035\006\041\007\033\010\036" +
    "\011\016\012\037\013\031\015\027\020\022\021\024\022" +
    "\040\023\043\026\012\033\014\057\214\001\002\000\004" +
    "\033\211\001\002\000\004\054\174\001\002\000\044\003" +
    "\ufff6\006\ufff6\007\ufff6\010\ufff6\011\ufff6\012\ufff6\013\ufff6" +
    "\015\ufff6\016\ufff6\017\ufff6\020\ufff6\021\ufff6\022\ufff6\023" +
    "\ufff6\026\ufff6\033\ufff6\057\ufff6\001\002\000\004\054\170" +
    "\001\002\000\044\003\ufffa\006\ufffa\007\ufffa\010\ufffa\011" +
    "\ufffa\012\ufffa\013\ufffa\015\ufffa\016\ufffa\017\ufffa\020\ufffa" +
    "\021\ufffa\022\ufffa\023\ufffa\026\ufffa\033\ufffa\057\ufffa\001" +
    "\002\000\044\003\ufffd\006\ufffd\007\ufffd\010\ufffd\011\ufffd" +
    "\012\ufffd\013\ufffd\015\ufffd\016\ufffd\017\ufffd\020\ufffd\021" +
    "\ufffd\022\ufffd\023\ufffd\026\ufffd\033\ufffd\057\ufffd\001\002" +
    "\000\004\054\142\001\002\000\044\003\ufff8\006\ufff8\007" +
    "\ufff8\010\ufff8\011\ufff8\012\ufff8\013\ufff8\015\ufff8\016\ufff8" +
    "\017\ufff8\020\ufff8\021\ufff8\022\ufff8\023\ufff8\026\ufff8\033" +
    "\ufff8\057\ufff8\001\002\000\004\054\133\001\002\000\004" +
    "\061\132\001\002\000\004\033\uffd2\001\002\000\044\003" +
    "\ufff5\006\ufff5\007\ufff5\010\ufff5\011\ufff5\012\ufff5\013\ufff5" +
    "\015\ufff5\016\ufff5\017\ufff5\020\ufff5\021\ufff5\022\ufff5\023" +
    "\ufff5\026\ufff5\033\ufff5\057\ufff5\001\002\000\044\003\ufff3" +
    "\006\ufff3\007\ufff3\010\ufff3\011\ufff3\012\ufff3\013\ufff3\015" +
    "\ufff3\016\ufff3\017\ufff3\020\ufff3\021\ufff3\022\ufff3\023\ufff3" +
    "\026\ufff3\033\ufff3\057\ufff3\001\002\000\004\033\uffd3\001" +
    "\002\000\004\033\uffd6\001\002\000\004\056\047\001\002" +
    "\000\004\033\uffd5\001\002\000\004\061\045\001\002\000" +
    "\004\061\044\001\002\000\044\003\ufff4\006\ufff4\007\ufff4" +
    "\010\ufff4\011\ufff4\012\ufff4\013\ufff4\015\ufff4\016\ufff4\017" +
    "\ufff4\020\ufff4\021\ufff4\022\ufff4\023\ufff4\026\ufff4\033\ufff4" +
    "\057\ufff4\001\002\000\044\003\ufffb\006\ufffb\007\ufffb\010" +
    "\ufffb\011\ufffb\012\ufffb\013\ufffb\015\ufffb\016\ufffb\017\ufffb" +
    "\020\ufffb\021\ufffb\022\ufffb\023\ufffb\026\ufffb\033\ufffb\057" +
    "\ufffb\001\002\000\004\021\054\001\002\000\040\003\035" +
    "\006\041\007\033\010\036\011\016\012\037\013\031\015" +
    "\027\020\022\021\024\022\040\023\043\026\012\033\014" +
    "\057\050\001\002\000\046\003\uffd7\006\uffd7\007\uffd7\010" +
    "\uffd7\011\uffd7\012\uffd7\013\uffd7\014\uffd7\015\uffd7\016\uffd7" +
    "\017\uffd7\020\uffd7\021\uffd7\022\uffd7\023\uffd7\026\uffd7\033" +
    "\uffd7\057\uffd7\001\002\000\040\003\035\006\041\007\033" +
    "\010\036\011\016\012\037\013\031\015\027\020\022\021" +
    "\024\022\040\023\043\026\012\033\014\057\052\001\002" +
    "\000\046\003\uffd8\006\uffd8\007\uffd8\010\uffd8\011\uffd8\012" +
    "\uffd8\013\uffd8\014\uffd8\015\uffd8\016\uffd8\017\uffd8\020\uffd8" +
    "\021\uffd8\022\uffd8\023\uffd8\026\uffd8\033\uffd8\057\uffd8\001" +
    "\002\000\044\003\ufffe\006\ufffe\007\ufffe\010\ufffe\011\ufffe" +
    "\012\ufffe\013\ufffe\015\ufffe\016\ufffe\017\ufffe\020\ufffe\021" +
    "\ufffe\022\ufffe\023\ufffe\026\ufffe\033\ufffe\057\ufffe\001\002" +
    "\000\004\054\055\001\002\000\026\024\063\025\064\027" +
    "\060\030\062\031\056\032\061\033\071\036\057\053\066" +
    "\054\065\001\002\000\040\035\uffcb\036\uffcb\037\uffcb\040" +
    "\uffcb\042\uffcb\043\uffcb\044\uffcb\045\uffcb\047\uffcb\050\uffcb" +
    "\051\uffcb\052\uffcb\055\uffcb\060\uffcb\061\uffcb\001\002\000" +
    "\026\024\063\025\064\027\060\030\062\031\056\032\061" +
    "\033\071\036\057\053\066\054\065\001\002\000\040\035" +
    "\uffcd\036\uffcd\037\uffcd\040\uffcd\042\uffcd\043\uffcd\044\uffcd" +
    "\045\uffcd\047\uffcd\050\uffcd\051\uffcd\052\uffcd\055\uffcd\060" +
    "\uffcd\061\uffcd\001\002\000\040\035\uffca\036\uffca\037\uffca" +
    "\040\uffca\042\uffca\043\uffca\044\uffca\045\uffca\047\uffca\050" +
    "\uffca\051\uffca\052\uffca\055\uffca\060\uffca\061\uffca\001\002" +
    "\000\040\035\uffcc\036\uffcc\037\uffcc\040\uffcc\042\uffcc\043" +
    "\uffcc\044\uffcc\045\uffcc\047\uffcc\050\uffcc\051\uffcc\052\uffcc" +
    "\055\uffcc\060\uffcc\061\uffcc\001\002\000\040\035\uffc9\036" +
    "\uffc9\037\uffc9\040\uffc9\042\uffc9\043\uffc9\044\uffc9\045\uffc9" +
    "\047\uffc9\050\uffc9\051\uffc9\052\uffc9\055\uffc9\060\uffc9\061" +
    "\uffc9\001\002\000\040\035\uffc8\036\uffc8\037\uffc8\040\uffc8" +
    "\042\uffc8\043\uffc8\044\uffc8\045\uffc8\047\uffc8\050\uffc8\051" +
    "\uffc8\052\uffc8\055\uffc8\060\uffc8\061\uffc8\001\002\000\026" +
    "\024\063\025\064\027\060\030\062\031\056\032\061\033" +
    "\071\036\057\053\066\054\065\001\002\000\026\024\063" +
    "\025\064\027\060\030\062\031\056\032\061\033\071\036" +
    "\057\053\066\054\065\001\002\000\040\035\uffd1\036\uffd1" +
    "\037\uffd1\040\uffd1\042\uffd1\043\uffd1\044\uffd1\045\uffd1\047" +
    "\uffd1\050\uffd1\051\uffd1\052\uffd1\055\uffd1\060\uffd1\061\uffd1" +
    "\001\002\000\040\035\uffd0\036\uffd0\037\uffd0\040\uffd0\042" +
    "\uffd0\043\uffd0\044\uffd0\045\uffd0\047\uffd0\050\uffd0\051\uffd0" +
    "\052\uffd0\055\uffd0\060\uffd0\061\uffd0\001\002\000\040\035" +
    "\uffce\036\uffce\037\uffce\040\uffce\042\uffce\043\uffce\044\uffce" +
    "\045\uffce\047\uffce\050\uffce\051\uffce\052\uffce\055\uffce\060" +
    "\uffce\061\uffce\001\002\000\034\035\105\036\075\037\102" +
    "\040\103\042\101\043\104\044\074\045\100\047\107\050" +
    "\106\051\110\052\077\055\076\001\002\000\040\035\uffcf" +
    "\036\uffcf\037\uffcf\040\uffcf\042\uffcf\043\uffcf\044\uffcf\045" +
    "\uffcf\047\uffcf\050\uffcf\051\uffcf\052\uffcf\055\uffcf\060\uffcf" +
    "\061\uffcf\001\002\000\026\024\063\025\064\027\060\030" +
    "\062\031\056\032\061\033\071\036\057\053\066\054\065" +
    "\001\002\000\026\024\063\025\064\027\060\030\062\031" +
    "\056\032\061\033\071\036\057\053\066\054\065\001\002" +
    "\000\004\061\123\001\002\000\026\024\063\025\064\027" +
    "\060\030\062\031\056\032\061\033\071\036\057\053\066" +
    "\054\065\001\002\000\026\024\063\025\064\027\060\030" +
    "\062\031\056\032\061\033\071\036\057\053\066\054\065" +
    "\001\002\000\026\024\063\025\064\027\060\030\062\031" +
    "\056\032\061\033\071\036\057\053\066\054\065\001\002" +
    "\000\026\024\063\025\064\027\060\030\062\031\056\032" +
    "\061\033\071\036\057\053\066\054\065\001\002\000\026" +
    "\024\063\025\064\027\060\030\062\031\056\032\061\033" +
    "\071\036\057\053\066\054\065\001\002\000\026\024\063" +
    "\025\064\027\060\030\062\031\056\032\061\033\071\036" +
    "\057\053\066\054\065\001\002\000\026\024\063\025\064" +
    "\027\060\030\062\031\056\032\061\033\071\036\057\053" +
    "\066\054\065\001\002\000\026\024\063\025\064\027\060" +
    "\030\062\031\056\032\061\033\071\036\057\053\066\054" +
    "\065\001\002\000\026\024\063\025\064\027\060\030\062" +
    "\031\056\032\061\033\071\036\057\053\066\054\065\001" +
    "\002\000\026\024\063\025\064\027\060\030\062\031\056" +
    "\032\061\033\071\036\057\053\066\054\065\001\002\000" +
    "\040\035\105\036\075\037\102\040\103\042\101\043\104" +
    "\044\074\045\100\047\107\050\106\051\uffbb\052\uffbb\055" +
    "\uffbb\060\uffbb\061\uffbb\001\002\000\040\035\105\036\075" +
    "\037\102\040\103\042\uffbd\043\uffbd\044\uffbd\045\uffbd\047" +
    "\uffbd\050\uffbd\051\uffbd\052\uffbd\055\uffbd\060\uffbd\061\uffbd" +
    "\001\002\000\040\035\105\036\075\037\102\040\103\042" +
    "\uffbc\043\uffbc\044\uffbc\045\uffbc\047\uffbc\050\uffbc\051\uffbc" +
    "\052\uffbc\055\uffbc\060\uffbc\061\uffbc\001\002\000\040\035" +
    "\uffc6\036\uffc6\037\102\040\103\042\uffc6\043\uffc6\044\uffc6" +
    "\045\uffc6\047\uffc6\050\uffc6\051\uffc6\052\uffc6\055\uffc6\060" +
    "\uffc6\061\uffc6\001\002\000\040\035\105\036\075\037\102" +
    "\040\103\042\uffc0\043\uffc0\044\074\045\100\047\107\050" +
    "\106\051\uffc0\052\uffc0\055\uffc0\060\uffc0\061\uffc0\001\002" +
    "\000\040\035\uffc3\036\uffc3\037\uffc3\040\uffc3\042\uffc3\043" +
    "\uffc3\044\uffc3\045\uffc3\047\uffc3\050\uffc3\051\uffc3\052\uffc3" +
    "\055\uffc3\060\uffc3\061\uffc3\001\002\000\040\035\uffc4\036" +
    "\uffc4\037\uffc4\040\uffc4\042\uffc4\043\uffc4\044\uffc4\045\uffc4" +
    "\047\uffc4\050\uffc4\051\uffc4\052\uffc4\055\uffc4\060\uffc4\061" +
    "\uffc4\001\002\000\040\035\105\036\075\037\102\040\103" +
    "\042\uffc1\043\uffc1\044\074\045\100\047\107\050\106\051" +
    "\uffc1\052\uffc1\055\uffc1\060\uffc1\061\uffc1\001\002\000\040" +
    "\035\105\036\075\037\102\040\103\042\uffbe\043\uffbe\044" +
    "\uffbe\045\uffbe\047\uffbe\050\uffbe\051\uffbe\052\uffbe\055\uffbe" +
    "\060\uffbe\061\uffbe\001\002\000\040\035\105\036\075\037" +
    "\102\040\103\042\101\043\104\044\074\045\100\047\107" +
    "\050\106\051\110\052\uffba\055\uffba\060\uffba\061\uffba\001" +
    "\002\000\044\003\uffdb\006\uffdb\007\uffdb\010\uffdb\011\uffdb" +
    "\012\uffdb\013\uffdb\015\uffdb\016\uffdb\017\uffdb\020\uffdb\021" +
    "\uffdb\022\uffdb\023\uffdb\026\uffdb\033\uffdb\057\uffdb\001\002" +
    "\000\040\035\uffc5\036\uffc5\037\102\040\103\042\uffc5\043" +
    "\uffc5\044\uffc5\045\uffc5\047\uffc5\050\uffc5\051\uffc5\052\uffc5" +
    "\055\uffc5\060\uffc5\061\uffc5\001\002\000\040\035\105\036" +
    "\075\037\102\040\103\042\uffbf\043\uffbf\044\uffbf\045\uffbf" +
    "\047\uffbf\050\uffbf\051\uffbf\052\uffbf\055\uffbf\060\uffbf\061" +
    "\uffbf\001\002\000\040\035\105\036\075\037\102\040\103" +
    "\042\101\043\104\044\074\045\100\047\107\050\106\051" +
    "\uffb9\052\uffb9\055\uffb9\060\uffb9\061\uffb9\001\002\000\034" +
    "\035\105\036\075\037\102\040\103\042\101\043\104\044" +
    "\074\045\100\047\107\050\106\051\110\052\077\055\130" +
    "\001\002\000\040\035\uffc7\036\uffc7\037\uffc7\040\uffc7\042" +
    "\uffc7\043\uffc7\044\uffc7\045\uffc7\047\uffc7\050\uffc7\051\uffc7" +
    "\052\uffc7\055\uffc7\060\uffc7\061\uffc7\001\002\000\040\035" +
    "\uffc2\036\uffc2\037\uffc2\040\uffc2\042\uffc2\043\uffc2\044\uffc2" +
    "\045\uffc2\047\uffc2\050\uffc2\051\uffc2\052\uffc2\055\uffc2\060" +
    "\uffc2\061\uffc2\001\002\000\044\003\ufffc\006\ufffc\007\ufffc" +
    "\010\ufffc\011\ufffc\012\ufffc\013\ufffc\015\ufffc\016\ufffc\017" +
    "\ufffc\020\ufffc\021\ufffc\022\ufffc\023\ufffc\026\ufffc\033\ufffc" +
    "\057\ufffc\001\002\000\026\024\063\025\064\027\060\030" +
    "\062\031\056\032\061\033\071\036\057\053\066\054\065" +
    "\001\002\000\034\035\105\036\075\037\102\040\103\042" +
    "\101\043\104\044\074\045\100\047\107\050\106\051\110" +
    "\052\077\055\135\001\002\000\004\056\047\001\002\000" +
    "\046\003\uffed\006\uffed\007\uffed\010\uffed\011\uffed\012\uffed" +
    "\013\uffed\014\137\015\uffed\016\uffed\017\uffed\020\uffed\021" +
    "\uffed\022\uffed\023\uffed\026\uffed\033\uffed\057\uffed\001\002" +
    "\000\006\013\031\056\047\001\002\000\044\003\uffef\006" +
    "\uffef\007\uffef\010\uffef\011\uffef\012\uffef\013\uffef\015\uffef" +
    "\016\uffef\017\uffef\020\uffef\021\uffef\022\uffef\023\uffef\026" +
    "\uffef\033\uffef\057\uffef\001\002\000\044\003\uffee\006\uffee" +
    "\007\uffee\010\uffee\011\uffee\012\uffee\013\uffee\015\uffee\016" +
    "\uffee\017\uffee\020\uffee\021\uffee\022\uffee\023\uffee\026\uffee" +
    "\033\uffee\057\uffee\001\002\000\026\024\063\025\064\027" +
    "\060\030\062\031\056\032\061\033\071\036\057\053\066" +
    "\054\065\001\002\000\034\035\105\036\075\037\102\040" +
    "\103\042\101\043\104\044\074\045\100\047\107\050\106" +
    "\051\110\052\077\055\144\001\002\000\004\056\145\001" +
    "\002\000\010\016\152\017\155\057\150\001\002\000\044" +
    "\003\uffec\006\uffec\007\uffec\010\uffec\011\uffec\012\uffec\013" +
    "\uffec\015\uffec\016\uffec\017\uffec\020\uffec\021\uffec\022\uffec" +
    "\023\uffec\026\uffec\033\uffec\057\uffec\001\002\000\004\057" +
    "\uffe7\001\002\000\044\003\uffea\006\uffea\007\uffea\010\uffea" +
    "\011\uffea\012\uffea\013\uffea\015\uffea\016\uffea\017\uffea\020" +
    "\uffea\021\uffea\022\uffea\023\uffea\026\uffea\033\uffea\057\uffea" +
    "\001\002\000\010\016\152\017\155\057\uffe8\001\002\000" +
    "\026\024\063\025\064\027\060\030\062\031\056\032\061" +
    "\033\071\036\057\053\066\054\065\001\002\000\004\057" +
    "\161\001\002\000\010\016\uffe5\017\uffe5\057\uffe5\001\002" +
    "\000\004\060\156\001\002\000\042\003\035\006\041\007" +
    "\033\010\036\011\016\012\037\013\031\015\027\020\022" +
    "\021\024\022\040\023\043\026\012\033\014\056\047\057" +
    "\uffdf\001\002\000\040\003\035\006\041\007\033\010\036" +
    "\011\016\012\037\013\031\015\027\020\022\021\024\022" +
    "\040\023\043\026\012\033\014\057\uffe1\001\002\000\004" +
    "\057\uffe0\001\002\000\044\003\uffeb\006\uffeb\007\uffeb\010" +
    "\uffeb\011\uffeb\012\uffeb\013\uffeb\015\uffeb\016\uffeb\017\uffeb" +
    "\020\uffeb\021\uffeb\022\uffeb\023\uffeb\026\uffeb\033\uffeb\057" +
    "\uffeb\001\002\000\034\035\105\036\075\037\102\040\103" +
    "\042\101\043\104\044\074\045\100\047\107\050\106\051" +
    "\110\052\077\060\163\001\002\000\046\003\035\006\041" +
    "\007\033\010\036\011\016\012\037\013\031\015\027\016" +
    "\uffe2\017\uffe2\020\022\021\024\022\040\023\043\026\012" +
    "\033\014\056\047\057\uffe2\001\002\000\044\003\035\006" +
    "\041\007\033\010\036\011\016\012\037\013\031\015\027" +
    "\016\uffe4\017\uffe4\020\022\021\024\022\040\023\043\026" +
    "\012\033\014\057\uffe4\001\002\000\010\016\uffe3\017\uffe3" +
    "\057\uffe3\001\002\000\004\057\uffe9\001\002\000\010\016" +
    "\uffe6\017\uffe6\057\uffe6\001\002\000\026\024\063\025\064" +
    "\027\060\030\062\031\056\032\061\033\071\036\057\053" +
    "\066\054\065\001\002\000\034\035\105\036\075\037\102" +
    "\040\103\042\101\043\104\044\074\045\100\047\107\050" +
    "\106\051\110\052\077\055\172\001\002\000\004\056\047" +
    "\001\002\000\044\003\uffdc\006\uffdc\007\uffdc\010\uffdc\011" +
    "\uffdc\012\uffdc\013\uffdc\015\uffdc\016\uffdc\017\uffdc\020\uffdc" +
    "\021\uffdc\022\uffdc\023\uffdc\026\uffdc\033\uffdc\057\uffdc\001" +
    "\002\000\014\006\041\007\033\010\036\011\016\012\037" +
    "\001\002\000\004\055\207\001\002\000\004\033\177\001" +
    "\002\000\004\046\200\001\002\000\026\024\063\025\064" +
    "\027\060\030\062\031\056\032\061\033\071\036\057\053" +
    "\066\054\065\001\002\000\034\035\105\036\075\037\102" +
    "\040\103\042\101\043\104\044\074\045\100\047\107\050" +
    "\106\051\110\052\077\061\202\001\002\000\026\024\063" +
    "\025\064\027\060\030\062\031\056\032\061\033\071\036" +
    "\057\053\066\054\065\001\002\000\034\035\105\036\075" +
    "\037\102\040\103\042\101\043\104\044\074\045\100\047" +
    "\107\050\106\051\110\052\077\061\204\001\002\000\004" +
    "\033\205\001\002\000\004\034\206\001\002\000\004\055" +
    "\uffdd\001\002\000\004\056\047\001\002\000\044\003\uffde" +
    "\006\uffde\007\uffde\010\uffde\011\uffde\012\uffde\013\uffde\015" +
    "\uffde\016\uffde\017\uffde\020\uffde\021\uffde\022\uffde\023\uffde" +
    "\026\uffde\033\uffde\057\uffde\001\002\000\006\046\212\061" +
    "\ufff1\001\002\000\026\024\063\025\064\027\060\030\062" +
    "\031\056\032\061\033\071\036\057\053\066\054\065\001" +
    "\002\000\034\035\105\036\075\037\102\040\103\042\101" +
    "\043\104\044\074\045\100\047\107\050\106\051\110\052" +
    "\077\061\ufff2\001\002\000\004\002\000\001\002\000\026" +
    "\024\063\025\064\027\060\030\062\031\056\032\061\033" +
    "\071\036\057\053\066\054\065\001\002\000\034\035\105" +
    "\036\075\037\102\040\103\042\101\043\104\044\074\045" +
    "\100\047\107\050\106\051\110\052\077\061\ufff0\001\002" +
    "\000\030\024\063\025\064\027\060\030\062\031\056\032" +
    "\061\033\071\036\057\053\066\054\065\055\220\001\002" +
    "\000\004\061\224\001\002\000\034\035\105\036\075\037" +
    "\102\040\103\042\101\043\104\044\074\045\100\047\107" +
    "\050\106\051\110\052\077\055\222\001\002\000\004\061" +
    "\223\001\002\000\044\003\uffda\006\uffda\007\uffda\010\uffda" +
    "\011\uffda\012\uffda\013\uffda\015\uffda\016\uffda\017\uffda\020" +
    "\uffda\021\uffda\022\uffda\023\uffda\026\uffda\033\uffda\057\uffda" +
    "\001\002\000\044\003\uffd9\006\uffd9\007\uffd9\010\uffd9\011" +
    "\uffd9\012\uffd9\013\uffd9\015\uffd9\016\uffd9\017\uffd9\020\uffd9" +
    "\021\uffd9\022\uffd9\023\uffd9\026\uffd9\033\uffd9\057\uffd9\001" +
    "\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\223\000\004\002\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\030\003\017\010\031\011\024\012\016\020" +
    "\027\022\014\023\022\024\033\025\025\026\041\027\020" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\026\010\031\011\024\012\016\020\027\022\014\023" +
    "\022\024\033\025\052\026\041\027\020\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\030\045\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\030\003" +
    "\050\010\031\011\024\012\016\020\027\022\014\023\022" +
    "\024\033\025\025\026\041\027\020\001\001\000\002\001" +
    "\001\000\026\010\031\011\024\012\016\020\027\022\014" +
    "\023\022\024\033\025\052\026\041\027\020\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\004\071\005\066\006\067\007\072\001\001\000\002\001" +
    "\001\000\012\004\130\005\066\006\067\007\072\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\004\126\005\066" +
    "\006\067\007\072\001\001\000\012\004\125\005\066\006" +
    "\067\007\072\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\004\124\005\066\006\067\007\072\001\001\000\012" +
    "\004\123\005\066\006\067\007\072\001\001\000\002\001" +
    "\001\000\012\004\121\005\066\006\067\007\072\001\001" +
    "\000\012\004\120\005\066\006\067\007\072\001\001\000" +
    "\012\004\117\005\066\006\067\007\072\001\001\000\012" +
    "\004\116\005\066\006\067\007\072\001\001\000\012\004" +
    "\115\005\066\006\067\007\072\001\001\000\012\004\114" +
    "\005\066\006\067\007\072\001\001\000\012\004\113\005" +
    "\066\006\067\007\072\001\001\000\012\004\112\005\066" +
    "\006\067\007\072\001\001\000\012\004\111\005\066\006" +
    "\067\007\072\001\001\000\012\004\110\005\066\006\067" +
    "\007\072\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\004\133\005\066\006\067\007\072\001\001\000\002\001" +
    "\001\000\004\030\135\001\001\000\002\001\001\000\006" +
    "\011\137\030\140\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\004\142\005\066\006\067\007\072\001\001" +
    "\000\002\001\001\000\004\013\145\001\001\000\012\014" +
    "\152\015\150\016\153\017\146\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\016\166\017" +
    "\165\001\001\000\012\004\161\005\066\006\067\007\072" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\032\003\156\010\031\011\024\012\016\020\027" +
    "\022\014\023\022\024\033\025\025\026\041\027\020\030" +
    "\157\001\001\000\026\010\031\011\024\012\016\020\027" +
    "\022\014\023\022\024\033\025\052\026\041\027\020\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\032\003\163\010\031\011\024\012\016\020\027\022" +
    "\014\023\022\024\033\025\025\026\041\027\020\030\164" +
    "\001\001\000\026\010\031\011\024\012\016\020\027\022" +
    "\014\023\022\024\033\025\052\026\041\027\020\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\004\170\005\066\006\067\007\072\001\001\000\002" +
    "\001\001\000\004\030\172\001\001\000\002\001\001\000" +
    "\006\021\174\027\175\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\004\200\005\066\006" +
    "\067\007\072\001\001\000\002\001\001\000\012\004\202" +
    "\005\066\006\067\007\072\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\030\207\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\004\212\005\066\006\067\007\072\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\004\215\005\066\006" +
    "\067\007\072\001\001\000\002\001\001\000\012\004\220" +
    "\005\066\006\067\007\072\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    ArrayList<Response> errorsS = new ArrayList<>();
    public void syntax_error(Symbol sym) {
        errorsS.add(new Response(new ErrorS(sym.left,sym.right,sym.value,TOK.terminalNames[sym.sym])));
    }
    public void unrecovered_syntax_error(Symbol sym) throws java.lang.Exception {
        errorsS.add(new Response("Error Sintáctico sin recuperar."));
    }
    public String getErrors() {
        return errorsS.stream().map(Object::toString).collect(Collectors.joining("\n-> "));
    }
    public boolean isSuccessExecution() {
        return !(errorsS.size() > 0);
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INIT EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String start_val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INIT ::= RW_void RW_main TK_lpar TK_rpar TK_lbrc INSTRUCTIONS TK_rbrc 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INIT",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INIT ::= RW_void RW_main TK_lpar TK_rpar TK_lbrc TK_rbrc 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INIT",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INSTRUCTIONS ::= INSTRUCTIONS INSTRUCTION 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTIONS",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INSTRUCTIONS ::= INSTRUCTION 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTIONS",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // INSTRUCTION ::= DECLID TK_semicolon 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // INSTRUCTION ::= REASIGN TK_semicolon 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // INSTRUCTION ::= IFSTRUCT 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // INSTRUCTION ::= SWITCHSTRUCT 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // INSTRUCTION ::= LOOPFOR 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // INSTRUCTION ::= LOOPWHILE 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // INSTRUCTION ::= LOOPDOWHILE 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // INSTRUCTION ::= PRINT 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // INSTRUCTION ::= RW_break TK_semicolon 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // INSTRUCTION ::= error 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // DECLID ::= TYPE TK_id TK_equal EXP 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLID",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // DECLID ::= TYPE TK_id 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLID",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // REASIGN ::= TK_id TK_equal EXP 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("REASIGN",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // IFSTRUCT ::= RW_if TK_lpar EXP TK_rpar ENV RW_else IFSTRUCT 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IFSTRUCT",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // IFSTRUCT ::= RW_if TK_lpar EXP TK_rpar ENV RW_else ENV 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IFSTRUCT",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // IFSTRUCT ::= RW_if TK_lpar EXP TK_rpar ENV 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IFSTRUCT",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // SWITCHSTRUCT ::= RW_switch TK_lpar EXP TK_rpar ENVS 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String exp = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SWITCHSTRUCT",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // ENVS ::= TK_lbrc CASESDEFAULT TK_rbrc 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ENVS",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // ENVS ::= TK_lbrc TK_rbrc 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ENVS",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // CASESDEFAULT ::= CASES DEFAULT 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CASESDEFAULT",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // CASESDEFAULT ::= CASES 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CASESDEFAULT",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // CASESDEFAULT ::= DEFAULT 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CASESDEFAULT",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // CASES ::= CASES CASE 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CASES",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // CASES ::= CASE 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CASES",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // CASE ::= RW_case EXP TK_colon INSTRUCTIONS 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CASE",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // CASE ::= RW_case EXP TK_colon ENV 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CASE",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // CASE ::= RW_case EXP TK_colon 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CASE",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // DEFAULT ::= RW_default TK_colon INSTRUCTIONS 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DEFAULT",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // DEFAULT ::= RW_default TK_colon ENV 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DEFAULT",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // DEFAULT ::= RW_default TK_colon 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DEFAULT",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // LOOPFOR ::= RW_for TK_lpar ARGSFOR TK_rpar ENV 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LOOPFOR",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // ARGSFOR ::= TYPE TK_id TK_equal EXP TK_semicolon EXP TK_semicolon TK_id TK_inc 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARGSFOR",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // LOOPWHILE ::= RW_while TK_lpar EXP TK_rpar ENV 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LOOPWHILE",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // LOOPDOWHILE ::= RW_do ENV RW_while TK_lpar EXP TK_rpar TK_semicolon 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LOOPDOWHILE",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // PRINT ::= RW_print TK_lpar EXP TK_rpar TK_semicolon 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PRINT",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // PRINT ::= RW_print TK_lpar TK_rpar TK_semicolon 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PRINT",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // ENV ::= TK_lbrc INSTRUCTIONS TK_rbrc 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ENV",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // ENV ::= TK_lbrc TK_rbrc 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ENV",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // TYPE ::= RW_string 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TYPE",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // TYPE ::= RW_int 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TYPE",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // TYPE ::= RW_bool 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TYPE",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // TYPE ::= RW_char 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TYPE",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // TYPE ::= RW_double 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TYPE",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // EXP ::= ARITHMETICS 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // EXP ::= RELATIONALS 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // EXP ::= LOGICS 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // EXP ::= TK_id 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // EXP ::= TK_string 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // EXP ::= TK_char 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // EXP ::= TK_int 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // EXP ::= TK_double 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // EXP ::= RW_true 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // EXP ::= RW_false 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // EXP ::= TK_lpar EXP TK_rpar 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // ARITHMETICS ::= EXP TK_plus EXP 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARITHMETICS",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // ARITHMETICS ::= EXP TK_minus EXP 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARITHMETICS",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // ARITHMETICS ::= EXP TK_mult EXP 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARITHMETICS",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // ARITHMETICS ::= EXP TK_div EXP 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARITHMETICS",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // ARITHMETICS ::= TK_minus EXP 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARITHMETICS",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // RELATIONALS ::= EXP TK_equequ EXP 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RELATIONALS",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // RELATIONALS ::= EXP TK_notequ EXP 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RELATIONALS",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // RELATIONALS ::= EXP TK_lessequ EXP 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RELATIONALS",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // RELATIONALS ::= EXP TK_moreequ EXP 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RELATIONALS",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // RELATIONALS ::= EXP TK_less EXP 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RELATIONALS",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // RELATIONALS ::= EXP TK_more EXP 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RELATIONALS",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // LOGICS ::= EXP TK_and EXP 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LOGICS",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // LOGICS ::= EXP TK_or EXP 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LOGICS",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // LOGICS ::= TK_not EXP 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LOGICS",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
