
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Language;

import java.util.ArrayList;
import java.util.stream.Collectors;
import java_cup.runtime.*;
import Components.Response;
import Components.ErrorS;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return TOK.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\101\000\002\002\004\000\002\002\011\000\002\002" +
    "\010\000\002\003\004\000\002\003\003\000\002\021\004" +
    "\000\002\021\004\000\002\021\003\000\002\021\003\000" +
    "\002\021\003\000\002\021\004\000\002\021\003\000\002" +
    "\010\006\000\002\022\005\000\002\011\011\000\002\011" +
    "\011\000\002\011\007\000\002\012\007\000\002\013\005" +
    "\000\002\013\004\000\002\014\004\000\002\014\003\000" +
    "\002\014\003\000\002\015\004\000\002\015\003\000\002" +
    "\016\006\000\002\016\006\000\002\016\005\000\002\017" +
    "\005\000\002\017\005\000\002\017\004\000\002\020\007" +
    "\000\002\020\006\000\002\024\005\000\002\024\004\000" +
    "\002\023\003\000\002\023\003\000\002\023\003\000\002" +
    "\023\003\000\002\023\003\000\002\004\003\000\002\004" +
    "\003\000\002\004\003\000\002\004\003\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\004\003\000" +
    "\002\004\003\000\002\004\003\000\002\004\005\000\002" +
    "\005\005\000\002\005\005\000\002\005\005\000\002\005" +
    "\005\000\002\005\004\000\002\006\005\000\002\006\005" +
    "\000\002\006\005\000\002\006\005\000\002\006\005\000" +
    "\002\006\005\000\002\007\005\000\002\007\005\000\002" +
    "\007\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\166\000\004\005\005\001\002\000\004\002\170\001" +
    "\002\000\004\004\006\001\002\000\004\054\007\001\002" +
    "\000\004\055\010\001\002\000\004\056\011\001\002\000" +
    "\032\003\030\006\033\007\026\010\031\011\015\012\032" +
    "\013\024\015\022\023\035\026\012\033\014\057\013\001" +
    "\002\000\004\054\162\001\002\000\004\002\uffff\001\002" +
    "\000\004\046\160\001\002\000\004\033\uffdc\001\002\000" +
    "\036\003\ufff9\006\ufff9\007\ufff9\010\ufff9\011\ufff9\012\ufff9" +
    "\013\ufff9\015\ufff9\016\ufff9\017\ufff9\023\ufff9\026\ufff9\033" +
    "\ufff9\057\ufff9\001\002\000\032\003\030\006\033\007\026" +
    "\010\031\011\015\012\032\013\024\015\022\023\035\026" +
    "\012\033\014\057\157\001\002\000\004\033\154\001\002" +
    "\000\036\003\ufffa\006\ufffa\007\ufffa\010\ufffa\011\ufffa\012" +
    "\ufffa\013\ufffa\015\ufffa\016\ufffa\017\ufffa\023\ufffa\026\ufffa" +
    "\033\ufffa\057\ufffa\001\002\000\004\054\126\001\002\000" +
    "\036\003\ufffd\006\ufffd\007\ufffd\010\ufffd\011\ufffd\012\ufffd" +
    "\013\ufffd\015\ufffd\016\ufffd\017\ufffd\023\ufffd\026\ufffd\033" +
    "\ufffd\057\ufffd\001\002\000\004\054\041\001\002\000\004" +
    "\062\040\001\002\000\004\033\uffda\001\002\000\036\003" +
    "\ufff8\006\ufff8\007\ufff8\010\ufff8\011\ufff8\012\ufff8\013\ufff8" +
    "\015\ufff8\016\ufff8\017\ufff8\023\ufff8\026\ufff8\033\ufff8\057" +
    "\ufff8\001\002\000\036\003\ufff6\006\ufff6\007\ufff6\010\ufff6" +
    "\011\ufff6\012\ufff6\013\ufff6\015\ufff6\016\ufff6\017\ufff6\023" +
    "\ufff6\026\ufff6\033\ufff6\057\ufff6\001\002\000\004\033\uffdb" +
    "\001\002\000\004\033\uffde\001\002\000\004\033\uffdd\001" +
    "\002\000\004\062\037\001\002\000\004\062\036\001\002" +
    "\000\036\003\ufff7\006\ufff7\007\ufff7\010\ufff7\011\ufff7\012" +
    "\ufff7\013\ufff7\015\ufff7\016\ufff7\017\ufff7\023\ufff7\026\ufff7" +
    "\033\ufff7\057\ufff7\001\002\000\036\003\ufffb\006\ufffb\007" +
    "\ufffb\010\ufffb\011\ufffb\012\ufffb\013\ufffb\015\ufffb\016\ufffb" +
    "\017\ufffb\023\ufffb\026\ufffb\033\ufffb\057\ufffb\001\002\000" +
    "\036\003\ufffc\006\ufffc\007\ufffc\010\ufffc\011\ufffc\012\ufffc" +
    "\013\ufffc\015\ufffc\016\ufffc\017\ufffc\023\ufffc\026\ufffc\033" +
    "\ufffc\057\ufffc\001\002\000\026\024\050\025\047\027\043" +
    "\030\046\031\042\032\045\033\055\036\044\053\052\054" +
    "\051\001\002\000\040\035\uffd3\036\uffd3\037\uffd3\040\uffd3" +
    "\042\uffd3\043\uffd3\044\uffd3\045\uffd3\047\uffd3\050\uffd3\051" +
    "\uffd3\052\uffd3\055\uffd3\061\uffd3\062\uffd3\001\002\000\040" +
    "\035\uffd5\036\uffd5\037\uffd5\040\uffd5\042\uffd5\043\uffd5\044" +
    "\uffd5\045\uffd5\047\uffd5\050\uffd5\051\uffd5\052\uffd5\055\uffd5" +
    "\061\uffd5\062\uffd5\001\002\000\026\024\050\025\047\027" +
    "\043\030\046\031\042\032\045\033\055\036\044\053\052" +
    "\054\051\001\002\000\040\035\uffd2\036\uffd2\037\uffd2\040" +
    "\uffd2\042\uffd2\043\uffd2\044\uffd2\045\uffd2\047\uffd2\050\uffd2" +
    "\051\uffd2\052\uffd2\055\uffd2\061\uffd2\062\uffd2\001\002\000" +
    "\040\035\uffd4\036\uffd4\037\uffd4\040\uffd4\042\uffd4\043\uffd4" +
    "\044\uffd4\045\uffd4\047\uffd4\050\uffd4\051\uffd4\052\uffd4\055" +
    "\uffd4\061\uffd4\062\uffd4\001\002\000\040\035\uffd0\036\uffd0" +
    "\037\uffd0\040\uffd0\042\uffd0\043\uffd0\044\uffd0\045\uffd0\047" +
    "\uffd0\050\uffd0\051\uffd0\052\uffd0\055\uffd0\061\uffd0\062\uffd0" +
    "\001\002\000\040\035\uffd1\036\uffd1\037\uffd1\040\uffd1\042" +
    "\uffd1\043\uffd1\044\uffd1\045\uffd1\047\uffd1\050\uffd1\051\uffd1" +
    "\052\uffd1\055\uffd1\061\uffd1\062\uffd1\001\002\000\026\024" +
    "\050\025\047\027\043\030\046\031\042\032\045\033\055" +
    "\036\044\053\052\054\051\001\002\000\026\024\050\025" +
    "\047\027\043\030\046\031\042\032\045\033\055\036\044" +
    "\053\052\054\051\001\002\000\040\035\uffd9\036\uffd9\037" +
    "\uffd9\040\uffd9\042\uffd9\043\uffd9\044\uffd9\045\uffd9\047\uffd9" +
    "\050\uffd9\051\uffd9\052\uffd9\055\uffd9\061\uffd9\062\uffd9\001" +
    "\002\000\040\035\uffd8\036\uffd8\037\uffd8\040\uffd8\042\uffd8" +
    "\043\uffd8\044\uffd8\045\uffd8\047\uffd8\050\uffd8\051\uffd8\052" +
    "\uffd8\055\uffd8\061\uffd8\062\uffd8\001\002\000\040\035\uffd6" +
    "\036\uffd6\037\uffd6\040\uffd6\042\uffd6\043\uffd6\044\uffd6\045" +
    "\uffd6\047\uffd6\050\uffd6\051\uffd6\052\uffd6\055\uffd6\061\uffd6" +
    "\062\uffd6\001\002\000\034\035\071\036\060\037\066\040" +
    "\067\042\065\043\070\044\061\045\064\047\073\050\072" +
    "\051\074\052\063\055\062\001\002\000\040\035\uffd7\036" +
    "\uffd7\037\uffd7\040\uffd7\042\uffd7\043\uffd7\044\uffd7\045\uffd7" +
    "\047\uffd7\050\uffd7\051\uffd7\052\uffd7\055\uffd7\061\uffd7\062" +
    "\uffd7\001\002\000\026\024\050\025\047\027\043\030\046" +
    "\031\042\032\045\033\055\036\044\053\052\054\051\001" +
    "\002\000\026\024\050\025\047\027\043\030\046\031\042" +
    "\032\045\033\055\036\044\053\052\054\051\001\002\000" +
    "\004\056\107\001\002\000\026\024\050\025\047\027\043" +
    "\030\046\031\042\032\045\033\055\036\044\053\052\054" +
    "\051\001\002\000\026\024\050\025\047\027\043\030\046" +
    "\031\042\032\045\033\055\036\044\053\052\054\051\001" +
    "\002\000\026\024\050\025\047\027\043\030\046\031\042" +
    "\032\045\033\055\036\044\053\052\054\051\001\002\000" +
    "\026\024\050\025\047\027\043\030\046\031\042\032\045" +
    "\033\055\036\044\053\052\054\051\001\002\000\026\024" +
    "\050\025\047\027\043\030\046\031\042\032\045\033\055" +
    "\036\044\053\052\054\051\001\002\000\026\024\050\025" +
    "\047\027\043\030\046\031\042\032\045\033\055\036\044" +
    "\053\052\054\051\001\002\000\026\024\050\025\047\027" +
    "\043\030\046\031\042\032\045\033\055\036\044\053\052" +
    "\054\051\001\002\000\026\024\050\025\047\027\043\030" +
    "\046\031\042\032\045\033\055\036\044\053\052\054\051" +
    "\001\002\000\026\024\050\025\047\027\043\030\046\031" +
    "\042\032\045\033\055\036\044\053\052\054\051\001\002" +
    "\000\026\024\050\025\047\027\043\030\046\031\042\032" +
    "\045\033\055\036\044\053\052\054\051\001\002\000\040" +
    "\035\071\036\060\037\066\040\067\042\065\043\070\044" +
    "\061\045\064\047\073\050\072\051\uffc3\052\uffc3\055\uffc3" +
    "\061\uffc3\062\uffc3\001\002\000\040\035\071\036\060\037" +
    "\066\040\067\042\uffc5\043\uffc5\044\uffc5\045\uffc5\047\uffc5" +
    "\050\uffc5\051\uffc5\052\uffc5\055\uffc5\061\uffc5\062\uffc5\001" +
    "\002\000\040\035\071\036\060\037\066\040\067\042\uffc4" +
    "\043\uffc4\044\uffc4\045\uffc4\047\uffc4\050\uffc4\051\uffc4\052" +
    "\uffc4\055\uffc4\061\uffc4\062\uffc4\001\002\000\040\035\uffce" +
    "\036\uffce\037\066\040\067\042\uffce\043\uffce\044\uffce\045" +
    "\uffce\047\uffce\050\uffce\051\uffce\052\uffce\055\uffce\061\uffce" +
    "\062\uffce\001\002\000\040\035\071\036\060\037\066\040" +
    "\067\042\uffc8\043\uffc8\044\061\045\064\047\073\050\072" +
    "\051\uffc8\052\uffc8\055\uffc8\061\uffc8\062\uffc8\001\002\000" +
    "\040\035\uffcb\036\uffcb\037\uffcb\040\uffcb\042\uffcb\043\uffcb" +
    "\044\uffcb\045\uffcb\047\uffcb\050\uffcb\051\uffcb\052\uffcb\055" +
    "\uffcb\061\uffcb\062\uffcb\001\002\000\040\035\uffcc\036\uffcc" +
    "\037\uffcc\040\uffcc\042\uffcc\043\uffcc\044\uffcc\045\uffcc\047" +
    "\uffcc\050\uffcc\051\uffcc\052\uffcc\055\uffcc\061\uffcc\062\uffcc" +
    "\001\002\000\040\035\071\036\060\037\066\040\067\042" +
    "\uffc9\043\uffc9\044\061\045\064\047\073\050\072\051\uffc9" +
    "\052\uffc9\055\uffc9\061\uffc9\062\uffc9\001\002\000\040\035" +
    "\071\036\060\037\066\040\067\042\uffc6\043\uffc6\044\uffc6" +
    "\045\uffc6\047\uffc6\050\uffc6\051\uffc6\052\uffc6\055\uffc6\061" +
    "\uffc6\062\uffc6\001\002\000\040\035\071\036\060\037\066" +
    "\040\067\042\065\043\070\044\061\045\064\047\073\050" +
    "\072\051\074\052\uffc2\055\uffc2\061\uffc2\062\uffc2\001\002" +
    "\000\032\003\030\006\033\007\026\010\031\011\015\012" +
    "\032\013\024\015\022\023\035\026\012\033\014\057\114" +
    "\001\002\000\040\003\ufff1\006\ufff1\007\ufff1\010\ufff1\011" +
    "\ufff1\012\ufff1\013\ufff1\014\111\015\ufff1\016\ufff1\017\ufff1" +
    "\023\ufff1\026\ufff1\033\ufff1\057\ufff1\001\002\000\006\013" +
    "\024\056\107\001\002\000\036\003\ufff3\006\ufff3\007\ufff3" +
    "\010\ufff3\011\ufff3\012\ufff3\013\ufff3\015\ufff3\016\ufff3\017" +
    "\ufff3\023\ufff3\026\ufff3\033\ufff3\057\ufff3\001\002\000\036" +
    "\003\ufff2\006\ufff2\007\ufff2\010\ufff2\011\ufff2\012\ufff2\013" +
    "\ufff2\015\ufff2\016\ufff2\017\ufff2\023\ufff2\026\ufff2\033\ufff2" +
    "\057\ufff2\001\002\000\040\003\uffdf\006\uffdf\007\uffdf\010" +
    "\uffdf\011\uffdf\012\uffdf\013\uffdf\014\uffdf\015\uffdf\016\uffdf" +
    "\017\uffdf\023\uffdf\026\uffdf\033\uffdf\057\uffdf\001\002\000" +
    "\032\003\030\006\033\007\026\010\031\011\015\012\032" +
    "\013\024\015\022\023\035\026\012\033\014\057\116\001" +
    "\002\000\040\003\uffe0\006\uffe0\007\uffe0\010\uffe0\011\uffe0" +
    "\012\uffe0\013\uffe0\014\uffe0\015\uffe0\016\uffe0\017\uffe0\023" +
    "\uffe0\026\uffe0\033\uffe0\057\uffe0\001\002\000\036\003\ufffe" +
    "\006\ufffe\007\ufffe\010\ufffe\011\ufffe\012\ufffe\013\ufffe\015" +
    "\ufffe\016\ufffe\017\ufffe\023\ufffe\026\ufffe\033\ufffe\057\ufffe" +
    "\001\002\000\040\035\071\036\060\037\066\040\067\042" +
    "\uffc7\043\uffc7\044\uffc7\045\uffc7\047\uffc7\050\uffc7\051\uffc7" +
    "\052\uffc7\055\uffc7\061\uffc7\062\uffc7\001\002\000\040\035" +
    "\uffcd\036\uffcd\037\066\040\067\042\uffcd\043\uffcd\044\uffcd" +
    "\045\uffcd\047\uffcd\050\uffcd\051\uffcd\052\uffcd\055\uffcd\061" +
    "\uffcd\062\uffcd\001\002\000\040\035\071\036\060\037\066" +
    "\040\067\042\065\043\070\044\061\045\064\047\073\050" +
    "\072\051\uffc1\052\uffc1\055\uffc1\061\uffc1\062\uffc1\001\002" +
    "\000\034\035\071\036\060\037\066\040\067\042\065\043" +
    "\070\044\061\045\064\047\073\050\072\051\074\052\063" +
    "\055\124\001\002\000\040\035\uffcf\036\uffcf\037\uffcf\040" +
    "\uffcf\042\uffcf\043\uffcf\044\uffcf\045\uffcf\047\uffcf\050\uffcf" +
    "\051\uffcf\052\uffcf\055\uffcf\061\uffcf\062\uffcf\001\002\000" +
    "\040\035\uffca\036\uffca\037\uffca\040\uffca\042\uffca\043\uffca" +
    "\044\uffca\045\uffca\047\uffca\050\uffca\051\uffca\052\uffca\055" +
    "\uffca\061\uffca\062\uffca\001\002\000\026\024\050\025\047" +
    "\027\043\030\046\031\042\032\045\033\055\036\044\053" +
    "\052\054\051\001\002\000\034\035\071\036\060\037\066" +
    "\040\067\042\065\043\070\044\061\045\064\047\073\050" +
    "\072\051\074\052\063\055\130\001\002\000\004\056\131" +
    "\001\002\000\010\016\135\017\141\057\134\001\002\000" +
    "\036\003\ufff0\006\ufff0\007\ufff0\010\ufff0\011\ufff0\012\ufff0" +
    "\013\ufff0\015\ufff0\016\ufff0\017\ufff0\023\ufff0\026\ufff0\033" +
    "\ufff0\057\ufff0\001\002\000\004\057\uffeb\001\002\000\036" +
    "\003\uffee\006\uffee\007\uffee\010\uffee\011\uffee\012\uffee\013" +
    "\uffee\015\uffee\016\uffee\017\uffee\023\uffee\026\uffee\033\uffee" +
    "\057\uffee\001\002\000\026\024\050\025\047\027\043\030" +
    "\046\031\042\032\045\033\055\036\044\053\052\054\051" +
    "\001\002\000\010\016\135\017\141\057\uffec\001\002\000" +
    "\004\057\145\001\002\000\010\016\uffe9\017\uffe9\057\uffe9" +
    "\001\002\000\004\061\142\001\002\000\034\003\030\006" +
    "\033\007\026\010\031\011\015\012\032\013\024\015\022" +
    "\023\035\026\012\033\014\056\107\057\uffe3\001\002\000" +
    "\032\003\030\006\033\007\026\010\031\011\015\012\032" +
    "\013\024\015\022\023\035\026\012\033\014\057\uffe5\001" +
    "\002\000\004\057\uffe4\001\002\000\036\003\uffef\006\uffef" +
    "\007\uffef\010\uffef\011\uffef\012\uffef\013\uffef\015\uffef\016" +
    "\uffef\017\uffef\023\uffef\026\uffef\033\uffef\057\uffef\001\002" +
    "\000\004\057\uffed\001\002\000\010\016\uffea\017\uffea\057" +
    "\uffea\001\002\000\034\035\071\036\060\037\066\040\067" +
    "\042\065\043\070\044\061\045\064\047\073\050\072\051" +
    "\074\052\063\061\151\001\002\000\040\003\030\006\033" +
    "\007\026\010\031\011\015\012\032\013\024\015\022\016" +
    "\uffe6\017\uffe6\023\035\026\012\033\014\056\107\057\uffe6" +
    "\001\002\000\036\003\030\006\033\007\026\010\031\011" +
    "\015\012\032\013\024\015\022\016\uffe8\017\uffe8\023\035" +
    "\026\012\033\014\057\uffe8\001\002\000\010\016\uffe7\017" +
    "\uffe7\057\uffe7\001\002\000\004\046\155\001\002\000\026" +
    "\024\050\025\047\027\043\030\046\031\042\032\045\033" +
    "\055\036\044\053\052\054\051\001\002\000\034\035\071" +
    "\036\060\037\066\040\067\042\065\043\070\044\061\045" +
    "\064\047\073\050\072\051\074\052\063\062\ufff5\001\002" +
    "\000\004\002\000\001\002\000\026\024\050\025\047\027" +
    "\043\030\046\031\042\032\045\033\055\036\044\053\052" +
    "\054\051\001\002\000\034\035\071\036\060\037\066\040" +
    "\067\042\065\043\070\044\061\045\064\047\073\050\072" +
    "\051\074\052\063\062\ufff4\001\002\000\030\024\050\025" +
    "\047\027\043\030\046\031\042\032\045\033\055\036\044" +
    "\053\052\054\051\055\163\001\002\000\004\062\167\001" +
    "\002\000\034\035\071\036\060\037\066\040\067\042\065" +
    "\043\070\044\061\045\064\047\073\050\072\051\074\052" +
    "\063\055\165\001\002\000\004\062\166\001\002\000\036" +
    "\003\uffe2\006\uffe2\007\uffe2\010\uffe2\011\uffe2\012\uffe2\013" +
    "\uffe2\015\uffe2\016\uffe2\017\uffe2\023\uffe2\026\uffe2\033\uffe2" +
    "\057\uffe2\001\002\000\036\003\uffe1\006\uffe1\007\uffe1\010" +
    "\uffe1\011\uffe1\012\uffe1\013\uffe1\015\uffe1\016\uffe1\017\uffe1" +
    "\023\uffe1\026\uffe1\033\uffe1\057\uffe1\001\002\000\004\002" +
    "\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\166\000\004\002\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\003\016\010\024\011\020\012\015\020" +
    "\026\021\022\022\033\023\017\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\010\024\011\020\012\015\020\026" +
    "\021\116\022\033\023\017\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\004\055\005\052\006\053\007\056\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\004\124\005\052\006\053" +
    "\007\056\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\004\122\005\052" +
    "\006\053\007\056\001\001\000\012\004\121\005\052\006" +
    "\053\007\056\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\004\120\005\052\006\053\007\056\001\001\000\012" +
    "\004\117\005\052\006\053\007\056\001\001\000\004\024" +
    "\107\001\001\000\012\004\105\005\052\006\053\007\056" +
    "\001\001\000\012\004\104\005\052\006\053\007\056\001" +
    "\001\000\012\004\103\005\052\006\053\007\056\001\001" +
    "\000\012\004\102\005\052\006\053\007\056\001\001\000" +
    "\012\004\101\005\052\006\053\007\056\001\001\000\012" +
    "\004\100\005\052\006\053\007\056\001\001\000\012\004" +
    "\077\005\052\006\053\007\056\001\001\000\012\004\076" +
    "\005\052\006\053\007\056\001\001\000\012\004\075\005" +
    "\052\006\053\007\056\001\001\000\012\004\074\005\052" +
    "\006\053\007\056\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\022\003\114\010\024" +
    "\011\020\012\015\020\026\021\022\022\033\023\017\001" +
    "\001\000\002\001\001\000\006\011\111\024\112\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\020\010\024\011\020\012\015\020\026\021\116\022\033" +
    "\023\017\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\004" +
    "\126\005\052\006\053\007\056\001\001\000\002\001\001" +
    "\000\004\013\131\001\001\000\012\014\136\015\135\016" +
    "\137\017\132\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\004\147\005\052\006\053\007" +
    "\056\001\001\000\006\016\146\017\145\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\024\003" +
    "\142\010\024\011\020\012\015\020\026\021\022\022\033" +
    "\023\017\024\143\001\001\000\020\010\024\011\020\012" +
    "\015\020\026\021\116\022\033\023\017\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\024\003\151\010\024\011\020" +
    "\012\015\020\026\021\022\022\033\023\017\024\152\001" +
    "\001\000\020\010\024\011\020\012\015\020\026\021\116" +
    "\022\033\023\017\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\004\155\005\052\006\053\007\056\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\004\160\005" +
    "\052\006\053\007\056\001\001\000\002\001\001\000\012" +
    "\004\163\005\052\006\053\007\056\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    ArrayList<Response> errorsS = new ArrayList<>();
    public void syntax_error(Symbol sym) {
        errorsS.add(new Response(new ErrorS(sym.left,sym.right,sym.value,TOK.terminalNames[sym.sym])));
    }
    public void unrecovered_syntax_error(Symbol sym) throws java.lang.Exception {
        errorsS.add(new Response("Error Sintáctico sin recuperar."));
    }
    public String getErrors() {
        return errorsS.stream().map(Object::toString).collect(Collectors.joining("\n-> "));
    }
    public boolean isSuccessExecution() {
        return !(errorsS.size() > 0);
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INIT EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String start_val = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INIT ::= RW_void RW_main TK_lpar TK_rpar TK_lbrc INSTRUCTIONS TK_rbrc 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INIT",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INIT ::= RW_void RW_main TK_lpar TK_rpar TK_lbrc TK_rbrc 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INIT",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INSTRUCTIONS ::= INSTRUCTIONS INSTRUCTION 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTIONS",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INSTRUCTIONS ::= INSTRUCTION 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTIONS",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // INSTRUCTION ::= DECLID TK_semicolon 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // INSTRUCTION ::= REASIGN TK_semicolon 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // INSTRUCTION ::= IFSTRUCT 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // INSTRUCTION ::= SWITCHSTRUCT 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // INSTRUCTION ::= PRINT 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // INSTRUCTION ::= RW_break TK_semicolon 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // INSTRUCTION ::= error 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCTION",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // DECLID ::= TYPE TK_id TK_equal EXP 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLID",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // REASIGN ::= TK_id TK_equal EXP 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("REASIGN",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // IFSTRUCT ::= RW_if TK_lpar EXP TK_rpar ENV RW_else IFSTRUCT 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IFSTRUCT",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // IFSTRUCT ::= RW_if TK_lpar EXP TK_rpar ENV RW_else ENV 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IFSTRUCT",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // IFSTRUCT ::= RW_if TK_lpar EXP TK_rpar ENV 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IFSTRUCT",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // SWITCHSTRUCT ::= RW_switch TK_lpar EXP TK_rpar ENVS 
            {
              String RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int expleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int expright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String exp = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("SWITCHSTRUCT",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // ENVS ::= TK_lbrc CASESDEFAULT TK_rbrc 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ENVS",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // ENVS ::= TK_lbrc TK_rbrc 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ENVS",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // CASESDEFAULT ::= CASES DEFAULT 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CASESDEFAULT",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // CASESDEFAULT ::= CASES 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CASESDEFAULT",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // CASESDEFAULT ::= DEFAULT 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CASESDEFAULT",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // CASES ::= CASES CASE 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CASES",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // CASES ::= CASE 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CASES",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // CASE ::= RW_case EXP TK_colon INSTRUCTIONS 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CASE",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // CASE ::= RW_case EXP TK_colon ENV 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CASE",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // CASE ::= RW_case EXP TK_colon 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CASE",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // DEFAULT ::= RW_default TK_colon INSTRUCTIONS 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DEFAULT",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // DEFAULT ::= RW_default TK_colon ENV 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DEFAULT",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // DEFAULT ::= RW_default TK_colon 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DEFAULT",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // PRINT ::= RW_print TK_lpar EXP TK_rpar TK_semicolon 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PRINT",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // PRINT ::= RW_print TK_lpar TK_rpar TK_semicolon 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PRINT",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // ENV ::= TK_lbrc INSTRUCTIONS TK_rbrc 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ENV",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // ENV ::= TK_lbrc TK_rbrc 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ENV",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // TYPE ::= RW_string 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TYPE",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // TYPE ::= RW_int 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TYPE",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // TYPE ::= RW_bool 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TYPE",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // TYPE ::= RW_char 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TYPE",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // TYPE ::= RW_double 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TYPE",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // EXP ::= ARITHMETICS 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // EXP ::= RELATIONALS 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // EXP ::= LOGICS 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // EXP ::= TK_id 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // EXP ::= TK_string 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // EXP ::= TK_char 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // EXP ::= TK_int 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // EXP ::= TK_double 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // EXP ::= RW_true 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // EXP ::= RW_false 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // EXP ::= TK_lpar EXP TK_rpar 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXP",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // ARITHMETICS ::= EXP TK_plus EXP 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARITHMETICS",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // ARITHMETICS ::= EXP TK_minus EXP 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARITHMETICS",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // ARITHMETICS ::= EXP TK_mult EXP 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARITHMETICS",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // ARITHMETICS ::= EXP TK_div EXP 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARITHMETICS",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // ARITHMETICS ::= TK_minus EXP 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARITHMETICS",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // RELATIONALS ::= EXP TK_equequ EXP 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RELATIONALS",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // RELATIONALS ::= EXP TK_notequ EXP 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RELATIONALS",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // RELATIONALS ::= EXP TK_lessequ EXP 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RELATIONALS",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // RELATIONALS ::= EXP TK_moreequ EXP 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RELATIONALS",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // RELATIONALS ::= EXP TK_less EXP 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RELATIONALS",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // RELATIONALS ::= EXP TK_more EXP 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RELATIONALS",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // LOGICS ::= EXP TK_and EXP 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LOGICS",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // LOGICS ::= EXP TK_or EXP 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LOGICS",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // LOGICS ::= TK_not EXP 
            {
              String RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LOGICS",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
